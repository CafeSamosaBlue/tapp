{"version":3,"sources":["api/defs/prop-types.js","libs/urlUtils.js","api/mockAPI/data.js","api/mockAPI/utils.js","api/mockAPI/sessions.ts","api/mockAPI/contract_templates.js","api/mockAPI/active_user.js","api/mockAPI/instructors.js","api/mockAPI/positions.js","api/mockAPI/wage_chunks.js","api/mockAPI/applications.js","api/mockAPI/applicants.js","api/mockAPI/assignments.js","api/mockAPI/debug.js","api/mockAPI/index.js","api/defs/doc-generation.js","api/actions/errors.js","api/actions/status.js","api/constants/index.js","api/actions/utils.js","libs/apiUtils.js","api/reducers/utils.js","api/reducers/sessions.js","api/reducers/users.js","api/reducers/applicants.js","api/actions/applicants.js","api/reducers/applications.js","api/reducers/positions.js","api/reducers/instructors.js","api/actions/instructors.js","api/reducers/contract_templates.js","api/actions/contract_templates.js","api/actions/positions.js","api/actions/applications.js","api/reducers/assignments.js","api/actions/wage_chunks.js","api/actions/assignments.js","api/actions/globals.js","api/actions/init.js","api/actions/users.js","api/actions/sessions.js","api/actions/offers.js","views/dev_frame/mockAPI.js","views/dev_frame/active-user-switch.js","views/dev_frame/index.js","views/notificatons/index.js","views/offertable/actions.js","components/forms/common-controls.js","components/forms/session-editor.js","components/diff-table.js","components/applicants.tsx","components/contract-templates-list.js","components/instructors.js","components/edit-field-widgets.js","views/instructors/delete-instructor-dialog.js","views/instructors/editable-instructors-list.js","libs/utils.js","views/instructors/add-instructor-dialog.js","components/action-buttons.tsx","components/export-button.js","components/import-button.js","libs/importExportUtils.js","libs/exportUtils.ts","libs/diffUtils.ts","views/instructors/import-export.js","components/layout.tsx","views/instructors/index.js","components/positions-list.js","components/assignments-list.js","components/offer-table.js","views/offertable/index.js","views/offertable/constants.js","components/forms/position-editor.js","components/forms/assignment-editor.js","components/forms/contract-template-editor.js","views/dashboard/index.js","components/email-button.js","views/cp_control_panel/ControlPanel.jsx","components/filtered-list.js","views/sessions/add-session-dialog.js","components/sessions.js","views/sessions/index.js","views/positions/add-position-dialog.js","views/positions/position-list.js","views/positions/import-export.js","views/positions/index.js","views/assignments/add-assignment-dialog.js","views/assignments/assignment-details.js","views/assignments/offer-actions.js","views/assignments/import-export.js","views/assignments/index.js","views/contract_template/contract-template-dialog.js","views/contract_template/contract-template-list.js","views/contract_template/index.js","components/header.js","components/filterable-menu.js","views/admin/header.js","components/active-session.js","components/active-user.js","views/admin/landing.tsx","views/applicants/editable-applicants-list.tsx","views/applicants/add-applicant-dialog.tsx","views/applicants/import-export.tsx","views/applicants/index.tsx","views/routes/index.js","App.jsx","api/reducers/globals.js","views/offertable/reducers.js","rootReducer.js","api/reducers/status.js","store.js","index.js"],"names":["generatePropTypes","PropTypes","id","oneOfType","number","string","apiResponse","shape","status","oneOf","isRequired","message","payload","any","apiResponseSuccess","apiResponseError","idOnly","session","start_date","end_date","name","contractTemplateMinimal","template_file","contractTemplate","template_name","position","position_code","position_title","hours_per_assignment","contract_template_id","duties","qualifications","ad_hours_per_assignment","ad_num_assignments","ad_open_date","ad_close_date","desired_num_assignments","current_enrollment","current_waitlisted","instructor_ids","arrayOf","instructor_preference","preference_level","applicant_id","instructor_id","instructor","first_name","last_name","email","utorid","assignment","note","contract_override_pdf","position_id","active_offer_status","applicant","student_number","phone","wageChunk","hours","rate","reportingTag","offer","position_start_date","position_end_date","first_time_ta","bool","instructor_contact_desc","pay_period_desc","installments","ta_coordinator_name","ta_coordinator_email","emailed_date","accepted_date","rejected_date","withdrawn_date","application","session_id","comments","program","department","previous_uoft_experience","yip","annotation","position_preference","user","roles","stringToNativeType","s","JSON","parse","e","parseURLSearchString","searchParams","URLSearchParams","ret","entries","key","val","contract_templates_by_filename","mockData","sessions","rate1","rate2","available_contract_templates","contract_templates","contract_templates_by_session","instructors","positions_by_session","positions","instructor_preferences","applicants","assignments_by_session","assignments","wage_chunks","assignment_id","offers","applications","previous_uoft_ta_experience","position_preferences","users","active_user","sum","numbers","num","getUnusedId","data","prop","ids","map","x","filter","max","Math","isNaN","round","random","find","obj","findAllById","includes","deleteInArray","splice","indexOf","getAttributesCheckMessage","props","required","unique","Object","requirements","MockAPIController","ownData","this","query","rawFind","Error","stringify","newId","newItem","push","value","item","validateProp","updateIfFound","validateNew","create","joinWithConjunction","items","length","join","formatInstructorsContact","wageChunkArrayToPayPeriodDescription","wageChunks","rateData","Date","min","values","toLocaleDateString","month","day","year","errorUnlessRole","role","targetRule","base64abc","split","base64codes","Uint8Array","i","bytesToBase64","bytes","result","l","forEach","char","index","charCodeAt","Session","newSession","args","undefined","findAll","sessionsRoutes","get","documentCallback","func","summary","returns","wrappedPropTypes","docApiPropTypes","post","params","body","upsert","posts","ContractTemplate","template","findAllBySession","matchingSession","newTemplate","templatesRoutes","getTemplateHtml","template_id","templateContent","encodedContent","TextEncoder","encode","file_name","mime_type","content","upsertBySession","User","matchingUser","activeUserRoutes","getActiveUser","Instructor","matchingInstructor","activeUser","instructorsRoutes","activeInstructor","getFromActiveUser","instructorPositions","Position","getForInstructor","instructorIdsSet","Set","add","has","rawPosition","_session_id","matchingPosition","bySessionsList","newPosition","keys","positionsRoutes","assign","WageChunk","matchingAssignment","Assignment","rawWageChunk","getSession","session_start_date","december","getFullYear","getPosition","existingWageChunks","findAllByAssignment","chunk","upsertByAssignment","wageChunkRoutes","Application","applicationsRoutes","Applicant","Array","from","concat","applicantsRoutes","applicantIds","findAllBySessionAndInstructor","existingApplicant","filterNullProps","comment","ActiveOffer","findByAssignment","getWageChunkInfo","activeOffer","getActiveOffer","upsertedAssignment","findAssociatedSession","dateRanges","january","toISOString","splitDateRangeAtNewYear","range","perChunkDelta","positionIds","_ensureAssignment","baseOffer","getAssignment","getApplicant","getInstructors","getContractTemplate","startDates","endDates","sort","wageChunkArrayToStartAndEndDates","signature","nag_count","contract_template","assignmentsRoutes","setAllByAssignment","withdrawByAssignment","rejectByAssignment","acceptByAssignment","createByAssignment","emailByAssignment","nagByAssignment","storage","Debug","getAllData","makeSnapshot","constructor","snapshot","clearData","debugRoutes","found_user","setActiveUser","restoreSnapshot","MockAPI","seedData","routePrefix","getRoutes","exclude","postRoutes","apiGET","url","_getRoutesParsers","route","match","authenticateActiveUserBasedOnRole","spec","toString","apiPOST","_postRoutesParsers","active","routeStr","r","Route","delay","_origFetch","fetch","window","a","init","parsedURL","URL","pathname","startsWith","replace","method","mockResponse","console","log","responseObj","Response","Blob","type","statusText","Promise","resolve","setTimeout","mockAPI","CallAtom","createCallChain","chain","propTypesProxy","callChain","handler","receiver","Reflect","apply","thisArg","lastProp","pop","ownKeys","Proxy","PROPTYPES_TO_SWAGGER_TYPES","object","array","wrappedPropTypesToSwagger","pt","requiredList","swaggerVal","warn","wrapInStandardApiResponseForSwagger","properties","enum","urlTemplateToSwagger","parsed","RouteParser","templateVars","subs","templateVar","decodeURI","reverse","documentedCallbackToSwagger","docs","responses","default","prefixRoles","parameters","in","description","schema","requestBody","mockApiRoutesAsSwaggerPaths","path","templatePath","tags","info","applicableTags","sortedRet","attrs","defaultNotifProps","autoDismiss","title","fetchError","error","upsertError","deleteError","apiError","apiInteractionStart","apiInteractionEnd","arrayToHash","indexBy","isArray","d","actionFactory","splitObjByProps","filtered","hasOwnProperty","call","flattenIdFactory","inPropName","outPropName","isArrayOfIds","validatedApiDispatcher","dispatcher","propTypes","onErrorDispatch","dispatch","propTypeCheck","arg","checkPropTypes","wasPropTypesError","statusId","uuid","Function","FETCH_INIT","credentials","headers","ApiError","resp","errorMessage","captureStackTrace","ApiFetchError","response","_ensurePath","_processFetchResponse","json","upsertItem","modelData","didUpdate","newModelData","createBasicReducerObject","FETCH_MANY","FETCH_ONE","UPSERT_ONE","DELETE_ONE","state","action","_modelData","deletedItem","createReducer","initialState","handlers","_storePath","pushToPath","dir","unshift","reducer","_origCreateReducer","_localStoreSelector","localState","createLocalStoreSelector","combineReducers","model","pushToPathCallbacks","newReducer","_origCombineReducers","basicReducers","sessionsReducer","activeSession","usersReducer","active_role","insertIfMissing","target","source","missingItems","some","applicantsReducer","fetchApplicantsSuccess","fetchOneApplicantSuccess","upsertOneApplicantSuccess","deleteOneApplicantSuccess","fetchApplicants","getState","activeRoleSelector","activeSessionId","upsertApplicant","bySession","activeSessionSelector","exportApplicants","formatter","format","applicantsSelector","upsertApplicants","dispatchers","all","localStoreSelector","createSelector","applicationsReducer","positionsReducer","positionId","instructorsReducer","fetchInstructorsSuccess","fetchOneInstructorSuccess","upsertOneInstructorSuccess","deleteOneInstructorSuccess","fetchInstructors","upsertInstructor","deleteInstructor","exportInstructors","instructorsSelector","upsertInstructors","contractTemplatesReducer","fetchContractTemplatesSuccess","fetchAllContractTemplatesSuccess","upsertOneContractTemplateSuccess","deleteOneContractTemplateSuccess","fetchContractTemplates","upsertContractTemplate","fetchAllContractTemplates","previewContractTemplate","downloadContractTemplate","atob","File","contractTemplatesSelector","allContractTemplatesSelector","fetchPositionsSuccess","fetchOnePositionSuccess","upsertOnePositionSuccess","deleteOnePositionSuccess","fetchPositions","instructorsToInstructorIds","contractTemplateToContractTemplateId","instructorToInstructorId","applicantToApplicantId","prepForApi","preference","upsertPosition","exportPositions","positionsSelector","upsertPositions","_positionsSelector","contractTemplates","instructorsById","contractTemplatesById","applicantsById","rest","fetchApplicationsSuccess","fetchOneApplicationSuccess","upsertOneApplicationSuccess","deleteOneApplicationSuccess","positionToPositionId","fetchApplications","_applicationsSelector","positionsById","setWageChunks","assignmentId","_wageChunksByAssignmentId","assignmentsReducer","fetchWageChunksForAssignmentSuccess","upsertWageChunksForAssignmentSuccess","upsertOneWageChunkSuccess","deleteOneWageChunkSuccess","fetchWageChunksForAssignment","upsertWageChunksForAssignment","fetchAssignment","wageChunksByAssignmentSelector","fetchAssignmentsSuccess","fetchOneAssignmentSuccess","upsertOneAssignmentSuccess","deleteOneAssignmentSuccess","fetchAssignments","upsertAssignment","exportAssignments","assignmentsSelector","wageChunkPromises","upsertAssignments","_assignmentsSelector","setGlobals","globals","globalsSelector","setGlobalsInUrl","append","history","pushState","newUrl","location","search","setMockAPIState","options","skipInit","initFromStage","ui","otherGlobals","storedActiveSession","toggleMockApi","enableMockAPI","require","replaceGlobalFetch","restoreGlobalFetch","prepareGlobals","stage","startAfterStage","shouldRunStage","queryStage","initOrder","stageDependent","sessionsSelector","parsedGlobals","fetchActiveUser","activeRole","setActiveUserRole","fetchSessions","setActiveSession","fetchActions","fetchActiveUserSuccess","fetchUsersSuccess","upsertUserSuccess","setActiveUserRoleSuccess","fetchUsers","debugOnlyFetchUsers","debugOnlySetActiveUser","usersSelector","activeUserSelector","fetchSessionsSuccess","fetchOneSessionSuccess","upsertOneSessionSuccess","setActiveSessionAction","upsertSession","currentActiveSession","fetchOfferSuccess","setOfferAcceptedSuccess","setOfferRejectedSuccess","offerCreateSuccess","offerEmailSuccess","offerNagSuccess","offerWithdrawSuccess","setOfferForAssignmentAccepted","setOfferForAssignmentRejected","offerForAssignmentWithdraw","offerForAssignmentCreate","offerForAssignmentEmail","offerForAssignmentNag","ToggleMockApi","ButtonGroup","Button","variant","onClick","connect","ident","BootstrapNavLink","Nav","Link","as","NavLink","activeClassName","to","children","swaggerData","openapi","servers","paths","ConnectedActiveUserButton","React","useState","dropdownVisible","setDropdownVisible","useEffect","className","Dropdown","onSelect","onToggle","desiredVisibility","show","alignRight","Toggle","Menu","flip","Item","eventKey","ConnectedToggleMockApi","ConnectedNotifications","notifications","Notifications","offerTableSelector","offerTable","fieldEditorFactory","boundData","setBoundData","setAttrFactory","attr","coerceFunc","newVal","newData","inputAttrs","valueFunc","Number","slice","Fragment","Form","Label","Control","onChange","DialogRow","Row","style","alignItems","Children","child","Group","Col","SessionEditor","createFieldEditor","setSession","step","createDiffCell","accessor","Cell","original","changed","changes","createDiffColumnsFromColumns","columns","column","DEFAULT_COLUMNS","Header","ApplicantsDiffList","modifiedApplicants","ApplicantsList","showPagination","minRows","DEFAULT_APPLICANT","ApplicantEditor","applicantProps","setApplicant","newApplicant","ContractTemplatesList","InstructorsList","InstructorsDiffList","modifiedInstructors","DEFAULT_INSTRUCTOR","InstructorEditor","instructorProps","setInstructor","newInstructor","EditFieldDialog","onHide","fieldVal","setFieldVal","inProgress","setInProgress","cancelClick","spinner","Spinner","animation","size","changeIndicator","Modal","closeButton","Title","Body","currentTarget","Footer","doSave","EditFieldIcon","hidden","EditableField","editable","dialogShow","setDialogShow","DeleteInstructorDialog","onDelete","EditableCell","field","applicantId","ConnectedInstructorsList","inDeleteMode","deleteDialogVisible","setDeleteDialogVisible","instructorToDelete","setInstructorToDelete","generateCell","instructorCurrentlyAssignedHash","maxWidth","resizable","strip","trim","formatDate","dateString","normalizedDateString","toJSON","date","BLANK_INSTRUCTOR","ConnectedAddInstructorDialog","setNewInstructor","conflicts","delayShow","immediateShow","getConficts","Alert","disabled","wrapIcon","icon","Icon","ActionsList","ActionHeader","ActionButton","iconNode","classNames","ActionMenuButton","menu","menuOpen","setMenuOpen","menuHeight","setMenuHeight","menuSizerRef","useRef","current","clientHeight","dropright","closed","height","ref","ExportActionButton","clickCallback","option","FaDownload","DEFAULT_LABEL","ImportDialog","dialogOpen","onCancel","onClose","onConfirm","dialogContent","onFileChange","parentSetInProgress","fileInputLabel","setFileInputLabel","fileArrayBuffer","setFileArrayBuffer","fileContents","setFileContents","_setInProgress","rawData","str","TextDecoder","decode","fileType","workbook","XLSX","read","firstSheet","SheetNames","utils","sheet_to_json","Sheets","dialogClassName","Container","label","event","file","files","reader","FileReader","onload","readAsArrayBuffer","custom","then","ImportButton","setDialogOpen","handleClose","ImportActionButton","FaUpload","validate","requiredKeys","deleteReferences","keyMap","findMatchingKey","targetKey","fuzzySet","FuzzySet","matches","matchedKey","SpreadsheetRowMapper","unmatchedKeys","empiricalKeyMap","unknownKeys","row","parseDate","sec","chrono","normalizeImport","dateColumns","baseName","rowMapper","formatRow","newRow","col","dataToFile","formatters","dataFormat","filePrefix","fileName","book_new","sheet","aoa_to_sheet","toSpreadsheet","book_append_sheet","bookType","write","toJson","prepareMinimal","chunk1","chunk2","tmp","wageChunksMatchPositionAndSession","prepareFull","minInstructor","context","minApplicant","minPosition","instructorList","minAssignment","diffImport","instructorsListFromField","list","people","nameHash","person","matchByUtoridOrName","minimal","_prop","oldVal","isSame","importedInstructors","oldInstructors","newInstructors","importedPositions","importedAssignments","existingAssignments","assignmentHash","hashAssignment","importedApplicants","matchingApplicant","applicant_utorid","isMinimalAssignment","obj1","obj2","keys1","every","getChanged","diffed","ConnectedExportInstructorsAction","useDispatch","exportType","setExportType","prepareData","FileSaver","saveAs","doExport","instructorSchema","First","Surname","Last","primaryKey","ConnectedImportInstructorAction","useSelector","fileContent","setFileContent","setDiffed","processingError","setProcessingError","changedInstructors","newDiff","newItems","modifiedDiffSpec","ContentArea","AdminInstructorsView","addDialogVisible","setAddDialogVisible","setInDeleteMode","Badge","PositionsDiffList","modifiedPositions","PositionsList","AssignmentsDiffList","modifiedAssignments","AssignmentsList","SelectTable","selectTableHOC","ReactTable","COLUMNS","width","backgroundColor","toUpperCase","OfferTable","selected","setSelected","_selected","_setSelected","filterString","setFilterString","lastSelected","setLastSelected","allSelected","setAllSelected","filteredData","toLowerCase","rowToStr","reactTableRef","getDisplayedData","getWrappedInstance","getResolvedState","sortedData","_original","displayedData","tableComponent","toggleSelection","onToggleRow","shiftOn","rowIds","lastSelectedIndex","selectedIndex","start","end","v","newSelectedState","newSelected","selectAll","toggleAll","isSelected","selectType","keyField","ApplicantCell","AssignmentCell","applicationId","ConnectedOfferTable","selectedAssignmentIds","generateApplicantCell","word","charAt","capitalize","DEFAULT_POSITION","PositionEditor","positionProp","setPosition","defaultContractTemplate","ignoreDiacritics","multiple","placeholder","labelKey","selectedContractTypes","DEFAULT_ASSIGNMENT","AssignmentEditor","assignmentProp","setAssignment","DEFAULT_CONTRACT_TEMPLATE","ContractTemplateEditor","contractTemplateProp","setContractTemplate","availableTemplates","templates","templateFile","ConnectedApplicantList","ConnectedContractTemplatesList","ConnectedPositionsList","ConnectedAssignmentsList","ConnectedEmailButton","DropdownButton","emailHandler","emailContract","nagOffers","ConnectedPositionEditor","ConnectedAssignmentEditor","DashboardWidget","margin","color","fontFamily","border","padding","Dashboard","ConnectedFilteredList","ownProps","listRenderer","filterFunc","Renderer","setQuery","ControlPanel","BLANK_SESSION","ConnectedAddSessionDialog","setNewSession","ConnectedSessionList","AdminSessionsView","BLANK_POSITION","ConnectedAddPositionDialog","setNewPosition","defaultTemplate","ConnectedExportPositionsAction","positionSchema","Start","End","ConnectedImportPositionsAction","changedPositions","AdminPositionsView","BLANK_ASSIGNMENT","ConnectedAddAssignmentDialog","newAssignment","setNewAssignment","ConnectedAssignmentDetails","wageChunksByAssignment","changeHoursFactory","newWageChunks","j","position_name","ConnectedViewAssignmentDetailsButton","selectedAssignments","visibleAssignments","setVisibleAssignments","ConnectedOfferActionButtons","ConnectedExportAssignmentsAction","assignmentsForSpreadsheet","assignmentSchema","Hours","ConnectedImportAssignmentsAction","AdminAssignmentsView","BLANK_CONTRACT_TEMPLATE","ConnectedAddContractTemplateDialog","newContractTemplate","setNewContractTemplate","matchingTemplate","TemplatePreviewDialog","isLoading","setIsLoading","cachedPreview","setCachedPreview","ModalHeader","boder","flexGrow","srcDoc","ConnectedContractTemplateList","previewVisible","setPreviewVisible","previewingTemplate","setPreviewingTemplate","rowData","previewClicked","AdminContractTemplatesView","BootstrapNavItem","routes","infoComponents","mainRoute","useRouteMatch","activeMainRoutes","availableSubroutes","substring","subroutes","subroute","fullroute","Navbar","activeKey","defaultActiveKey","FilterableMenuContents","forwardRef","clearFilter","setFilter","sessionList","toArray","emptyListMessage","FormControl","autoFocus","tabIndex","FilterableMenu","activeItemId","AdminHeader","ConnectedActiveSessionDisplay","ConnectedActiveUserDisplay","mapSessionsDispatchToProps","mapActiveUserDispatchToProps","isActiveRole","ConnectedLandingView","activeSessionInfo","ConnectedApplicantsList","_upsertApplicant","BLANK_APPLICANT","ConnectedAddApplicantDialog","setNewApplicant","getConflicts","ConnectedExportApplicantsAction","applicantSchema","changedApplicants","AdminApplicantsView","AdminRoutes","exact","App","Component","ConnectedApp","globalReducer","offerTableReducer","ongoingInteraction","ongoingInteractionsList","notificationReducer","form","formReducer","persistConfig","whitelist","persistedReducer","persistReducer","rootReducer","store","createStore","composeWithDevTools","applyMiddleware","thunk","persistor","persistStore","configureStore","DevFrame","expand","Brand","href","Collapse","docExpansion","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4eaa0e29.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\n\n/**\n * Generate proptypes for API responses using the passed-in proptypes function.\n * This is encapsulated so that `PropTypes` can be replaced (for example, with a proxy\n * used for documentation generation).\n *\n * @param {*} PropTypes - a PropTypes function (coming from the `\"prop-types\"` module or elsewhere)\n * @returns an object of PropTypes\n */\nfunction generatePropTypes(PropTypes) {\n    const id = PropTypes.oneOfType([PropTypes.number, PropTypes.string]);\n\n    return {\n        apiResponse: PropTypes.shape({\n            status: PropTypes.oneOf([\"success\", \"error\"]).isRequired,\n            message: PropTypes.string,\n            payload: PropTypes.any,\n        }),\n        apiResponseSuccess: PropTypes.shape({\n            status: PropTypes.oneOf([\"success\"]).isRequired,\n            message: PropTypes.string,\n            payload: PropTypes.any,\n        }),\n        apiResponseError: PropTypes.shape({\n            status: PropTypes.oneOf([\"error\"]).isRequired,\n            message: PropTypes.string.isRequired,\n            payload: PropTypes.any,\n        }),\n        idOnly: PropTypes.shape({\n            id,\n        }),\n        session: PropTypes.shape({\n            id,\n            start_date: PropTypes.string,\n            end_date: PropTypes.string,\n            name: PropTypes.string.isRequired,\n        }),\n        contractTemplateMinimal: PropTypes.shape({\n            template_file: PropTypes.string,\n        }),\n        contractTemplate: PropTypes.shape({\n            template_file: PropTypes.string,\n            template_name: PropTypes.string,\n        }),\n        position: PropTypes.shape({\n            position_code: PropTypes.string.isRequired,\n            position_title: PropTypes.string,\n            hours_per_assignment: PropTypes.number,\n            start_date: PropTypes.string,\n            end_date: PropTypes.string,\n            contract_template_id: id,\n            duties: PropTypes.string,\n            qualifications: PropTypes.string,\n            ad_hours_per_assignment: PropTypes.number,\n            ad_num_assignments: PropTypes.number,\n            ad_open_date: PropTypes.string,\n            ad_close_date: PropTypes.string,\n            desired_num_assignments: PropTypes.number,\n            current_enrollment: PropTypes.number,\n            current_waitlisted: PropTypes.number,\n            instructor_ids: PropTypes.arrayOf(id),\n            instructor_preference: PropTypes.arrayOf(\n                PropTypes.shape({\n                    preference_level: PropTypes.number,\n                    applicant_id: id,\n                    instructor_id: id,\n                })\n            ),\n        }),\n        instructor: PropTypes.shape({\n            first_name: PropTypes.string.isRequired,\n            last_name: PropTypes.string.isRequired,\n            email: PropTypes.string,\n            utorid: PropTypes.string.isRequired,\n        }),\n        assignment: PropTypes.shape({\n            start_date: PropTypes.string,\n            end_date: PropTypes.string,\n            note: PropTypes.string,\n            contract_override_pdf: PropTypes.string,\n            applicant_id: id.isRequired,\n            position_id: id.isRequired,\n            active_offer_status: PropTypes.oneOf([\n                \"accepted\",\n                \"rejected\",\n                \"withdrawn\",\n                \"provisional\",\n                \"pending\",\n                \"no_offer\",\n                null,\n            ]),\n        }),\n        applicant: PropTypes.shape({\n            utorid: PropTypes.string.isRequired,\n            student_number: PropTypes.string,\n            first_name: PropTypes.string.isRequired,\n            last_name: PropTypes.string.isRequired,\n            email: PropTypes.string,\n            phone: PropTypes.string,\n        }),\n        wageChunk: PropTypes.shape({\n            start_date: PropTypes.string,\n            end_date: PropTypes.string,\n            hours: PropTypes.number,\n            rate: PropTypes.number,\n        }),\n        reportingTag: PropTypes.shape({\n            name: PropTypes.string,\n        }),\n        offer: PropTypes.shape({\n            first_name: PropTypes.string,\n            last_name: PropTypes.string,\n            email: PropTypes.string,\n            position_code: PropTypes.string,\n            position_title: PropTypes.string,\n            position_start_date: PropTypes.string,\n            position_end_date: PropTypes.string,\n            first_time_ta: PropTypes.bool,\n            instructor_contact_desc: PropTypes.string,\n            pay_period_desc: PropTypes.string,\n            installments: PropTypes.number,\n            ta_coordinator_name: PropTypes.string,\n            ta_coordinator_email: PropTypes.string,\n            emailed_date: PropTypes.string,\n            status: PropTypes.string,\n            accepted_date: PropTypes.string,\n            rejected_date: PropTypes.string,\n            withdrawn_date: PropTypes.string,\n        }),\n        application: PropTypes.shape({\n            session_id: id,\n            comments: PropTypes.string,\n            program: PropTypes.string,\n            department: PropTypes.string,\n            previous_uoft_experience: PropTypes.string,\n            yip: PropTypes.number,\n            annotation: PropTypes.string,\n            applicant_id: id,\n            position_preference: PropTypes.arrayOf(\n                PropTypes.shape({\n                    preference_level: PropTypes.number,\n                    position_id: id,\n                })\n            ),\n        }),\n        user: PropTypes.shape({\n            utorid: PropTypes.string,\n            roles: PropTypes.arrayOf(PropTypes.string),\n        }),\n    };\n}\n\nconst apiPropTypes = generatePropTypes(PropTypes);\n\nexport { apiPropTypes, generatePropTypes };\n","/*\n * A collection of utility functions for interfacing with urls\n */\n\n/**\n * Try to parse `s` as a native javascript type. E.g., \"45.6\" will\n * be parsed as a number, \"true\" will be parsed as `true`, \"[]\"\n * will be parsed as an empty array.\n *\n * @param {string} s\n * @returns\n */\nfunction stringToNativeType(s) {\n    try {\n        return JSON.parse(s);\n    } catch (e) {\n        return s;\n    }\n}\n\nfunction parseURLSearchString(s) {\n    const searchParams = new URLSearchParams(s);\n    const ret = {};\n    for (const [key, val] of searchParams.entries()) {\n        ret[key] = stringToNativeType(val);\n    }\n    return ret;\n}\n\nexport { stringToNativeType, parseURLSearchString };\n","const contract_templates_by_filename = {\n    \"/math/default.html\": `<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\"utf-8\" />\n        <title>Offer Letter</title>\n        <style>\n            * {\n                box-sizing: border-box;\n            }\n            html {\n                margin: 0;\n                padding: 0;\n            }\n            body {\n                width: 8.5in;\n                margin: 0;\n                padding-left: 0.75in;\n                padding-right: 0.75in;\n                hyphens: auto;\n                text-align: justify;\n                box-sizing: border-box;\n                font-family: Helvetica, sans-serif;\n                font-size: 12pt;\n            }\n            .i {\n                font-style: italic;\n            }\n            .emphcolor {\n                color: red;\n            }\n            table.appointment-summary {\n                margin-left: 1in;\n                font-size: 0.9em;\n            }\n            .appointment-summary th {\n                padding-right: 0.5em;\n                text-align: right;\n                font-weight: normal;\n            }\n            .letter-head p {\n                margin-bottom: 0.5in;\n            }\n            .letter-foot {\n                margin-top: 1in;\n            }\n            .signature {\n                font-family: alex_brushregular, cursive;\n                font-size: 30pt;\n                margin-left: 0.5in;\n                margin-bottom: 0.1in;\n            }\n            .applicant .signature {\n                border-bottom: 1px solid black;\n                min-width: 2.5in;\n                display: inline-block;\n                margin-left: 0;\n            }\n            .checkbox {\n                font-size: 18pt;\n            }\n\n            @media only screen and (max-width: 9in) {\n                /* when printed, these styles won't show\n\t\t\t\tbecause the \"screen\" is 8.5in */\n                body {\n                    width: unset;\n                    padding-bottom: 0.5in;\n                    padding-left: 2em;\n                    padding-right: 2em;\n                }\n            }\n        </style>\n        <link rel=\"stylesheet\" href=\"font.css\" />\n        <link rel=\"stylesheet\" href=\"header.css\" />\n        <!-- for rendering with wkhtmltopdf styles need to be inlined; when rendered directly in a browser,\n\tthis will just be invalid CSS -->\n        <style>\n            {{ style_font }}\n        </style>\n        <style>\n            {{ style_header }}\n        </style>\n    </head>\n    <body>\n        <div class=\"letter-head\">\n            <div class=\"uoftlogo\"></div>\n            <p>{{ date }}</p>\n            <p>\n                {{ first_name }} {{ last_name }}<br />\n                c/o Some Department<br />\n                University of Toronto\n            </p>\n            <p>Dear {{ first_name }},</p>\n        </div>\n        <div class=\"letter-body\">\n            <p>\n                I am pleased to offer you an appointment as a Teaching Assistant\n                in Some Department. The starting date of your appointment will\n                be {{ start_date | date: \"%b %d, %Y\" }} and this appointment\n                will end on {{ end_date | date: \"%b %d, %Y\" }} with no further\n                notice to you.\n            </p>\n            <h3 class=\"i\">Appointment Summary</h3>\n            <table class=\"appointment-summary\">\n                <tr>\n                    <th>Appointment:</th>\n                    <td class=\"emphcolor\">\n                        {{ position_code }} {{ position_title }}\n                    </td>\n                </tr>\n                <tr>\n                    <th>Hours:</th>\n                    <td class=\"emphcolor\">{{ hours }}</td>\n                </tr>\n                <tr>\n                    <th>Start Date:</th>\n                    <td>{{ start_date | date: \"%b %d, %Y\" }}</td>\n                </tr>\n                <tr>\n                    <th>End Date:</th>\n                    <td>{{ end_date | date: \"%b %d, %Y\" }}</td>\n                </tr>\n                <tr>\n                    <th>Rate:</th>\n                    <td>{{ pay_period_desc }}</td>\n                </tr>\n            </table>\n\n            <p>\n                Your appointment will be for {{ hours }} hours for {{\n                position_code }}. Your Course Coordinator(s) {{\n                instructor_contact_desc }} will be in contact with you. You will\n                be paid {{ pay_period_desc }} for this position. You will be\n                paid in {{ installments }} instalments, once per month for the\n                period of your appointment. Your salary will be paid by direct\n                deposit.\n            </p>\n            Your payroll documentation will be available online through the\n            University’s Employee Self-Service (ESS) at\n            <a href=\"http://ess.hrandequity.utoronto.ca/\"\n                >ess.hrandequity.utoronto.ca/</a\n            >. This includes electronic delivery of your pay statement, tax\n            documentation, and other payroll documentation as made available\n            from time to time. You are able to print copies of these documents\n            directly from ESS.\n            <p>\n                By signing this Employment Agreement, you authorize the\n                University to provide your T4 slips electronically and not in a\n                paper format. If you wish to discuss an alternative format,\n                please contact Central Payroll Services at\n                payroll.hr@utoronto.ca.\n            </p>\n            <p>\n                This appointment is being granted on the basis that you are a\n                student or Post-Doctoral Fellow (PDF) at the University of\n                Toronto on the starting date of the appointment. If you are not\n                a student or PDF on the starting date of this appointment, this\n                offer is revoked and the University will have no obligations\n                under this letter.\n            </p>\n            <p>\n                As a Teaching Assistant, you will be a member of the Canadian\n                Union of Public Employees (CUPE) Local 3902, Unit 1 bargaining\n                unit. Your employment will be governed by the terms and\n                conditions of the collective agreement between the University of\n                Toronto and CUPE Local 3902, which may be found on the web at\n                <br />\n                <a\n                    href=\"http://agreements.hrandequity.utoronto.ca/#CUPE3902_Unit1\"\n                    >agreements.hrandequity.utoronto.ca/#CUPE3902_Unit1</a\n                >\n                <br />\n                Once you accept the offer of employment, a copy of the agreement\n                will be given to you if you do not already have one. A statement\n                about the Union, along with other information about the Union,\n                can be found on the Union's website (<a\n                    href=\"http://www.cupe3902.org/unit-1/\"\n                    >http://www.cupe3902.org/unit-1/</a\n                >). All of this information is that of the Union, represents the\n                views of the Union, and has not been approved or endorsed by the\n                University.\n            </p>\n            <h3>Required Training</h3>\n            <p>\n                You are required to take the following training:\n            </p>\n            <ul>\n                <li>\n                    U of T AODA Online Training, provided by the Accessibility\n                    for Ontarians with Disabilities Act (AODA) Office, available\n                    at\n                    <a href=\"http://aoda.hrandequity.utoronto.ca/\"\n                        >aoda.hrandequity.utoronto.ca/</a\n                    >\n                </li>\n            </ul>\n            <p>\n                If you are new to the University, or have not previously\n                completed the training, you will be notified by email when the\n                training module becomes available for your completion, normally\n                one month after the start date of this appointment. Completion\n                of this training will be automatically captured in the system\n                and you will be paid for this training in accordance with the\n                rates set out in your collective agreement. Please note that you\n                only need to complete the above training program once with the\n                University.\n            </p>\n            <h3>Policies & Procedures</h3>\n            <p>\n                You will also be subject to and bound by University policies of\n                general application and their related guidelines. The policies\n                are listed on the Governing Council website at\n                <a\n                    href=\"http://www.governingcouncil.utoronto.ca/Governing_Council/Policies.htm\"\n                    >www.governingcouncil.utoronto.ca/Governing_Council/Policies.htm</a\n                >\n                For convenience, a partial list of policies, those applicable to\n                all employees, and related guidelines can be found on the Human\n                Resources and Equity website at policies.hrandequity.utoronto.ca\n                Printed versions will be provided, upon request, through Human\n                Resources or your supervisor.\n            </p>\n            <p>\n                You should pay particular attention to those policies which\n                confirm the University’s commitment to, and your obligation to\n                support, a workplace that is free from discrimination and\n                harassment as set out in the Human Rights Code, is safe as set\n                out in the Occupational Health and Safety Act, and that respects\n                the University's commitment to equity and to workplace civility.\n            </p>\n            <p>\n                All of the applicable policies may be amended and/or new\n                policies may be introduced from time to time. When this happens,\n                if notice is required you will be given notice as the University\n                deems necessary and the amendments will become binding terms of\n                your employment contract with the University.\n            </p>\n            <h3>Accessibility</h3>\n            <p>\n                The University has a number of programs and services available\n                to employees who have need of accommodation due to disability\n                through its Health & Well-being Programs and Services (<a\n                    href=\"http://www.hrandequity.utoronto.ca/about-hr-equity/health.htm\"\n                    >www.hrandequity.utoronto.ca/about-hr-equity/health.htm</a\n                >). A description of the accommodation process is available in\n                the Accommodation for Employees with Disabilities: U of T\n                Guidelines, which may be found at:\n                <br />\n                <a\n                    href=\"http://well-being.hrandequity.utoronto.ca/services/#accommodation\"\n                    >well-being.hrandequity.utoronto.ca/services/#accommodation</a\n                >\n                <br />\n                In the event that you have a disability that would impact upon\n                how you would respond to an emergency in the workplace (e.g.,\n                situations requiring evacuation), you should contact Health &\n                Well-being Programs & Services at 416.978.2149 as soon as\n                possible so that you can be provided with information regarding\n                an individualized emergency response plan.\n            </p>\n            <p>\n                The law requires the Employment Standards Act Poster to be\n                provided to all employees; it is available on the HR & Equity\n                website at\n                <a\n                    href=\"http://www.hrandequity.utoronto.ca/news/employment-standards-ontario\"\n                    >www.hrandequity.utoronto.ca/news/employment-standards-ontario</a\n                >\n                This poster describes the minimum rights and obligations\n                contained in the Employment Standards Act. Please note that in\n                many respects this offer of employment exceeds the minimum\n                requirements set out in the Act.\n            </p>\n            <p>\n                Your duties may include all or any combination of the following:\n                grading, scheduled tutorials, office hours, Math Aid Centre\n                hours, and test and exam invigilation. You will be expected to\n                complete all grading for all student work that is completed\n                during the term of the appointment, up to and including final\n                exams.\n            </p>\n            <p>\n                Within 15 working days after the date of this letter, you will\n                be given the opportunity to review the Description of Duties and\n                Allocation of Hours (DDAH) form, which will set out more\n                specifically the duties of your position, and the hours assigned\n                to each.\n            </p>\n            <p>\n                Please sign below to indicate your acceptance of this offer, and\n                return a copy of this letter to me as soon as possible but no\n                later than 2 days after you have been provided with the DDAH\n                form. If we have not heard from you by this deadline, this offer\n                may be withdrawn. If you are unable to accept this offer, please\n                advise me immediately.\n            </p>\n            <p>\n                If you have any questions, please contact me via email at\n                <a href=\"mailto:tacoord@toronto.edu\">tacoord@toronto.edu</a>\n            </p>\n        </div>\n        <div class=\"letter-foot tacoordinator\">\n            <p>Yours sincerely,</p>\n            <div class=\"signature\">Tom Tomson</div>\n            <div class=\"details\">\n                Tom Tomson<br />TA Coordinator<br />Some Department\n            </div>\n        </div>\n        <div>\n            <p>\n                <span class=\"checkbox\"\n                    >{% if signature == blank %}☐{% else %}☑{% endif %}</span\n                >\n                I confirm that I will be registered as a University of Toronto\n                student or PDF on the date that this appointment begins. I\n                understand that if I should cease to be registered as a\n                University of Toronto student or PDF during the period of this\n                appointment, for any reason other than convocation, I must\n                immediately notify my supervisor, and my appointment may be\n                terminated.\n            </p>\n        </div>\n        <div class=\"letter-foot applicant\">\n            <p>Please sign below to accept this offer.</p>\n            <div class=\"signature\">{{ signature }}</div>\n            <div class=\"details\">\n                Applicant Signature\n            </div>\n        </div>\n    </body>\n</html>`,\n    \"/math/oto.html\": `<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\"utf-8\" />\n        <title>Offer Letter</title>\n        <style>\n            * {\n                box-sizing: border-box;\n            }\n            html {\n                margin: 0;\n                padding: 0;\n            }\n            body {\n                width: 8.5in;\n                margin: 0;\n                padding-left: 0.75in;\n                padding-right: 0.75in;\n                hyphens: auto;\n                text-align: justify;\n                box-sizing: border-box;\n                font-family: Helvetica, sans-serif;\n                font-size: 12pt;\n            }\n            .i {\n                font-style: italic;\n            }\n            .emphcolor {\n                color: red;\n            }\n            table.appointment-summary {\n                margin-left: 1in;\n                font-size: 0.9em;\n            }\n            .appointment-summary th {\n                padding-right: 0.5em;\n                text-align: right;\n                font-weight: normal;\n            }\n            .letter-head p {\n                margin-bottom: 0.5in;\n            }\n            .letter-foot {\n                margin-top: 1in;\n            }\n            .signature {\n                font-family: alex_brushregular, cursive;\n                font-size: 30pt;\n                margin-left: 0.5in;\n                margin-bottom: 0.1in;\n            }\n            .applicant .signature {\n                border-bottom: 1px solid black;\n                min-width: 2.5in;\n                display: inline-block;\n                margin-left: 0;\n            }\n            .checkbox {\n                font-size: 18pt;\n            }\n\n            @media only screen and (max-width: 9in) {\n                /* when printed, these styles won't show\n\t\t\t\tbecause the \"screen\" is 8.5in */\n                body {\n                    width: unset;\n                    padding-bottom: 0.5in;\n                    padding-left: 2em;\n                    padding-right: 2em;\n                }\n            }\n        </style>\n        <link rel=\"stylesheet\" href=\"font.css\" />\n        <link rel=\"stylesheet\" href=\"header.css\" />\n        <!-- for rendering with wkhtmltopdf styles need to be inlined; when rendered directly in a browser,\n\tthis will just be invalid CSS -->\n        <style>\n            {{ style_font }}\n        </style>\n        <style>\n            {{ style_header }}\n        </style>\n    </head>\n    <body>\n        <div class=\"letter-head\">\n            <div class=\"uoftlogo\"></div>\n            <p>{{ date }}</p>\n            <p>\n                {{ first_name }} {{ last_name }}<br />\n                c/o Some Department<br />\n                University of Toronto\n            </p>\n            <p>Dear {{ first_name }},</p>\n        </div>\n        <div class=\"letter-body\">\n            <p>\n                I am pleased to offer you an appointment as a Teaching Assistant\n                in Some Department. The starting date of your appointment will\n                be {{ start_date | date: \"%b %d, %Y\" }} and this appointment\n                will end on {{ end_date | date: \"%b %d, %Y\" }} with no further\n                notice to you.\n            </p>\n            <h3 class=\"i\">Appointment Summary</h3>\n            <table class=\"appointment-summary\">\n                <tr>\n                    <th>Appointment:</th>\n                    <td class=\"emphcolor\">\n                        {{ position_code }} {{ position_title }}\n                    </td>\n                </tr>\n                <tr>\n                    <th>Hours:</th>\n                    <td class=\"emphcolor\">{{ hours }}</td>\n                </tr>\n                <tr>\n                    <th>Start Date:</th>\n                    <td>{{ start_date | date: \"%b %d, %Y\" }}</td>\n                </tr>\n                <tr>\n                    <th>End Date:</th>\n                    <td>{{ end_date | date: \"%b %d, %Y\" }}</td>\n                </tr>\n                <tr>\n                    <th>Rate:</th>\n                    <td>{{ pay_period_desc }}</td>\n                </tr>\n            </table>\n\n            <p>\n                Your appointment will be for {{ hours }} hours for {{\n                position_code }}. This is a ONE TIME ONLY appointment. Your Course Coordinator(s) {{\n                instructor_contact_desc }} will be in contact with you. You will\n                be paid {{ pay_period_desc }} for this position. You will be\n                paid in one instalment. Your salary will be paid by direct\n                deposit.\n            </p>\n            Your payroll documentation will be available online through the\n            University’s Employee Self-Service (ESS) at\n            <a href=\"http://ess.hrandequity.utoronto.ca/\"\n                >ess.hrandequity.utoronto.ca/</a\n            >. This includes electronic delivery of your pay statement, tax\n            documentation, and other payroll documentation as made available\n            from time to time. You are able to print copies of these documents\n            directly from ESS.\n            <p>\n                By signing this Employment Agreement, you authorize the\n                University to provide your T4 slips electronically and not in a\n                paper format. If you wish to discuss an alternative format,\n                please contact Central Payroll Services at\n                payroll.hr@utoronto.ca.\n            </p>\n            <p>\n                This appointment is being granted on the basis that you are a\n                student or Post-Doctoral Fellow (PDF) at the University of\n                Toronto on the starting date of the appointment. If you are not\n                a student or PDF on the starting date of this appointment, this\n                offer is revoked and the University will have no obligations\n                under this letter.\n            </p>\n            <p>\n                As a Teaching Assistant, you will be a member of the Canadian\n                Union of Public Employees (CUPE) Local 3902, Unit 1 bargaining\n                unit. Your employment will be governed by the terms and\n                conditions of the collective agreement between the University of\n                Toronto and CUPE Local 3902, which may be found on the web at\n                <br />\n                <a\n                    href=\"http://agreements.hrandequity.utoronto.ca/#CUPE3902_Unit1\"\n                    >agreements.hrandequity.utoronto.ca/#CUPE3902_Unit1</a\n                >\n                <br />\n                Once you accept the offer of employment, a copy of the agreement\n                will be given to you if you do not already have one. A statement\n                about the Union, along with other information about the Union,\n                can be found on the Union's website (<a\n                    href=\"http://www.cupe3902.org/unit-1/\"\n                    >http://www.cupe3902.org/unit-1/</a\n                >). All of this information is that of the Union, represents the\n                views of the Union, and has not been approved or endorsed by the\n                University.\n            </p>\n            <h3>Required Training</h3>\n            <p>\n                You are required to take the following training:\n            </p>\n            <ul>\n                <li>\n                    U of T AODA Online Training, provided by the Accessibility\n                    for Ontarians with Disabilities Act (AODA) Office, available\n                    at\n                    <a href=\"http://aoda.hrandequity.utoronto.ca/\"\n                        >aoda.hrandequity.utoronto.ca/</a\n                    >\n                </li>\n            </ul>\n            <p>\n                If you are new to the University, or have not previously\n                completed the training, you will be notified by email when the\n                training module becomes available for your completion, normally\n                one month after the start date of this appointment. Completion\n                of this training will be automatically captured in the system\n                and you will be paid for this training in accordance with the\n                rates set out in your collective agreement. Please note that you\n                only need to complete the above training program once with the\n                University.\n            </p>\n            <h3>Policies & Procedures</h3>\n            <p>\n                You will also be subject to and bound by University policies of\n                general application and their related guidelines. The policies\n                are listed on the Governing Council website at\n                <a\n                    href=\"http://www.governingcouncil.utoronto.ca/Governing_Council/Policies.htm\"\n                    >www.governingcouncil.utoronto.ca/Governing_Council/Policies.htm</a\n                >\n                For convenience, a partial list of policies, those applicable to\n                all employees, and related guidelines can be found on the Human\n                Resources and Equity website at policies.hrandequity.utoronto.ca\n                Printed versions will be provided, upon request, through Human\n                Resources or your supervisor.\n            </p>\n            <p>\n                You should pay particular attention to those policies which\n                confirm the University’s commitment to, and your obligation to\n                support, a workplace that is free from discrimination and\n                harassment as set out in the Human Rights Code, is safe as set\n                out in the Occupational Health and Safety Act, and that respects\n                the University's commitment to equity and to workplace civility.\n            </p>\n            <p>\n                All of the applicable policies may be amended and/or new\n                policies may be introduced from time to time. When this happens,\n                if notice is required you will be given notice as the University\n                deems necessary and the amendments will become binding terms of\n                your employment contract with the University.\n            </p>\n            <h3>Accessibility</h3>\n            <p>\n                The University has a number of programs and services available\n                to employees who have need of accommodation due to disability\n                through its Health & Well-being Programs and Services (<a\n                    href=\"http://www.hrandequity.utoronto.ca/about-hr-equity/health.htm\"\n                    >www.hrandequity.utoronto.ca/about-hr-equity/health.htm</a\n                >). A description of the accommodation process is available in\n                the Accommodation for Employees with Disabilities: U of T\n                Guidelines, which may be found at:\n                <br />\n                <a\n                    href=\"http://well-being.hrandequity.utoronto.ca/services/#accommodation\"\n                    >well-being.hrandequity.utoronto.ca/services/#accommodation</a\n                >\n                <br />\n                In the event that you have a disability that would impact upon\n                how you would respond to an emergency in the workplace (e.g.,\n                situations requiring evacuation), you should contact Health &\n                Well-being Programs & Services at 416.978.2149 as soon as\n                possible so that you can be provided with information regarding\n                an individualized emergency response plan.\n            </p>\n            <p>\n                The law requires the Employment Standards Act Poster to be\n                provided to all employees; it is available on the HR & Equity\n                website at\n                <a\n                    href=\"http://www.hrandequity.utoronto.ca/news/employment-standards-ontario\"\n                    >www.hrandequity.utoronto.ca/news/employment-standards-ontario</a\n                >\n                This poster describes the minimum rights and obligations\n                contained in the Employment Standards Act. Please note that in\n                many respects this offer of employment exceeds the minimum\n                requirements set out in the Act.\n            </p>\n            <p>\n                Your duties may include all or any combination of the following:\n                grading, scheduled tutorials, office hours, Math Aid Centre\n                hours, and test and exam invigilation. You will be expected to\n                complete all grading for all student work that is completed\n                during the term of the appointment, up to and including final\n                exams.\n            </p>\n            <p>\n                Within 15 working days after the date of this letter, you will\n                be given the opportunity to review the Description of Duties and\n                Allocation of Hours (DDAH) form, which will set out more\n                specifically the duties of your position, and the hours assigned\n                to each.\n            </p>\n            <p>\n                Please sign below to indicate your acceptance of this offer, and\n                return a copy of this letter to me as soon as possible but no\n                later than 2 days after you have been provided with the DDAH\n                form. If we have not heard from you by this deadline, this offer\n                may be withdrawn. If you are unable to accept this offer, please\n                advise me immediately.\n            </p>\n            <p>\n                If you have any questions, please contact me via email at\n                <a href=\"mailto:tacoord@toronto.edu\">tacoord@toronto.edu</a>\n            </p>\n        </div>\n        <div class=\"letter-foot tacoordinator\">\n            <p>Yours sincerely,</p>\n            <div class=\"signature\">Tom Tomson</div>\n            <div class=\"details\">\n                Tom Tomson<br />TA Coordinator<br />Some Department\n            </div>\n        </div>\n        <div>\n            <p>\n                <span class=\"checkbox\"\n                    >{% if signature == blank %}☐{% else %}☑{% endif %}</span\n                >\n                I confirm that I will be registered as a University of Toronto\n                student or PDF on the date that this appointment begins. I\n                understand that if I should cease to be registered as a\n                University of Toronto student or PDF during the period of this\n                appointment, for any reason other than convocation, I must\n                immediately notify my supervisor, and my appointment may be\n                terminated.\n            </p>\n        </div>\n        <div class=\"letter-foot applicant\">\n            <p>Please sign below to accept this offer.</p>\n            <div class=\"signature\">{{ signature }}</div>\n            <div class=\"details\">\n                Applicant Signature\n            </div>\n        </div>\n    </body>\n</html>`,\n};\n// It's not important to store separate HTML templates for each of these\n// so just duplicate an existing template.\ncontract_templates_by_filename[\"/math/default2018.html\"] =\n    contract_templates_by_filename[\"/math/default.html\"];\ncontract_templates_by_filename[\"/math/invigilate.html\"] =\n    contract_templates_by_filename[\"/math/default.html\"];\ncontract_templates_by_filename[\"/math/invigilate2014.html\"] =\n    contract_templates_by_filename[\"/math/default.html\"];\n\nexport const mockData = {\n    sessions: [\n        {\n            id: 1,\n            start_date: \"2019-09-08T00:00:00.000Z\",\n            end_date: \"2019-12-31T00:00:00.000Z\",\n            name: \"2019 Fall\",\n            rate1: 45.55,\n            rate2: 47.33,\n        },\n        {\n            id: 2,\n            start_date: \"2020-01-01T00:00:00.000Z\",\n            end_date: \"2020-04-30T00:00:00.000Z\",\n            name: \"2021 Spring\",\n            rate1: 45.55,\n            rate2: null,\n        },\n    ],\n    available_contract_templates: [\n        {\n            template_file: \"/math/default.html\",\n        },\n        {\n            template_file: \"/math/default2018.html\",\n        },\n        {\n            template_file: \"/math/invigilate.html\",\n        },\n        {\n            template_file: \"/math/invigilate2014.html\",\n        },\n        {\n            template_file: \"/math/oto.html\",\n        },\n    ],\n    contract_templates: [\n        {\n            id: 1,\n            template_name: \"standard\",\n            template_file: \"/math/default.html\",\n        },\n        {\n            id: 2,\n            template_name: \"oto\",\n            template_file: \"/math/oto.html\",\n        },\n        {\n            id: 3,\n            template_name: \"standard\",\n            template_file: \"/math/default2018.html\",\n        },\n        {\n            id: 4,\n            template_name: \"invigilate\",\n            template_file: \"/math/invigilate.html\",\n        },\n    ],\n    contract_templates_by_session: {\n        \"1\": [1, 2],\n        \"2\": [3, 4],\n    },\n    contract_templates_by_filename: contract_templates_by_filename,\n    instructors: [\n        {\n            id: 1000,\n            last_name: \"Smith\",\n            first_name: \"Henry\",\n            email: \"hery.smith@utoronto.ca\",\n            utorid: \"smithh\",\n        },\n        {\n            id: 1001,\n            last_name: \"Garcia\",\n            first_name: \"Emily\",\n            email: \"emily.garcia@utoronto.ca\",\n            utorid: \"garciae\",\n        },\n        {\n            id: 1002,\n            last_name: \"Miller\",\n            first_name: \"Megan\",\n            email: \"megan.miller@utoronto.ca\",\n            utorid: \"millerm\",\n        },\n        {\n            id: 1003,\n            last_name: \"Beera\",\n            first_name: \"Lizzy\",\n            email: \"lizzy.beera@utoronto.ca\",\n            utorid: \"beeral\",\n        },\n    ],\n    positions_by_session: {\n        \"1\": [10, 11, 14, 15, 16],\n        \"2\": [12, 13],\n    },\n    positions: [\n        {\n            id: 10,\n            position_code: \"MAT135H1F\",\n            position_title: \"Calculus I\",\n            hours_per_assignment: 70,\n            start_date: \"2019-09-08T00:00:00.000Z\",\n            end_date: \"2019-12-31T00:00:00.000Z\",\n            contract_template_id: 1,\n            duties: \"Tutorials\",\n            qualifications: \"Teaching skill\",\n            ad_hours_per_assignment: 70,\n            ad_num_assignments: 15,\n            ad_open_date: \"2019-08-01T00:00:00.000Z\",\n            ad_close_date: \"2019-08-15T00:00:00.000Z\",\n            desired_num_assignments: 15,\n            current_enrollment: 1200,\n            current_waitlisted: 200,\n            instructor_ids: [1000, 1001],\n            instructor_preferences: [\n                {\n                    preference_level: 2,\n                    applicant_id: 2000,\n                    instructor_id: 1000,\n                },\n                {\n                    preference_level: 1,\n                    applicant_id: 2002,\n                    instructor_id: 1000,\n                },\n                {\n                    preference_level: -1,\n                    applicant_id: 2005,\n                    instructor_id: 1001,\n                },\n                {\n                    preference_level: 1,\n                    applicant_id: 2002,\n                    instructor_id: 1001,\n                },\n                {\n                    preference_level: 1,\n                    applicant_id: 2006,\n                    instructor_id: 1001,\n                },\n            ],\n        },\n        {\n            id: 11,\n            position_code: \"MAT136H1F\",\n            position_title: \"Calculus II\",\n            hours_per_assignment: 70,\n            start_date: \"2019-09-08T00:00:00.000Z\",\n            end_date: \"2019-12-31T00:00:00.000Z\",\n            contract_template_id: 2,\n            instructor_ids: [],\n        },\n        {\n            id: 12,\n            position_code: \"CSC135H1F\",\n            position_title: \"Computer Fun\",\n            hours_per_assignment: 70,\n            start_date: \"2019-09-08T00:00:00.000Z\",\n            end_date: \"2019-12-31T00:00:00.000Z\",\n            duties: \"Tutorials\",\n            contract_template_id: 3,\n            instructor_ids: [1000],\n            instructor_preferences: [\n                {\n                    preference_level: -1,\n                    applicant_id: 2005,\n                    instructor_id: 1000,\n                },\n                {\n                    preference_level: 2,\n                    applicant_id: 2001,\n                    instructor_id: 1000,\n                },\n                {\n                    preference_level: 1,\n                    applicant_id: 2006,\n                    instructor_id: 1000,\n                },\n            ],\n        },\n        {\n            id: 13,\n            position_code: \"MAT235H1F\",\n            position_title: \"Calculus III\",\n            hours_per_assignment: 70,\n            start_date: \"2019-09-08T00:00:00.000Z\",\n            end_date: \"2019-12-31T00:00:00.000Z\",\n            contract_template_id: 3,\n            instructor_ids: [1002],\n            instructor_preferences: [\n                {\n                    preference_level: 2,\n                    applicant_id: 2000,\n                    instructor_id: 1002,\n                },\n                {\n                    preference_level: 1,\n                    applicant_id: 2002,\n                    instructor_id: 1002,\n                },\n            ],\n        },\n        {\n            instructor_ids: [1002],\n            position_code: \"CSC100H1S\",\n            position_title: \"Computers for Humans\",\n            hours_per_assignment: 100,\n            duties:\n                \"Some combination of marking, invigilating, tutorials, office hours, and the help centre.\",\n            contract_template_id: 1,\n            start_date: \"2021-01-01T00:00:00.000Z\",\n            end_date: \"2020-04-03T00:00:00.000Z\",\n            id: 14,\n        },\n        {\n            instructor_ids: [1000],\n            position_code: \"MAT137Y1Y\",\n            position_title: \"Calculus!\",\n            hours_per_assignment: 250,\n            duties:\n                \"Some combination of marking, invigilating, tutorials, office hours, and the help centre.\",\n            contract_template_id: 1,\n            start_date: \"2019-09-02T00:00:00.000Z\",\n            end_date: \"2020-04-03T00:00:00.000Z\",\n            qualifications: \"Skilled Proofs Reader\",\n            current_enrollment: 1500,\n            current_waitlisted: 78,\n            desired_num_assignments: 22,\n            id: 15,\n        },\n        {\n            instructor_ids: [1001],\n            position_code: \"MAT135H1F Head TA\",\n            position_title: \"Calculus I\",\n            hours_per_assignment: 225,\n            duties: \"Top-notch Head TA Stuff\",\n            contract_template_id: 1,\n            start_date: \"2019-09-02T00:00:00.000Z\",\n            end_date: \"2019-12-31T00:00:00.000Z\",\n            desired_num_assignments: 3,\n            id: 16,\n        },\n    ],\n    applicants: [\n        {\n            id: 2000,\n            utorid: \"weasleyr\",\n            student_number: \"89013443\",\n            first_name: \"Ron\",\n            last_name: \"Weasley\",\n            email: \"ron@potter.com\",\n            phone: \"543-223-9993\",\n        },\n        {\n            id: 2001,\n            utorid: \"potterh\",\n            student_number: \"999666999\",\n            first_name: \"Harry\",\n            last_name: \"Potter\",\n            email: \"harry@potter.com\",\n        },\n        {\n            id: 2002,\n            utorid: \"smithb\",\n            email: \"smithb@mail.utoronto.ca\",\n            first_name: \"Bethany\",\n            last_name: \"Smith\",\n            student_number: \"131382748\",\n        },\n        {\n            id: 2003,\n            utorid: \"wilsonh\",\n            email: \"wilsonh@mail.utoronto.ca\",\n            first_name: \"Hanna\",\n            last_name: \"Wilson\",\n            student_number: \"600366904\",\n        },\n        {\n            id: 2004,\n            utorid: \"molinat\",\n            email: \"molinat@mail.utoronto.ca\",\n            first_name: \"Troy\",\n            last_name: \"Molina\",\n            student_number: \"328333023\",\n        },\n        {\n            id: 2005,\n            utorid: \"howeyb\",\n            email: \"howeyb@mail.utoronto.ca\",\n            first_name: \"Brett\",\n            last_name: \"Howey\",\n            student_number: \"329613524\",\n        },\n        {\n            id: 2006,\n            utorid: \"brownd\",\n            email: \"brownd@mail.utoronto.ca\",\n            first_name: \"David\",\n            last_name: \"Brown\",\n            student_number: \"29151485\",\n        },\n    ],\n    assignments_by_session: {\n        \"1\": [100, 101, 102, 103, 104, 105, 106, 107, 108, 109],\n        \"2\": [],\n    },\n    assignments: [\n        {\n            id: 100,\n            position_id: 10,\n            applicant_id: 2001,\n            hours: 90,\n        },\n        {\n            id: 101,\n            position_id: 10,\n            applicant_id: 2005,\n            hours: 95,\n        },\n        {\n            note: \"\",\n            position_id: 16,\n            applicant_id: 2000,\n            start_date: \"2019-09-02T00:00:00.000Z\",\n            end_date: \"2019-12-31T00:00:00.000Z\",\n            id: 102,\n        },\n        {\n            note: \"\",\n            position_id: 16,\n            applicant_id: 2002,\n            start_date: \"2019-09-02T00:00:00.000Z\",\n            end_date: \"2019-12-31T00:00:00.000Z\",\n            id: 103,\n        },\n        {\n            note: \"\",\n            position_id: 15,\n            applicant_id: 2001,\n            start_date: \"2019-09-02T00:00:00.000Z\",\n            end_date: \"2020-04-03T00:00:00.000Z\",\n            id: 104,\n        },\n        {\n            note: \"\",\n            position_id: 15,\n            applicant_id: 2002,\n            start_date: \"2019-09-02T00:00:00.000Z\",\n            end_date: \"2020-04-03T00:00:00.000Z\",\n            id: 105,\n        },\n        {\n            note: \"\",\n            position_id: 15,\n            applicant_id: 2005,\n            start_date: \"2019-09-02T00:00:00.000Z\",\n            end_date: \"2020-04-03T00:00:00.000Z\",\n            id: 106,\n        },\n        {\n            note: \"\",\n            position_id: 15,\n            applicant_id: 2000,\n            start_date: \"2019-09-02T00:00:00.000Z\",\n            end_date: \"2020-04-03T00:00:00.000Z\",\n            id: 107,\n        },\n        {\n            note: \"\",\n            position_id: 15,\n            applicant_id: 2006,\n            start_date: \"2019-09-02T00:00:00.000Z\",\n            end_date: \"2020-04-03T00:00:00.000Z\",\n            id: 108,\n        },\n        {\n            note: \"\",\n            position_id: 14,\n            applicant_id: 2002,\n            start_date: \"2021-01-01T00:00:00.000Z\",\n            end_date: \"2020-04-03T00:00:00.000Z\",\n            id: 109,\n        },\n    ],\n    wage_chunks: [\n        {\n            id: 3000,\n            assignment_id: 100,\n            hours: 20,\n            start_date: \"2019-09-08T00:00:00.000Z\",\n            end_date: \"2019-12-31T00:00:00.000Z\",\n            rate: 10.01,\n        },\n        {\n            id: 3001,\n            assignment_id: 100,\n            hours: 35,\n            start_date: \"2020-01-01T00:00:00.000Z\",\n            end_date: \"2020-04-20T00:00:00.000Z\",\n            rate: 12.02,\n        },\n        {\n            id: 3002,\n            assignment_id: 101,\n            hours: 95,\n            start_date: \"2019-09-01T00:00:00.000Z\",\n            end_date: \"2020-04-20T00:00:00.000Z\",\n            rate: null,\n        },\n        {\n            id: 3003,\n            assignment_id: 102,\n            hours: 225,\n            start_date: \"2019-09-02T00:00:00.000Z\",\n            end_date: \"2019-12-31T00:00:00.000Z\",\n        },\n        {\n            id: 3004,\n            assignment_id: 103,\n            hours: 225,\n            start_date: \"2019-09-02T00:00:00.000Z\",\n            end_date: \"2019-12-31T00:00:00.000Z\",\n        },\n        {\n            id: 3005,\n            assignment_id: 104,\n            hours: 125,\n            start_date: \"2019-09-02T00:00:00.000Z\",\n            end_date: \"2019-12-31T05:00:00.000Z\",\n        },\n        {\n            id: 3006,\n            assignment_id: 104,\n            hours: 125,\n            start_date: \"2020-01-01T05:00:00.000Z\",\n            end_date: \"2020-04-03T00:00:00.000Z\",\n        },\n        {\n            id: 3007,\n            assignment_id: 105,\n            hours: 125,\n            start_date: \"2019-09-02T00:00:00.000Z\",\n            end_date: \"2019-12-31T05:00:00.000Z\",\n        },\n        {\n            id: 3008,\n            assignment_id: 105,\n            hours: 125,\n            start_date: \"2020-01-01T05:00:00.000Z\",\n            end_date: \"2020-04-03T00:00:00.000Z\",\n        },\n        {\n            id: 3009,\n            assignment_id: 106,\n            hours: 125,\n            start_date: \"2019-09-02T00:00:00.000Z\",\n            end_date: \"2019-12-31T05:00:00.000Z\",\n        },\n        {\n            id: 3010,\n            assignment_id: 106,\n            hours: 125,\n            start_date: \"2020-01-01T05:00:00.000Z\",\n            end_date: \"2020-04-03T00:00:00.000Z\",\n        },\n        {\n            id: 3011,\n            assignment_id: 107,\n            hours: 100,\n            start_date: \"2019-09-02T00:00:00.000Z\",\n            end_date: \"2019-12-31T05:00:00.000Z\",\n        },\n        {\n            id: 3012,\n            assignment_id: 107,\n            hours: 100,\n            start_date: \"2020-01-01T05:00:00.000Z\",\n            end_date: \"2020-04-03T00:00:00.000Z\",\n        },\n        {\n            id: 3013,\n            assignment_id: 108,\n            hours: 100,\n            start_date: \"2019-09-02T00:00:00.000Z\",\n            end_date: \"2019-12-31T05:00:00.000Z\",\n        },\n        {\n            id: 3014,\n            assignment_id: 108,\n            hours: 100,\n            start_date: \"2020-01-01T05:00:00.000Z\",\n            end_date: \"2020-04-03T00:00:00.000Z\",\n        },\n        {\n            id: 3015,\n            assignment_id: 109,\n            hours: 100,\n            start_date: \"2021-01-01T00:00:00.000Z\",\n            end_date: \"2020-04-03T00:00:00.000Z\",\n        },\n    ],\n    offers: [\n        {\n            id: 10000,\n            assignment_id: 100,\n            status: \"withdrawn\",\n        },\n        {\n            id: 10001,\n            assignment_id: 100,\n            status: \"pending\",\n        },\n        {\n            id: 10002,\n            assignment_id: 101,\n            status: \"accepted\",\n        },\n        {\n            id: 10003,\n            assignment_id: 102,\n            status: \"withdrawn\",\n        },\n    ],\n    applications: [\n        {\n            id: 15000,\n            comments: \"\",\n            program: \"Phd\",\n            department: \"Computer Science\",\n            previous_uoft_ta_experience: \"Last year I TAed a bunch\",\n            yip: 2,\n            annotation: \"\",\n            session_id: 1,\n            applicant_id: 2000,\n            position_preferences: [\n                {\n                    preference_level: 2,\n                    position_id: 10,\n                },\n                {\n                    preference_level: 3,\n                    position_id: 15,\n                },\n            ],\n        },\n        {\n            id: 15001,\n            comments: \"\",\n            program: \"UG\",\n            department: \"Computer Science\",\n            previous_uoft_ta_experience: \"\",\n            yip: 2,\n            annotation: \"\",\n            session_id: 1,\n            applicant_id: 2001,\n            position_preferences: [\n                {\n                    preference_level: 0,\n                    position_id: 12,\n                },\n                {\n                    preference_level: 3,\n                    position_id: 13,\n                },\n            ],\n        },\n        {\n            id: 15002,\n            comments: \"\",\n            program: \"Phd\",\n            department: \"Math\",\n            previous_uoft_ta_experience: \"\",\n            yip: 2,\n            annotation: \"\",\n            session_id: 1,\n            applicant_id: 2002,\n            position_preferences: [\n                {\n                    preference_level: 3,\n                    position_id: 10,\n                },\n                {\n                    preference_level: 3,\n                    position_id: 13,\n                },\n                {\n                    preference_level: 2,\n                    position_id: 12,\n                },\n                {\n                    preference_level: 0,\n                    position_id: 11,\n                },\n            ],\n        },\n        {\n            id: 15003,\n            comments: \"\",\n            program: \"Phd\",\n            department: \"Computer Science\",\n            previous_uoft_ta_experience: \"\",\n            yip: 2,\n            annotation: \"\",\n            session_id: 1,\n            applicant_id: 2005,\n            position_preferences: [\n                {\n                    preference_level: 2,\n                    position_id: 10,\n                },\n                {\n                    preference_level: 3,\n                    position_id: 13,\n                },\n                {\n                    preference_level: 0,\n                    position_id: 12,\n                },\n                {\n                    preference_level: 1,\n                    position_id: 11,\n                },\n            ],\n        },\n        {\n            id: 15004,\n            comments: \"\",\n            program: \"UG\",\n            department: \"Computer Science\",\n            previous_uoft_ta_experience: \"\",\n            yip: 2,\n            annotation: \"\",\n            session_id: 1,\n            applicant_id: 2006,\n            position_preferences: [\n                {\n                    preference_level: 3,\n                    position_id: 10,\n                },\n                {\n                    preference_level: 0,\n                    position_id: 13,\n                },\n                {\n                    preference_level: 2,\n                    position_id: 12,\n                },\n            ],\n        },\n        {\n            id: 15005,\n            comments: \"\",\n            program: \"UG\",\n            department: \"Math\",\n            previous_uoft_ta_experience: \"\",\n            yip: 3,\n            annotation: \"\",\n            session_id: 2,\n            applicant_id: 2002,\n            position_preferences: [\n                {\n                    preference_level: 3,\n                    position_id: 10,\n                },\n                {\n                    preference_level: 3,\n                    position_id: 13,\n                },\n                {\n                    preference_level: 2,\n                    position_id: 12,\n                },\n                {\n                    preference_level: 0,\n                    position_id: 11,\n                },\n            ],\n        },\n        {\n            id: 15006,\n            comments: \"\",\n            program: \"MSc\",\n            department: \"Computer Science\",\n            previous_uoft_ta_experience: \"\",\n            yip: 2,\n            annotation: \"\",\n            session_id: 2,\n            applicant_id: 2003,\n            position_preferences: [\n                {\n                    preference_level: 3,\n                    position_id: 10,\n                },\n                {\n                    preference_level: 3,\n                    position_id: 13,\n                },\n                {\n                    preference_level: 2,\n                    position_id: 12,\n                },\n                {\n                    preference_level: 0,\n                    position_id: 11,\n                },\n            ],\n        },\n        {\n            id: 15007,\n            comments: \"\",\n            program: \"UG\",\n            department: \"Computer Science\",\n            previous_uoft_ta_experience: \"\",\n            yip: 4,\n            annotation: \"\",\n            session_id: 2,\n            applicant_id: 2004,\n            position_preferences: [\n                {\n                    preference_level: 1,\n                    position_id: 10,\n                },\n                {\n                    preference_level: 3,\n                    position_id: 13,\n                },\n            ],\n        },\n    ],\n    users: [\n        {\n            email: \"hery.smith@utoronto.ca\",\n            utorid: \"smithh\",\n            roles: [\"admin\", \"instructor\"],\n        },\n        {\n            email: \"emily.garcia@utoronto.ca\",\n            utorid: \"garciae\",\n            roles: [\"instructor\"],\n        },\n        {\n            email: \"megan.miller@utoronto.ca\",\n            utorid: \"millerm\",\n            roles: [\"instructor\"],\n        },\n        {\n            email: \"lizzy.beera@utoronto.ca\",\n            utorid: \"beeral\",\n            roles: [\"instructor\"],\n        },\n    ],\n    active_user: \"smithh\",\n};\n","/**\n * A collection of utility functions to help with the mock API\n */\n\n/**\n * Adds the arguments passed in.\n *\n * @export\n * @param {} numbers\n * @returns {number}\n */\nexport function sum(...numbers) {\n    let ret = 0;\n    for (const num of numbers) {\n        ret += +num;\n    }\n    return ret;\n}\n\n/**\n * Given a date range, returns an array of one or two ranges depending\n * on whether the date range includes a new-years.\n *\n * @export\n * @param {(string|Date)} start_date\n * @param {(string|Date)} end_date\n * @returns {{start_date: string, end_date:string}[]}\n */\nexport function splitDateRangeAtNewYear(start_date, end_date) {\n    start_date = new Date(start_date);\n    end_date = new Date(end_date);\n    // For `Date`, 11 is december\n    const december = new Date(start_date.getFullYear(), 11, 31);\n    // For `Date`, 12 will be the first month of the subsequent year\n    const january = new Date(start_date.getFullYear(), 12, 1);\n    if (start_date <= december && end_date > december) {\n        return [\n            {\n                start_date: start_date.toISOString(),\n                end_date: december.toISOString(),\n            },\n            {\n                start_date: january.toISOString(),\n                end_date: end_date.toISOString(),\n            },\n        ];\n    }\n    return [\n        {\n            start_date: start_date.toISOString(),\n            end_date: end_date.toISOString(),\n        },\n    ];\n}\n\n/**\n * Generates an unused Id based on the `prop` attribute.\n *\n * @export\n * @param {object[]} data - array of data with `prop` attributes\n * @param {string} [prop=\"id\"] - attribute to key on\n * @returns {number|string}\n */\nexport function getUnusedId(data, prop = \"id\") {\n    const ids = data.map((x) => +x[prop]).filter((x) => x != null);\n    const max = Math.max(0, ...ids);\n    if (isNaN(max)) {\n        // Somehow there was some other type mixed in with the ids. In this case,\n        // generate a random string\n        return \"id-\" + Math.round(Math.random() * 10000);\n    }\n    return max + 1;\n}\n\n/**\n * Find `obj` in `data` based on a matching attribute of `prop`.\n * Returns matching object or `undefined` if no match was found.\n *\n * @export\n * @param {*} obj\n * @param {*} [data=[]]\n * @param {string} [prop=\"id\"]\n * @returns {undefined|object}\n */\nexport function find(obj, data = [], prop = \"id\") {\n    // We really do want to use `==` and not `===` here.\n    // Sometimes ids are given as ints and sometimes as strings;\n    // we should work interchangibly with both.\n    // eslint-disable-next-line\n    return data.find((s) => s[prop] == obj[prop]);\n}\n\n/**\n * Filter `data` to be a list which only includes items\n * with ids listed in `ids`.\n *\n * @export\n * @param {string[]} [ids=[]]\n * @param {object[]} [data=[]]\n * @param {string} [prop=\"id\"]\n * @returns {object[]}\n */\nexport function findAllById(ids = [], data = [], prop = \"id\") {\n    // ids can be numbers or strings; make sure we get a match in either case.\n    ids = ids.map((x) => \"\" + x);\n    return data.filter((x) => ids.includes(\"\" + x[prop]));\n}\n\n/**\n * Delete the first occurance of `obj` in `data`\n *\n * @export\n * @param {*} obj\n * @param {*} [data=[]]\n */\nexport function deleteInArray(obj, data = []) {\n    data.splice(data.indexOf(obj), 1);\n}\n\n/**\n * Verify whether attributes are nonempty/unique. If they fail these\n * checks, return an appropriate error message. If they pass, return `false`.\n *\n * @export\n * @param {object} obj\n * @param {object[]} [data=[]]\n * @param {boolean} [props={ name: { required: true, unique: true } }]\n * @returns {string|false} - `false` if all checks succeed. Otherwise an appropriate error message.\n */\nexport function getAttributesCheckMessage(\n    obj,\n    data = [],\n    props = { id: { required: true, unique: true } }\n) {\n    for (const [prop, requirements] of Object.entries(props)) {\n        // Required attributes cannot be null or the empty string\n        // Note: `== null` check null and undefined\n        if (requirements.required && (obj[prop] == null || obj[prop] === \"\")) {\n            return `Property ${prop} cannot be empty`;\n        }\n        // Search the data for something with a matching prop. If we find\n        // anything, we are not unique\n        if (requirements.unique && find(obj, data, prop)) {\n            return `Duplicate entry exists for property ${prop} with value ${obj[prop]}`;\n        }\n    }\n    return false;\n}\n\n/**\n * Base class for mockAPI controllers. These handle\n * the mockAPI data and queries thereof.\n *\n * @export\n * @class MockAPIController\n */\nexport class MockAPIController {\n    constructor(data, ownData) {\n        this.data = data;\n        this.ownData = ownData;\n    }\n    /**\n     * Finds all instances of the given item; returns an array copy.\n     *\n     * @returns {object[]}\n     * @memberof MockAPIController\n     */\n    // eslint-disable-next-line\n    findAll(...args) {\n        return [...this.ownData];\n    }\n    /**\n     * Finds a single instance of an item\n     *\n     * @param {({id: number}|number)} query\n     * @returns {object}\n     * @memberof MockAPIController\n     */\n    find(query) {\n        return this.rawFind(query);\n    }\n    /**\n     * Not to be overridden. The return value of this object\n     * must be an unmangled version of the actual data stored (so that it can be\n     * mutated, for example.)\n     *\n     * @param {*} query\n     * @returns\n     * @memberof MockAPIController\n     */\n    rawFind(query) {\n        if (query == null) {\n            return null;\n        }\n        if (query.id != null) {\n            return find(query, this.ownData);\n        }\n        if (query.utorid != null) {\n            return find({ utorid: query }, this.ownData);\n        }\n        return find({ id: query }, this.ownData);\n    }\n    /**\n     * Delete the given object (by id).\n     *\n     * @param {{id: number}} obj\n     * @memberof MockAPIController\n     */\n    delete(obj) {\n        obj = this.rawFind(obj);\n        if (!obj) {\n            throw new Error(`Cannot delete object ${JSON.stringify(obj)}`);\n        }\n        deleteInArray(obj, this.ownData);\n        return obj;\n    }\n    /**\n     * Get an unused ID\n     *\n     * @returns {number}\n     * @memberof MockAPIController\n     */\n    unusedId() {\n        if (!this.ownData) {\n            throw new Error(\n                \"Cannot get unused ID when `ownData` hasn't been set\"\n            );\n        }\n        return getUnusedId(this.ownData);\n    }\n    /**\n     * Creates a new item instance; no validation is performed.\n     *\n     * @param {object} obj - the new instance data\n     * @memberof MockAPIController\n     */\n    create(obj) {\n        const newId = getUnusedId(this.ownData);\n        const newItem = { ...obj, id: newId };\n        this.ownData.push(newItem);\n        return newItem;\n    }\n    /**\n     * Validates the properties of a new item instance. Throws an error\n     * if the properties are invalid/incompatable.\n     *\n     * @param {object} obj\n     * @memberof MockAPIController\n     */\n    // eslint-disable-next-line\n    validateNew(obj) {\n        throw new Error(\"Subclasses must implement `validateNew()`\");\n    }\n\n    /**\n     * Validates a property of an item instance. Throws an error\n     * if this property are invalid/incompatable.\n     *\n     * @param {object} obj\n     * @param {string} prop\n     * @memberof MockAPIController\n     */\n    // eslint-disable-next-line no-unused-vars\n    validateProp(prop, value, id) {\n        return true;\n    }\n    /**\n     * Update an item if it can be found. Otherwise, return null.\n     *\n     * @param {*} obj\n     * @returns {(object|null)}\n     * @memberof MockAPIController\n     */\n    updateIfFound(obj) {\n        const item = this.rawFind(obj);\n        if (!item) {\n            return null;\n        }\n        // We've found a matching item. Update all non-null\n        // properties\n        for (const prop in obj) {\n            if (prop != null) {\n                this.validateProp(prop, obj[prop], obj.id);\n                item[prop] = obj[prop];\n            }\n        }\n        return item;\n    }\n    /**\n     * Upsert an item. `validateNew` will be run on the item before it is created.\n     * Null/undefined parameters will not be updated.\n     *\n     * @param {object} obj\n     * @returns {object}\n     * @memberof MockAPIController\n     */\n    upsert(obj) {\n        if (this.rawFind(obj)) {\n            return this.updateIfFound(obj);\n        }\n        this.validateNew(obj);\n        return this.create(obj);\n    }\n}\n\n/**\n * Extract the earliest start date and latest end date from\n * an array of wage chunks.\n *\n * @export\n * @param {[object]} wageChunks\n * @returns {{start_date: date, end_date: date}}\n */\nexport function wageChunkArrayToStartAndEndDates(wageChunks) {\n    const startDates = wageChunks.map((x) => x.start_date);\n    const endDates = wageChunks.map((x) => x.end_date);\n    startDates.sort();\n    endDates.sort();\n    return {\n        start_date: startDates[0],\n        end_date: endDates[endDates.length - 1],\n    };\n}\n\n/**\n * Join an array of strings with the conjunction \"and\", if suitable.\n *\n * @param {[string]} items\n * @returns {string}\n */\nfunction joinWithConjunction(items) {\n    if (items == null || items.length === 0) {\n        return \"\";\n    }\n    if (items.length === 1) {\n        return items[0];\n    }\n    if (items.length === 2) {\n        return `${items[0]} and ${items[1]}`;\n    }\n    items = [...items];\n    items[items.length - 1] = \"and \" + items[items.length - 1];\n    return items.join(\", \");\n}\n\n/**\n * Format a list of instructors to appear in a contract.\n *\n * @export\n * @param {[object]} instructors\n * @returns {string}\n */\nexport function formatInstructorsContact(instructors) {\n    if (!instructors) {\n        return [];\n    }\n    const contacts = instructors.map(\n        (x) => `${x.first_name} ${x.last_name} <${x.email}>`\n    );\n    return joinWithConjunction(contacts);\n}\n\n/**\n * Take an array of wage chunks and create a formatted string describing every separate\n * pay period. If there are multiple wage chunks with the same rate, their hours are combined\n * and the pay window is made large enough to contain those chunks.\n *\n * @export\n * @param {[object]} wageChunks\n * @returns {string}\n */\nexport function wageChunkArrayToPayPeriodDescription(wageChunks) {\n    // Every different pay rate needs to be explained separately\n    // So first make a hash based on pay rates\n    const rateData = {};\n    for (const wageChunk of wageChunks) {\n        let { rate, start_date, end_date, hours } = wageChunk;\n        start_date = new Date(start_date);\n        end_date = new Date(end_date);\n        rateData[rate] = rateData[rate] || { hours: 0, rate };\n        const data = rateData[rate];\n        data.hours += hours;\n        data.start_date = data.start_date || start_date;\n        data.start_date = Math.min(data.start_date, start_date);\n        data.end_date = data.end_date || end_date;\n        data.end_date = Math.max(data.end_date, end_date);\n    }\n    const descriptions = Object.values(rateData).map(\n        ({ hours, rate, start_date, end_date }) => {\n            start_date = new Date(start_date);\n            end_date = new Date(end_date);\n\n            return `${hours} hours at $${rate}/hour from ${start_date.toLocaleDateString(\n                \"EN-ca\",\n                { month: \"long\", day: \"numeric\", year: \"numeric\" }\n            )} to ${end_date.toLocaleDateString(\"EN-ca\", {\n                month: \"long\",\n                day: \"numeric\",\n                year: \"numeric\",\n            })}`;\n        }\n    );\n\n    return joinWithConjunction(descriptions);\n}\n\n/**\n * Return a copy of `obj` but filter out any properties whose value\n * is `null` or `undefined`.\n *\n * @export\n * @param {*} obj\n * @returns\n */\nexport function filterNullProps(obj) {\n    const ret = {};\n    for (const key in obj) {\n        if (obj[key] != null) {\n            ret[key] = obj[key];\n        }\n    }\n    return ret;\n}\n\nexport function errorUnlessRole({ role }, targetRule = \"admin\") {\n    if (role !== targetRule) {\n        throw new Error(`Invalid route for user with role '${role}'`);\n    }\n}\n\n/**\n * Recursively traverse the object `obj` and delete any property with key `prop`.\n *\n * @export\n * @param {*} obj\n * @param {string} [prop=\"id\"]\n * @returns\n */\nexport function recursiveDeleteProp(obj, prop = \"id\") {\n    if (typeof obj != \"object\" || obj == null) {\n        return;\n    }\n    if (Array.isArray(obj)) {\n        for (const elm of obj) {\n            recursiveDeleteProp(elm, prop);\n        }\n        return;\n    }\n    delete obj[prop];\n    for (const elm of Object.values(obj)) {\n        recursiveDeleteProp(elm, prop);\n    }\n}\n\n//\n// Base64 Encoding functions from\n// https://gist.github.com/enepomnyaschih/72c423f727d395eeaa09697058238727\n//\n\n/*\nMIT License\nCopyright (c) 2020 Egor Nepomnyaschih\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\n/*\n// This constant can also be computed with the following algorithm:\nconst base64abc = [],\n\tA = \"A\".charCodeAt(0),\n\ta = \"a\".charCodeAt(0),\n\tn = \"0\".charCodeAt(0);\nfor (let i = 0; i < 26; ++i) {\n\tbase64abc.push(String.fromCharCode(A + i));\n}\nfor (let i = 0; i < 26; ++i) {\n\tbase64abc.push(String.fromCharCode(a + i));\n}\nfor (let i = 0; i < 10; ++i) {\n\tbase64abc.push(String.fromCharCode(n + i));\n}\nbase64abc.push(\"+\");\nbase64abc.push(\"/\");\n*/\nconst base64abc = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\".split(\n    \"\"\n);\n\n// This constant can also be computed with the following algorithm:\nconst l = 256,\n    base64codes = new Uint8Array(l);\nfor (let i = 0; i < l; ++i) {\n    base64codes[i] = 255; // invalid character\n}\nbase64abc.forEach((char, index) => {\n    base64codes[char.charCodeAt(0)] = index;\n});\nbase64codes[\"=\".charCodeAt(0)] = 0; // ignored anyway, so we just need to prevent an error\n//const base64codes = [\n//\t255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n//\t255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n//\t255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 62, 255, 255, 255, 63,\n//\t52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 255, 255, 255, 0, 255, 255,\n//\t255, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\n//\t15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 255, 255, 255, 255, 255,\n//\t255, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n//\t41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51\n//];\n\nfunction getBase64Code(charCode) {\n    if (charCode >= base64codes.length) {\n        throw new Error(\"Unable to parse base64 string.\");\n    }\n    const code = base64codes[charCode];\n    if (code === 255) {\n        throw new Error(\"Unable to parse base64 string.\");\n    }\n    return code;\n}\n\nexport function bytesToBase64(bytes) {\n    let result = \"\",\n        i,\n        l = bytes.length;\n    for (i = 2; i < l; i += 3) {\n        result += base64abc[bytes[i - 2] >> 2];\n        result += base64abc[((bytes[i - 2] & 0x03) << 4) | (bytes[i - 1] >> 4)];\n        result += base64abc[((bytes[i - 1] & 0x0f) << 2) | (bytes[i] >> 6)];\n        result += base64abc[bytes[i] & 0x3f];\n    }\n    if (i === l + 1) {\n        // 1 octet yet to write\n        result += base64abc[bytes[i - 2] >> 2];\n        result += base64abc[(bytes[i - 2] & 0x03) << 4];\n        result += \"==\";\n    }\n    if (i === l) {\n        // 2 octets yet to write\n        result += base64abc[bytes[i - 2] >> 2];\n        result += base64abc[((bytes[i - 2] & 0x03) << 4) | (bytes[i - 1] >> 4)];\n        result += base64abc[(bytes[i - 1] & 0x0f) << 2];\n        result += \"=\";\n    }\n    return result;\n}\n\nexport function base64ToBytes(str) {\n    if (str.length % 4 !== 0) {\n        throw new Error(\"Unable to parse base64 string.\");\n    }\n    const index = str.indexOf(\"=\");\n    if (index !== -1 && index < str.length - 2) {\n        throw new Error(\"Unable to parse base64 string.\");\n    }\n    let missingOctets = str.endsWith(\"==\") ? 2 : str.endsWith(\"=\") ? 1 : 0,\n        n = str.length,\n        result = new Uint8Array(3 * (n / 4)),\n        buffer;\n    for (let i = 0, j = 0; i < n; i += 4, j += 3) {\n        buffer =\n            (getBase64Code(str.charCodeAt(i)) << 18) |\n            (getBase64Code(str.charCodeAt(i + 1)) << 12) |\n            (getBase64Code(str.charCodeAt(i + 2)) << 6) |\n            getBase64Code(str.charCodeAt(i + 3));\n        result[j] = buffer >> 16;\n        result[j + 1] = (buffer >> 8) & 0xff;\n        result[j + 2] = buffer & 0xff;\n    }\n    return result.subarray(0, result.length - missingOctets);\n}\n\nexport function base64encode(str, encoder = new TextEncoder()) {\n    return bytesToBase64(encoder.encode(str));\n}\n\nexport function base64decode(str, decoder = new TextDecoder()) {\n    return decoder.decode(base64ToBytes(str));\n}\n","import {\n    getAttributesCheckMessage,\n    MockAPIController,\n    errorUnlessRole,\n} from \"./utils\";\nimport {\n    documentCallback,\n    wrappedPropTypes,\n    docApiPropTypes,\n} from \"../defs/doc-generation\";\nimport { Session as SessionType } from \"../defs/types\";\n\ninterface RouteParams {\n    role: \"admin\" | \"instructor\" | \"ta\";\n    [key: string]: string;\n}\n\nexport class Session extends MockAPIController {\n    constructor(data: any) {\n        super(data, data.sessions);\n    }\n    create(session: Partial<SessionType>): SessionType {\n        const newSession = super.create(session) as SessionType;\n        // If we insert a new session, we need to make sure we create\n        // a corresponding assignments_by_session array\n        this.data.assignments_by_session[newSession.id] = [];\n        return newSession;\n    }\n    findAll(...args: any[]): SessionType[] {\n        return super.findAll(...args) as SessionType[];\n    }\n    validateNew(session: Partial<SessionType>) {\n        // if we're here, we need to create a new session\n        // but check if the session name is empty or duplicate\n        const message = getAttributesCheckMessage(session, this.ownData, {\n            name: { required: true, unique: true },\n        } as any);\n        if (message) {\n            throw new Error(message);\n        }\n    }\n    validateProp(prop: keyof SessionType, value: any, id: number) {\n        if (prop === \"name\") {\n            // check if `name` is empty\n            if (value === undefined || value.length === 0) {\n                throw new Error(\n                    `Property ${prop} cannot be empty or undefined.`\n                );\n            }\n            // if `name` is not empty, make sure it is unique after the update\n            // by filtering out the request session\n            const filteredData = this.findAll().filter(\n                (item) => item.id !== id\n            );\n            // and make sure `name` is unique to the rest\n            const message = getAttributesCheckMessage(\n                { name: value },\n                filteredData,\n                {\n                    name: { unique: true },\n                } as any\n            );\n            if (message) {\n                throw new Error(message);\n            }\n        }\n\n        return true;\n    }\n}\n\nexport const sessionsRoutes = {\n    get: {\n        \"/sessions\": documentCallback({\n            func: (data: any) => new Session(data).findAll(),\n            summary: \"Get all available sessions\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.session),\n        }),\n    },\n    post: {\n        \"/sessions\": documentCallback({\n            func: (\n                data: any,\n                params: RouteParams,\n                body: Partial<SessionType>\n            ) => {\n                errorUnlessRole(params, \"admin\");\n                // body should be a session object. If it contains an id,\n                // update an existing session. Otherwise, create a new one.\n                return new Session(data).upsert(body);\n            },\n            summary: \"Upsert a session\",\n            returns: docApiPropTypes.session,\n            posts: docApiPropTypes.session,\n        }),\n        \"/sessions/delete\": documentCallback({\n            func: (\n                data: any,\n                params: RouteParams,\n                body: Partial<SessionType>\n            ) => {\n                errorUnlessRole(params, \"admin\");\n                return new Session(data).delete(body as any);\n            },\n            summary: \"Delete a session\",\n            posts: docApiPropTypes.idOnly,\n            returns: docApiPropTypes.session,\n        }),\n    },\n};\n","import {\n    getAttributesCheckMessage,\n    findAllById,\n    MockAPIController,\n    bytesToBase64,\n} from \"./utils\";\nimport {\n    documentCallback,\n    wrappedPropTypes,\n    docApiPropTypes,\n} from \"../defs/doc-generation\";\nimport { Session } from \"./sessions\";\n\nexport class ContractTemplate extends MockAPIController {\n    constructor(data) {\n        super(data);\n        this.ownData = this.data.contract_templates;\n    }\n    validateNew(template, session = null) {\n        // The name and file are required\n        const message = getAttributesCheckMessage(template, this.ownData, {\n            template_name: { required: true },\n            template_file: { required: true },\n        });\n        if (message) {\n            throw new Error(message);\n        }\n        // If we're inserting to a session, the name must be unique\n        if (session) {\n            const message = getAttributesCheckMessage(\n                template,\n                this.findAllBySession(session),\n                {\n                    template_name: { required: true, unique: true },\n                }\n            );\n            if (message) {\n                throw new Error(message);\n            }\n        }\n    }\n    getTemplateHtml(template) {\n        template = new ContractTemplate(this.data).find(template);\n        if (\n            !(\n                template.template_file in\n                this.data.contract_templates_by_filename\n            )\n        ) {\n            throw new Error(\n                `Could not find Html for template ${template.template_file}`\n            );\n        }\n        return this.data.contract_templates_by_filename[template.template_file];\n    }\n    findAllBySession(session) {\n        const matchingSession = new Session(this.data).find(session);\n        return findAllById(\n            this.data.contract_templates_by_session[matchingSession.id] || [],\n            this.ownData\n        );\n    }\n    upsertBySession(obj, session) {\n        const matchingSession = new Session(this.data).find(session);\n        // If this is not an upsert, validate the paramters. Otherwise, don't validate.\n        if (!this.find(obj)) {\n            this.validateNew(obj, matchingSession);\n        }\n        const newTemplate = this.upsert(obj);\n        // Make sure there is an array for to store the contract_templates by session,\n        // and the push to this array before returning the new object\n        this.data.contract_templates_by_session[matchingSession.id] =\n            this.data.contract_templates_by_session[matchingSession.id] || [];\n        this.data.contract_templates_by_session[matchingSession.id].push(\n            newTemplate.id\n        );\n        return newTemplate;\n    }\n}\n\nexport const templatesRoutes = {\n    get: {\n        \"/available_contract_templates\": documentCallback({\n            func: (data) => [...data.available_contract_templates],\n            summary:\n                \"Get all available contract templates (these are literal files on the server).\",\n            returns: wrappedPropTypes.arrayOf(\n                docApiPropTypes.contractTemplateMinimal\n            ),\n        }),\n        \"/sessions/:session_id/contract_templates\": documentCallback({\n            func: (data, params) =>\n                new ContractTemplate(data).findAllBySession(params.session_id),\n            summary: \"Get contract templates associated with this session.\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.contractTemplate),\n        }),\n        \"/contract_templates/:template_id/view\": documentCallback({\n            func: (data, params) =>\n                new ContractTemplate(data).getTemplateHtml(params.template_id),\n            summary:\n                \"Get a preview of the contact template (i.e., the actual HTML).\",\n            returns: wrappedPropTypes.string,\n        }),\n        \"/contract_templates/:template_id/download\": documentCallback({\n            func: (data, params) => {\n                const { template_id } = params;\n                const template = new ContractTemplate(data);\n                const templateContent = template.getTemplateHtml(template_id);\n\n                // We're directly sending binary data, so we need to encode the template\n                // as UTF-8 (rather than native Javascript UTF-16)\n                const encodedContent = new TextEncoder().encode(\n                    templateContent\n                );\n                return {\n                    file_name: template.find(template_id).template_file,\n                    mime_type: \"text/html\",\n                    content: bytesToBase64(encodedContent),\n                };\n            },\n            summary:\n                \"Download the raw HTML template associated with the contract-template. No substitutions are made to this file. The `content` filed is encoded in Base64 and may be a binary file (e.g., a zip file).\",\n            returns: wrappedPropTypes.shape({\n                file_name: wrappedPropTypes.string,\n                mime_type: wrappedPropTypes.string,\n                content: wrappedPropTypes.string,\n            }),\n        }),\n    },\n    post: {\n        \"/sessions/:session_id/contract_templates\": documentCallback({\n            func: (data, params, body) => {\n                return new ContractTemplate(data).upsertBySession(\n                    body,\n                    params.session_id\n                );\n            },\n            summary:\n                \"Associate a position template with a session; this method upserts\",\n            posts: docApiPropTypes.contractTemplate,\n            returns: docApiPropTypes.contractTemplate,\n        }),\n    },\n};\n","import { MockAPIController, find, getAttributesCheckMessage } from \"./utils\";\nimport {\n    documentCallback,\n    wrappedPropTypes,\n    docApiPropTypes,\n} from \"../defs/doc-generation\";\n\nexport class User extends MockAPIController {\n    constructor(data) {\n        super(data, data.users);\n    }\n    validateNew(user) {\n        const message = getAttributesCheckMessage(user, this.ownData, {\n            utorid: { required: true, unique: true },\n        });\n        if (message) {\n            throw new Error(message);\n        }\n    }\n    rawFind(query) {\n        if (query == null) {\n            return null;\n        }\n        // If we pass an `id`, rely on that, otherwise,\n        // use the `utorid`.\n        if (query.id != null) {\n            return find(query, this.ownData);\n        }\n        if (query.utorid != null) {\n            return find(query, this.ownData, \"utorid\");\n        }\n        return find({ utorid: query }, this.ownData, \"utorid\");\n    }\n    setActiveUser(user) {\n        const matchingUser = this.find(user);\n        if (!matchingUser) {\n            throw new Error(\n                `Cannot find user ${JSON.stringify(user)} to set as active`\n            );\n        }\n        this.data.active_user = matchingUser.utorid;\n    }\n    getActiveUser() {\n        return this.find(this.data.active_user);\n    }\n}\n\nexport const activeUserRoutes = {\n    get: {\n        \"/users\": documentCallback({\n            func: (data) => new User(data).findAll(),\n            summary: \"Get all available users.\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.user),\n        }),\n        \"/active_user\": documentCallback({\n            func: (data) => new User(data).getActiveUser(),\n            summary: \"Gets the currently active user.\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.user),\n            roles: [\"instructor\", \"ta\"],\n        }),\n    },\n    post: {\n        \"/users\": documentCallback({\n            func: (data, params, body) => new User(data).upsert(body),\n            summary: \"Upserts user info\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.user),\n            posts: docApiPropTypes.user,\n        }),\n    },\n};\n","import {\n    getAttributesCheckMessage,\n    deleteInArray,\n    MockAPIController,\n    errorUnlessRole,\n} from \"./utils\";\nimport {\n    documentCallback,\n    wrappedPropTypes,\n    docApiPropTypes,\n} from \"../defs/doc-generation\";\nimport { User } from \"./active_user\";\nimport { Position } from \"./positions\";\n\nexport class Instructor extends MockAPIController {\n    constructor(data) {\n        super(data, data.instructors);\n    }\n    validateNew(instructor) {\n        const message = getAttributesCheckMessage(instructor, this.ownData, {\n            utorid: { required: true, unique: true },\n            first_name: { required: true },\n            last_name: { required: true },\n        });\n        if (message) {\n            throw new Error(message);\n        }\n    }\n    delete(instructor) {\n        const matchingInstructor = this.find(instructor);\n        if (!matchingInstructor) {\n            throw new Error(\n                `Cannot find instructor matching ${JSON.stringify(instructor)}`\n            );\n        }\n        super.delete(matchingInstructor);\n        // After an instructor is deleted, they should be removed from all courses\n\n        // remove this instructor from any positions\n        for (const position of this.data.positions) {\n            if (\n                (position.instructor_ids || []).includes(matchingInstructor.id)\n            ) {\n                deleteInArray(matchingInstructor.id, position.instructor_ids);\n            }\n        }\n        return matchingInstructor;\n    }\n    /**\n     * Returns the instructor object corresponding to the active user,\n     * or null if the active user doesn't correspond to an instructor.\n     *\n     * @returns {Instructor | null}\n     * @memberof Instructor\n     */\n    getFromActiveUser() {\n        const activeUser = new User(this.data).getActiveUser();\n        const activeInstructor = new Instructor(this.data)\n            .findAll()\n            .find((instructor) => instructor.utorid === activeUser.utorid);\n        return activeInstructor;\n    }\n}\n\nexport const instructorsRoutes = {\n    get: {\n        \"/instructors\": documentCallback({\n            func: (data, params) => {\n                if (params.role === \"admin\") {\n                    return new Instructor(data).findAll();\n                }\n                if (params.role === \"instructor\") {\n                    const activeInstructor = new Instructor(\n                        data\n                    ).getFromActiveUser();\n                    if (!activeInstructor) {\n                        return [];\n                    }\n                    const instructorPositions = new Position(\n                        data\n                    ).getForInstructor(activeInstructor);\n                    const instructorIdsSet = new Set();\n                    for (const position of instructorPositions) {\n                        for (const id of position.instructor_ids) {\n                            instructorIdsSet.add(id);\n                        }\n                    }\n\n                    return new Instructor(data)\n                        .findAll()\n                        .filter((instructor) =>\n                            instructorIdsSet.has(instructor.id)\n                        );\n                }\n                // Always error if we've made it to this point\n                errorUnlessRole(params, \"\");\n            },\n            summary: \"Get a list of all instructors\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.instructor),\n        }),\n    },\n    post: {\n        \"/instructors\": documentCallback({\n            func: (data, params, body) => {\n                errorUnlessRole(params, \"admin\");\n                return new Instructor(data).upsert(body);\n            },\n            summary: \"Upsert an instructor\",\n            posts: docApiPropTypes.instructor,\n            returns: docApiPropTypes.instructor,\n        }),\n        \"/instructors/delete\": documentCallback({\n            func: (data, params, body) => {\n                errorUnlessRole(params, \"admin\");\n                return new Instructor(data).delete(body);\n            },\n            summary: \"Delete an instructor (removes from all positions)\",\n            posts: docApiPropTypes.idOnly,\n            returns: docApiPropTypes.instructor,\n        }),\n    },\n};\n","import {\n    find,\n    getAttributesCheckMessage,\n    deleteInArray,\n    findAllById,\n    MockAPIController,\n    errorUnlessRole,\n} from \"./utils\";\nimport {\n    documentCallback,\n    wrappedPropTypes,\n    docApiPropTypes,\n} from \"../defs/doc-generation\";\nimport { Session } from \"./sessions\";\nimport { ContractTemplate } from \"./contract_templates\";\nimport { Instructor } from \"./instructors\";\n\nexport class Position extends MockAPIController {\n    constructor(data) {\n        super(data, data.positions);\n    }\n    validateNew(position, session = null) {\n        // If we're inserting to a session, the position_code must be unique\n        if (session) {\n            const message = getAttributesCheckMessage(\n                position,\n                this.findAllBySession(session),\n                {\n                    position_code: { required: true, unique: true },\n                }\n            );\n            if (message) {\n                throw new Error(message);\n            }\n        }\n    }\n    find(query) {\n        const rawPosition = this.rawFind(query);\n        // Find which session we're part of\n\n        let session_id = null;\n        for (const [_session_id, assignment_ids] of Object.entries(\n            this.data.positions_by_session\n        )) {\n            if (assignment_ids.includes(rawPosition.id)) {\n                session_id = _session_id;\n                break;\n            }\n        }\n        return { ...rawPosition, session_id };\n    }\n    getSession(position) {\n        return new Session(this.data).find({\n            id: position.session_id,\n        });\n    }\n    getContractTemplate(position) {\n        return new ContractTemplate(this.data).find({\n            id: position.contract_template_id,\n        });\n    }\n    getInstructors(position) {\n        if (!position.instructor_ids) {\n            return [];\n        }\n        return position.instructor_ids.map((id) =>\n            new Instructor(this.data).find({ id })\n        );\n    }\n    /**\n     * Returns a list of positions that the specified `instructor` is an instructor for.\n     *\n     * @param {*} instructor\n     * @memberof Position\n     */\n    getForInstructor(instructor) {\n        instructor = new Instructor(this.data).find(instructor);\n        if (!instructor) {\n            throw new Error(`Cannot find a matching instructor`);\n        }\n        const positions = this.findAll();\n        return positions.filter((position) =>\n            (position.instructor_ids || []).includes(instructor.id)\n        );\n    }\n    delete(position) {\n        const matchingPosition = this.rawFind(position);\n        if (!matchingPosition) {\n            throw new Error(\n                `Cannot find position matching ${JSON.stringify(position)}`\n            );\n        }\n        super.delete(matchingPosition);\n        // After an instructor is deleted, they should be removed from all courses\n\n        // remove this instructor from any positions\n        for (const bySessionsList of Object.values(\n            this.data.positions_by_session\n        )) {\n            if (bySessionsList.includes(matchingPosition.id)) {\n                deleteInArray(matchingPosition.id, bySessionsList);\n            }\n        }\n        return matchingPosition;\n    }\n    findAllBySession(session) {\n        const matchingSession = new Session(this.data).find(session);\n        return findAllById(\n            this.data.positions_by_session[matchingSession.id] || [],\n            this.ownData\n        );\n    }\n    upsertBySession(obj, session) {\n        const matchingSession = new Session(this.data).rawFind(session);\n        // If this is not an upsert, validate the paramters. Otherwise, don't validate.\n        if (!this.rawFind(obj)) {\n            this.validateNew(obj, matchingSession);\n\n            // if the start/end date is not set,\n            // use the session dates\n            obj.start_date =\n                obj.start_date === undefined\n                    ? matchingSession.start_date\n                    : obj.start_date;\n            obj.end_date =\n                obj.end_date === undefined\n                    ? matchingSession.end_date\n                    : obj.end_date;\n        }\n        const newPosition = this.upsert(obj);\n        // Make sure there is an array for to store the contract_templates by session,\n        // and the push to this array before returning the new object\n        this.data.positions_by_session[matchingSession.id] =\n            this.data.positions_by_session[matchingSession.id] || [];\n        this.data.positions_by_session[matchingSession.id].push(newPosition.id);\n        return newPosition;\n    }\n    findAssociatedSession(position) {\n        const matchingPosition = this.find(position);\n        if (!matchingPosition) {\n            throw new Error(\n                `Could not associated session because there is no position matching ${JSON.stringify(\n                    position\n                )}`\n            );\n        }\n        const ret = Object.keys(this.data.positions_by_session).find((x) =>\n            this.data.positions_by_session[x].includes(matchingPosition.id)\n        );\n        // Make sure we recast the id as an int\n        return ret != null ? +ret : ret;\n    }\n}\n\nexport const positionsRoutes = {\n    get: {\n        \"/sessions/:session_id/positions\": documentCallback({\n            func: (data, params) => {\n                if (params.role === \"admin\") {\n                    return new Position(data).findAllBySession(\n                        params.session_id\n                    );\n                }\n                if (params.role === \"instructor\") {\n                    // Only return the the positions belonging to the current session\n                    // for which the activeUser is an instructor.\n                    const activeInstructor = new Instructor(\n                        data\n                    ).getFromActiveUser();\n                    if (!activeInstructor) {\n                        return [];\n                    }\n                    return new Position(data)\n                        .findAllBySession(params.session_id)\n                        .filter((position) =>\n                            position.instructor_ids.includes(\n                                activeInstructor.id\n                            )\n                        );\n                }\n                errorUnlessRole(params, \"\");\n            },\n            summary: \"Get positions associated with this session.\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.position),\n        }),\n    },\n    post: {\n        \"/sessions/:session_id/positions\": documentCallback({\n            func: (data, params, body) => {\n                return new Position(data).upsertBySession(\n                    body,\n                    params.session_id\n                );\n            },\n            summary:\n                \"Upsert a position associated with a session. If a new position is created, it will be automatically associated with the given session\",\n            posts: docApiPropTypes.position,\n            returns: docApiPropTypes.position,\n        }),\n        \"/positions\": documentCallback({\n            func: (data, params, body) => {\n                errorUnlessRole(params, \"admin\");\n                const positions = data.positions;\n                // body should be a session object. If it contains an id,\n                // update an existing session. Otherwise, create a new one.\n                const matchingPosition = find(body, positions);\n                if (matchingPosition) {\n                    return Object.assign(matchingPosition, body);\n                }\n                throw new Error(`Cannot find position with id=${body.id}`);\n            },\n            summary: \"Update a position\",\n            posts: docApiPropTypes.position,\n            returns: docApiPropTypes.position,\n        }),\n        \"/positions/delete\": documentCallback({\n            func: (data, params, body) => {\n                errorUnlessRole(params, \"admin\");\n                return new Position(data).delete(body);\n            },\n            summary: \"Delete a position\",\n            posts: docApiPropTypes.idOnly,\n            returns: docApiPropTypes.session,\n        }),\n    },\n};\n","import { documentCallback, docApiPropTypes } from \"../defs/doc-generation\";\nimport { find, MockAPIController, findAllById } from \"./utils\";\nimport { Assignment } from \"./assignments\";\nimport { Position } from \"./positions\";\n\nexport class WageChunk extends MockAPIController {\n    constructor(data) {\n        super(data, data.wage_chunks);\n    }\n    validateNew() {\n        // There is nothing to validate for a wage chunk\n    }\n    findAllByAssignment(assignment) {\n        const matchingAssignment = new Assignment(this.data).rawFind(\n            assignment\n        );\n        if (!matchingAssignment) {\n            throw new Error(\n                `Could not find assignment matching ${JSON.stringify(\n                    assignment\n                )}`\n            );\n        }\n        // Make sure we apply `this.find` so that the rates are computed.\n        return findAllById(\n            [matchingAssignment.id],\n            this.ownData,\n            \"assignment_id\"\n        ).map((x) => this.find(x));\n    }\n    find(wageChunk) {\n        const rawWageChunk = this.rawFind(wageChunk);\n        const ret = { ...rawWageChunk };\n        if (ret.rate == null) {\n            // If the rate is not set, look it up from the session\n            const session = this.getSession(wageChunk);\n            if (session.rate2 == null) {\n                ret.rate = session.rate1;\n            } else {\n                // Rates switch from session.rate1 to session.rate2 on January 1 of\n                // the year following the session start date.\n                const start_date = new Date(wageChunk.start_date);\n                const end_date = new Date(wageChunk.end_date);\n                const session_start_date = new Date(session.start_date);\n                // For `Date`, 11 is december\n                const december = new Date(\n                    session_start_date.getFullYear(),\n                    11,\n                    31\n                );\n                if (start_date <= december && end_date <= december) {\n                    ret.rate = session.rate1;\n                } else {\n                    ret.rate = session.rate2;\n                }\n            }\n        }\n        return ret;\n    }\n    getSession(wageChunk) {\n        const rawWageChunk = this.rawFind(wageChunk);\n        const assignment = new Assignment(this.data).rawFind({\n            id: rawWageChunk.assignment_id,\n        });\n        const position = new Assignment(this.data).getPosition(assignment);\n        return new Position(this.data).getSession(position);\n    }\n    upsertByAssignment(wageChunk, assignment) {\n        const matchingAssignment = new Assignment(this.data).rawFind(\n            assignment\n        );\n        if (!matchingAssignment) {\n            throw new Error(\n                `Could not find assignment matching ${JSON.stringify(\n                    assignment\n                )}`\n            );\n        }\n        return this.upsert({\n            ...wageChunk,\n            assignment_id: matchingAssignment.id,\n        });\n    }\n    /**\n     * Sets the list of wage chunks associated with a given assignment to `wageChunks`.\n     * Any wage chunks omitted from the list are deleted.\n     *\n     * @param {*} wageChunks\n     * @param {*} assignment\n     * @returns\n     * @memberof WageChunk\n     */\n    setAllByAssignment(wageChunks, assignment) {\n        const matchingAssignment = new Assignment(this.data).rawFind(\n            assignment\n        );\n        if (!matchingAssignment) {\n            throw new Error(\n                `Could not find assignment matching ${JSON.stringify(\n                    assignment\n                )}`\n            );\n        }\n        const existingWageChunks = this.findAllByAssignment(assignment);\n        // Now we can upsert all the wageChunks\n        wageChunks.forEach((chunk) =>\n            this.upsertByAssignment(chunk, matchingAssignment)\n        );\n        // every wage chunk that is not in the `wageChunks` list gets deleted\n        for (const wageChunk of existingWageChunks) {\n            if (!find(wageChunk, wageChunks)) {\n                this.delete(wageChunk);\n            }\n        }\n        // Recompute the wage chunks list. This is \"needless\"\n        // logically, but it might catch some bugs at some point.\n        return this.findAllByAssignment(matchingAssignment);\n    }\n}\n\nexport const wageChunkRoutes = {\n    get: {},\n    post: {\n        \"/wage_chunks\": documentCallback({\n            func: (data, params, body) => new WageChunk(data).upsert(body),\n            posts: docApiPropTypes.wageChunk,\n            summary: \"Upsert a wage_chunk\",\n            returns: docApiPropTypes.wageChunk,\n        }),\n        \"/wage_chunks/delete\": documentCallback({\n            func: (data, params, body) => new WageChunk(data).delete(body),\n            posts: docApiPropTypes.wageChunk,\n            summary: \"Delete a wage_chunk. Must have a valid id specified.\",\n            returns: docApiPropTypes.wageChunk,\n        }),\n    },\n};\n","import {\n    getAttributesCheckMessage,\n    MockAPIController,\n    findAllById,\n} from \"./utils\";\nimport {\n    documentCallback,\n    wrappedPropTypes,\n    docApiPropTypes,\n} from \"../defs/doc-generation\";\nimport { Session } from \"./sessions\";\n\nexport class Application extends MockAPIController {\n    constructor(data) {\n        super(data, data.applications);\n    }\n    validateNew(applicant) {\n        const message = getAttributesCheckMessage(applicant, this.ownData, {\n            session_id: { required: true },\n            applicant_id: { required: true },\n        });\n        if (message) {\n            throw new Error(message);\n        }\n    }\n    findAllBySession(session) {\n        const matchingSession = new Session(this.data).find(session);\n        if (!matchingSession) {\n            throw new Error(\n                `Cannot find applicant by session because session ${JSON.stringify(\n                    session\n                )} cannot be found`\n            );\n        }\n        // The applicants for this session are those who have submitted an application for this session\n        return findAllById([matchingSession.id], this.ownData, \"session_id\");\n    }\n}\n\nexport const applicationsRoutes = {\n    get: {\n        \"/sessions/:session_id/applications\": documentCallback({\n            func: (data, params) =>\n                new Application(data).findAllBySession(params.session_id),\n            summary: \"Get all applications associated with the given session\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.application),\n        }),\n    },\n    post: {\n        \"/applications\": documentCallback({\n            func: (data, params, body) => new Application(data).upsert(body),\n            summary: \"Upsert an application\",\n            posts: docApiPropTypes.application,\n            returns: docApiPropTypes.application,\n        }),\n    },\n};\n","import {\n    getAttributesCheckMessage,\n    findAllById,\n    MockAPIController,\n    filterNullProps,\n    errorUnlessRole,\n} from \"./utils\";\nimport {\n    documentCallback,\n    wrappedPropTypes,\n    docApiPropTypes,\n} from \"../defs/doc-generation\";\nimport { Session } from \"./sessions\";\nimport { Application } from \"./applications\";\nimport { Assignment } from \"./assignments\";\nimport { stringToNativeType } from \"../../libs/urlUtils\";\nimport { Instructor } from \"./instructors\";\n\nexport class Applicant extends MockAPIController {\n    constructor(data) {\n        super(data, data.applicants);\n    }\n    validateNew(applicant) {\n        const message = getAttributesCheckMessage(applicant, this.ownData, {\n            utorid: { required: true, unique: true },\n            first_name: { required: true },\n            last_name: { required: true },\n        });\n        if (message) {\n            throw new Error(message);\n        }\n    }\n    findAllBySession(session) {\n        const matchingSession = new Session(this.data).find(session);\n        if (!matchingSession) {\n            throw new Error(\n                `Cannot find applicant by session because session ${JSON.stringify(\n                    session\n                )} cannot be found`\n            );\n        }\n        // The applicants for this session are those who have submitted an\n        // application for this session or those who have an assignment in this\n        // session.\n        const applications = new Application(this.data).findAllBySession(\n            matchingSession\n        );\n        const assignments = new Assignment(this.data).findAllBySession(\n            matchingSession\n        );\n        // Get a unique list of applicant ids\n        const applicantIds = Array.from(\n            new Set(\n                applications\n                    .map((x) => x.applicant_id)\n                    .concat(assignments.map((x) => x.applicant_id))\n            )\n        );\n        return findAllById(applicantIds, this.ownData);\n    }\n}\n\nexport const applicantsRoutes = {\n    get: {\n        \"/sessions/:session_id/applicants\": documentCallback({\n            func: (data, params) => {\n                if (params.role === \"admin\") {\n                    return new Applicant(data).findAllBySession(\n                        params.session_id\n                    );\n                }\n                if (params.role === \"instructor\") {\n                    const activeInstructor = new Instructor(\n                        data\n                    ).getFromActiveUser();\n                    if (!activeInstructor) {\n                        return [];\n                    }\n                    const applicantIds = new Assignment(data)\n                        .findAllBySessionAndInstructor(\n                            params.session_id,\n                            activeInstructor\n                        )\n                        .map((assignment) => assignment.applicant_id);\n                    // Only return applicants for positions that the instructor is instructing\n                    return new Applicant(data)\n                        .findAll()\n                        .filter((applicant) =>\n                            applicantIds.includes(applicant.id)\n                        );\n                }\n\n                errorUnlessRole(params, \"\");\n            },\n            summary: \"Get all applicants associated with the given session\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.applicant),\n        }),\n        \"/applicants\": documentCallback({\n            func: (data) => new Applicant(data).findAll(),\n            summary: \"Get all applicants\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.applicant),\n        }),\n        \"/applicants/:applicant_id\": documentCallback({\n            func: (data, params) =>\n                new Applicant(data).find(params.applicant_id),\n            summary: \"Get an applicant\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.applicant),\n        }),\n    },\n    post: {\n        \"/applicants\": documentCallback({\n            func: (data, params, body) => {\n                errorUnlessRole(params, \"admin\");\n                return new Applicant(data).upsert(body);\n            },\n            summary: \"Upsert an applicant\",\n            posts: docApiPropTypes.applicant,\n            returns: docApiPropTypes.applicant,\n        }),\n        \"/sessions/:session_id/applicants\": documentCallback({\n            func: (data, params, body) => {\n                errorUnlessRole(params, \"admin\");\n                const applicants = new Applicant(data).findAll();\n                // If we didn't specify an `id` but we did specify a `utorid`,\n                // try to look up the applicant by `utorid`\n                const existingApplicant =\n                    applicants.find(\n                        (x) => x.id === body.id || x.utorid === body.utorid\n                    ) || {};\n                const applicant = new Applicant(data).upsert({\n                    ...existingApplicant,\n                    ...filterNullProps(body),\n                });\n                const applications = new Application(data).findAllBySession(\n                    params.session_id\n                );\n                // First search for an applicant with a matching `id`\n                let match = applications.find(\n                    (application) => application.applicant_id === applicant.id\n                );\n                if (!match) {\n                    // We need to create an application for this applicant\n                    new Application(data).upsert({\n                        session_id: stringToNativeType(params.session_id),\n                        applicant_id: applicant.id,\n                        comment: \"<Autogenerated>\",\n                    });\n                }\n\n                return applicant;\n            },\n            summary:\n                \"Upsert an applicant. If they have no application associated with the current session, an application is created.\",\n            posts: docApiPropTypes.applicant,\n            returns: docApiPropTypes.applicant,\n        }),\n    },\n};\n","import {\n    documentCallback,\n    wrappedPropTypes,\n    docApiPropTypes,\n} from \"../defs/doc-generation\";\nimport {\n    getAttributesCheckMessage,\n    findAllById,\n    sum,\n    splitDateRangeAtNewYear,\n    MockAPIController,\n    wageChunkArrayToStartAndEndDates,\n    formatInstructorsContact,\n    wageChunkArrayToPayPeriodDescription,\n    errorUnlessRole,\n} from \"./utils\";\nimport { Session } from \"./sessions\";\nimport { Position } from \"./positions\";\nimport { WageChunk } from \"./wage_chunks\";\nimport { Applicant } from \"./applicants\";\nimport { Instructor } from \"./instructors\";\n\nexport class Assignment extends MockAPIController {\n    constructor(data) {\n        super(data, data.assignments);\n    }\n    validateNew(assignment) {\n        // No uniqueness required, so pass in an empty array ([]) to the verifier\n        const message = getAttributesCheckMessage(assignment, [], {\n            position_id: { required: true },\n            applicant_id: { required: true },\n        });\n        if (message) {\n            throw new Error(message);\n        }\n    }\n    findAllBySession(session) {\n        const matchingSession = new Session(this.data).rawFind(session);\n        return findAllById(\n            this.data.assignments_by_session[matchingSession.id] || [],\n            this.ownData\n            // Call \"find\" again to make sure every item gets packaged appropriately\n        ).map((x) => new Assignment(this.data).find(x));\n    }\n    getPosition(assignment) {\n        return new Position(this.data).find({\n            id: assignment.position_id,\n        });\n    }\n    getApplicant(assignment) {\n        return new Applicant(this.data).find({\n            id: assignment.applicant_id,\n        });\n    }\n    /**\n     * Grabs a bunch of data from the wage chunks related to an assignment\n     *\n     * @param {string} assignment\n     * @returnType {{hours: number, wage_chunks: object[]}}\n     */\n    getWageChunkInfo(assignment) {\n        const wageChunks = new WageChunk(this.data).findAllByAssignment(\n            assignment\n        );\n        const hours = sum(...wageChunks.map((x) => x.hours));\n        return { hours, wageChunks };\n    }\n    /**\n     * Grab the active offer for an assignment\n     *\n     * @param {number} matchingAssignment.id\n     * @param {object} this.data\n     * @returns {({}|null)} - an offer object or `undefined`\n     */\n    getActiveOffer(assignment) {\n        return new ActiveOffer(this.data).findByAssignment(assignment);\n    }\n    /**\n     * Pieces together all the details of an assignment from the mockAPI data\n     *\n     * @param {object} matchingAssignment - an assignment\n     * @returns\n     */\n    find(assignment) {\n        const matchingAssignment = this.rawFind(assignment);\n        if (!matchingAssignment) {\n            return matchingAssignment;\n        }\n        const ret = { ...matchingAssignment };\n        // compute the hours from wage chunks\n        const { hours } = this.getWageChunkInfo(matchingAssignment);\n        Object.assign(ret, { hours });\n        // compute offer_status\n        const activeOffer = this.getActiveOffer(matchingAssignment);\n        if (activeOffer) {\n            Object.assign(ret, { active_offer_status: activeOffer.status });\n        }\n        return ret;\n    }\n    upsert(assignment) {\n        // Call `find` to make sure the `hours` field is computed\n        const upsertedAssignment = this.find(super.upsert(assignment));\n\n        // Make sure the assignment is in the assignments_by_session list\n        const session_id = new Position(this.data).findAssociatedSession(\n            upsertedAssignment.position_id\n        );\n        if (session_id) {\n            this.data.assignments_by_session[session_id].push(\n                upsertedAssignment.id\n            );\n        }\n\n        // If `hours` is passed into the assignment, we need to modify the wage chunks\n        // associated with the assignment (but only if the hours differ).\n        if (\n            assignment.hours == null ||\n            +upsertedAssignment.hours === +assignment.hours\n        ) {\n            return upsertedAssignment;\n        }\n\n        let wageChunks = new WageChunk(this.data).findAllByAssignment(\n            upsertedAssignment\n        );\n        // If there are no wage chunks, we need to create some\n        if (wageChunks.length === 0) {\n            const dateRanges = splitDateRangeAtNewYear(\n                upsertedAssignment.start_date,\n                upsertedAssignment.end_date\n            );\n            // create the wage chunks with zero hours, because it will be updated soon\n            for (const range of dateRanges) {\n                new WageChunk(this.data).upsertByAssignment(\n                    {\n                        hours: 0,\n                        start_date: range.start_date,\n                        end_date: range.end_date,\n                    },\n                    upsertedAssignment\n                );\n            }\n        }\n\n        // Now we are gauranteed to have wage chunks, so set them to the correct number\n        // of hours\n        wageChunks = new WageChunk(this.data).findAllByAssignment(\n            upsertedAssignment\n        );\n        const delta =\n            +assignment.hours - +(this.find(upsertedAssignment).hours || 0);\n        const perChunkDelta = delta / wageChunks.length;\n        for (const chunk of wageChunks) {\n            new WageChunk(this.data).upsert({\n                ...chunk,\n                hours: (chunk.hours || 0) + perChunkDelta,\n            });\n        }\n\n        // Find the assignment again, to make sure all computed fields are properly computed\n        return this.find(upsertedAssignment);\n    }\n    /**\n     * Returns the list of all assignments for positions that are (a) for the\n     * specified session, and (b) taught by the specified instructor.\n     *\n     * @param {*} session\n     * @param {*} instructor\n     * @returns\n     * @memberof Assignment\n     */\n    findAllBySessionAndInstructor(session, instructor) {\n        session = new Session(this.data).find(session);\n        instructor = new Instructor(this.data).find(instructor);\n        const instructorPositions = new Position(this.data).getForInstructor(\n            instructor\n        );\n        const assignments = this.findAllBySession(session);\n        const positionIds = instructorPositions.map((position) => position.id);\n\n        // Only return assignments for positions that the instructor is instructing\n        return assignments.filter((assignment) =>\n            positionIds.includes(assignment.position_id)\n        );\n    }\n}\n\nclass ActiveOffer extends MockAPIController {\n    constructor(data) {\n        super(data, data.offers);\n    }\n    findByAssignment(assignment) {\n        const matchingAssignment = this._ensureAssignment(assignment);\n\n        // offers are never deleted, only added to the table, so\n        // picking the last one is the same as picking the \"newest\"\n        const offers = findAllById(\n            [matchingAssignment.id],\n            this.data.offers,\n            \"assignment_id\"\n        );\n        const activeOffer = offers[offers.length - 1];\n        if (!activeOffer) {\n            return null;\n        }\n        // an offer is only active if it has been accepted, rejected, or is pending\n        if (\n            activeOffer.status === \"accepted\" ||\n            activeOffer.status === \"rejected\" ||\n            activeOffer.status === \"pending\" ||\n            activeOffer.status === \"provisional\"\n        ) {\n            return activeOffer;\n        }\n        return null;\n    }\n    _ensureAssignment(assignment) {\n        const matchingAssignment = new Assignment(this.data).rawFind(\n            assignment\n        );\n        if (!matchingAssignment) {\n            throw new Error(\n                `Could not find assignment matching ${JSON.stringify(\n                    assignment\n                )}`\n            );\n        }\n        return matchingAssignment;\n    }\n    getAssignment(offer) {\n        return new Assignment(this.data).find({\n            id: offer.assignment_id,\n        });\n    }\n    find(query) {\n        // This is where the magic happens. We create all the data needed for the offer here.\n        const baseOffer = this.rawFind(query);\n        const assignment = this.getAssignment(baseOffer);\n        const { hours, wageChunks } = new Assignment(\n            this.data\n        ).getWageChunkInfo(assignment);\n        const position = new Assignment(this.data).getPosition(assignment);\n        const applicant = new Assignment(this.data).getApplicant(assignment);\n        const instructors = new Position(this.data).getInstructors(position);\n        const contractTemplate = new Position(this.data).getContractTemplate(\n            position\n        );\n\n        const { start_date, end_date } = wageChunkArrayToStartAndEndDates(\n            wageChunks\n        );\n\n        const offer = {\n            accepted_date: null,\n            rejected_date: null,\n            withdrawn_date: null,\n            signature: \"\",\n            nag_count: 0,\n            // All mutable fields should come before `baseOffer` is destructured.\n            // Fields that come after are computed and cannot be directly set.\n            ...baseOffer,\n            contract_template: contractTemplate.template_file,\n            contract_override_pdf: assignment.contract_override_pdf,\n            first_name: applicant.first_name,\n            last_name: applicant.last_name,\n            email: applicant.email,\n            position_code: position.position_code,\n            position_title: position.position_title,\n            position_start_date: start_date,\n            position_end_date: end_date,\n            first_time_ta: null,\n            instructor_contact_desc: formatInstructorsContact(instructors),\n            pay_period_desc: wageChunkArrayToPayPeriodDescription(wageChunks),\n            hours,\n            ta_coordinator_name: \"Dr. Coordinator\",\n            ta_coordinator_email: \"coordinator@utoronto.ca\",\n        };\n\n        return offer;\n    }\n    withdrawByAssignment(assignment) {\n        const offer = this.findByAssignment(this._ensureAssignment(assignment));\n        return this.find(\n            this.upsert({\n                ...offer,\n                status: \"withdrawn\",\n                withdrawn_date: new Date().toISOString(),\n            })\n        );\n    }\n    rejectByAssignment(assignment) {\n        const offer = this.findByAssignment(this._ensureAssignment(assignment));\n        return this.find(\n            this.upsert({\n                ...offer,\n                status: \"rejected\",\n                rejected_date: new Date().toISOString(),\n            })\n        );\n    }\n    acceptByAssignment(assignment) {\n        const offer = this.findByAssignment(this._ensureAssignment(assignment));\n        return this.find(\n            this.upsert({\n                ...offer,\n                status: \"accepted\",\n                accepted_date: new Date().toISOString(),\n            })\n        );\n    }\n    emailByAssignment(assignment) {\n        const offer = this.findByAssignment(this._ensureAssignment(assignment));\n        return this.find(\n            this.upsert({\n                ...offer,\n                status: \"pending\",\n                emailed_date: new Date().toISOString(),\n            })\n        );\n    }\n    nagByAssignment(assignment) {\n        const offer = this.findByAssignment(this._ensureAssignment(assignment));\n        if (!offer.emailed_date) {\n            throw new Error(\n                `The active offer for assignment with id=${assignment.id} has not been emailed yet, so a nag email cannot be sent`\n            );\n        }\n        return this.find(\n            this.upsert({\n                ...offer,\n                nag_count: (offer.nag_count || 0) + 1,\n            })\n        );\n    }\n    createByAssignment(assignment) {\n        const matchingAssignment = this._ensureAssignment(assignment);\n        const offer = this.findByAssignment(matchingAssignment);\n        if (offer) {\n            throw new Error(\n                `An offer already exists for assignment=${JSON.stringify(\n                    assignment\n                )}`\n            );\n        }\n\n        return this.upsert(\n            this.find(\n                this.create({\n                    assignment_id: matchingAssignment.id,\n                    status: \"provisional\",\n                })\n            )\n        );\n    }\n}\n\nexport const assignmentsRoutes = {\n    get: {\n        \"/sessions/:session_id/assignments\": documentCallback({\n            func: (data, params) => {\n                if (params.role === \"admin\") {\n                    return new Assignment(data).findAllBySession(\n                        params.session_id\n                    );\n                }\n                if (params.role === \"instructor\") {\n                    const activeInstructor = new Instructor(\n                        data\n                    ).getFromActiveUser();\n                    if (!activeInstructor) {\n                        return [];\n                    }\n                    return new Assignment(data).findAllBySessionAndInstructor(\n                        params.session_id,\n                        activeInstructor\n                    );\n                }\n                errorUnlessRole(params, \"\");\n            },\n            summary: \"Get assignments associated with a session\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.assignment),\n        }),\n        \"/assignments/:assignment_id\": documentCallback({\n            func: (data, params) =>\n                new Assignment(data).find(params.assignment_id),\n            summary: \"Get an assignment\",\n            returns: docApiPropTypes.assignment,\n        }),\n        \"/assignments/:assignment_id/active_offer\": documentCallback({\n            func: (data, params) =>\n                new Assignment(data).getActiveOffer(params.assignment_id),\n            summary: \"Get the active offer associated with an assignment\",\n            returns: docApiPropTypes.offer,\n        }),\n        \"/assignments/:assignment_id/wage_chunks\": documentCallback({\n            func: (data, params) =>\n                new Assignment(data).getWageChunkInfo(params.assignment_id)\n                    .wageChunks,\n            summary: \"Get the wage_chunks associated with an assignment\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.wageChunk),\n        }),\n    },\n    post: {\n        \"/assignments\": documentCallback({\n            func: (data, params, body) => {\n                errorUnlessRole(params, \"admin\");\n                return new Assignment(data).upsert(body);\n            },\n            posts: docApiPropTypes.assignment,\n            summary: \"Upsert an assignment\",\n            returns: docApiPropTypes.assignment,\n        }),\n        \"/assignments/:assignment_id/wage_chunks\": documentCallback({\n            func: (data, params, body) => {\n                errorUnlessRole(params, \"admin\");\n                return new WageChunk(data).setAllByAssignment(\n                    body,\n                    params.assignment_id\n                );\n            },\n            summary:\n                \"Sets the wage chunks of an assignment to the specified list. The contents of the list are upserted. Omitted wage chunks are deleted.\",\n            posts: wrappedPropTypes.arrayOf(docApiPropTypes.wageChunk),\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.wageChunk),\n        }),\n        \"/assignments/:assignment_id/active_offer/withdraw\": documentCallback({\n            func: (data, params) => {\n                errorUnlessRole(params, \"admin\");\n                return new ActiveOffer(data).withdrawByAssignment(\n                    params.assignment_id\n                );\n            },\n            summary: \"Withdraws the active offer for the specified assignment\",\n            returns: docApiPropTypes.offer,\n        }),\n        \"/assignments/:assignment_id/active_offer/reject\": documentCallback({\n            func: (data, params) => {\n                errorUnlessRole(params, \"admin\");\n                return new ActiveOffer(data).rejectByAssignment(\n                    params.assignment_id\n                );\n            },\n            summary: \"Rejects the active offer for the specified assignment\",\n            returns: docApiPropTypes.offer,\n        }),\n        \"/assignments/:assignment_id/active_offer/accept\": documentCallback({\n            func: (data, params) => {\n                errorUnlessRole(params, \"admin\");\n                return new ActiveOffer(data).acceptByAssignment(\n                    params.assignment_id\n                );\n            },\n            summary: \"Accepts the active offer for the specified assignment\",\n            returns: docApiPropTypes.offer,\n        }),\n        \"/assignments/:assignment_id/active_offer/create\": documentCallback({\n            func: (data, params) => {\n                errorUnlessRole(params, \"admin\");\n                return new ActiveOffer(data).createByAssignment(\n                    params.assignment_id\n                );\n            },\n            summary:\n                \"Creates an offer for the specified assignment, provided there are no active offers for this assignment.\",\n            returns: docApiPropTypes.offer,\n        }),\n        \"/assignments/:assignment_id/active_offer/email\": documentCallback({\n            func: (data, params) => {\n                errorUnlessRole(params, \"admin\");\n                return new ActiveOffer(data).emailByAssignment(\n                    params.assignment_id\n                );\n            },\n            summary: \"Emails the active offer for the specified assignment\",\n            returns: docApiPropTypes.offer,\n        }),\n        \"/assignments/:assignment_id/active_offer/nag\": documentCallback({\n            func: (data, params) => {\n                errorUnlessRole(params, \"admin\");\n                return new ActiveOffer(data).nagByAssignment(\n                    params.assignment_id\n                );\n            },\n            summary:\n                \"Sends a nag email for the active offer for the specified assignment which has already been emailed once\",\n            returns: docApiPropTypes.offer,\n        }),\n    },\n};\n","import {\n    documentCallback,\n    wrappedPropTypes,\n    docApiPropTypes,\n} from \"../defs/doc-generation\";\nimport { User } from \"./active_user\";\n\n// persistent storage for the Debug class\nconst storage = {};\n\nexport class Debug {\n    constructor(data) {\n        this.data = data;\n    }\n    getAllData() {\n        return this.data;\n    }\n    makeSnapshot(name = \"snapshot\") {\n        storage[name] = JSON.stringify(this.getAllData());\n        return this.getAllData();\n    }\n    clearData() {\n        this.makeSnapshot(\"beforeclear\");\n        Object.keys(this.data).forEach((key) => {\n            // Contract templates are supposed to be stored on \"disk\"\n            // and so they shouldn't be cleared when we clear the database\n            if (\n                key === \"available_contract_templates\" ||\n                key === \"contract_templates_by_filename\"\n            ) {\n                return;\n            }\n            this.data[key] = createBlankCopy(this.data[key]);\n        });\n        return this.getAllData();\n    }\n    restoreSnapshot(name = \"snapshot\") {\n        const snapshot = JSON.parse(storage[name] || \"{}\");\n        this.clearData();\n        Object.assign(this.data, snapshot);\n        return this.getAllData();\n    }\n}\n\nexport const debugRoutes = {\n    get: {\n        \"/debug/active_user\": documentCallback({\n            func: (data) => new User(data).getActiveUser(),\n            summary:\n                \"Gets the active user; in debug mode this is specified by posting to `active_user`.\",\n            returns: docApiPropTypes.user,\n        }),\n        \"/debug/users\": documentCallback({\n            func: (data) => new User(data).findAll(),\n            summary: \"Get a list of all users\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.user),\n        }),\n    },\n    post: {\n        \"/debug/active_user\": documentCallback({\n            func: (data, params, body) => {\n                const user = new User(data);\n                const found_user = user.find(body);\n                if (!found_user) {\n                    throw new Error(\n                        `Could not find user matching ${JSON.stringify(body)}`\n                    );\n                }\n                user.setActiveUser(found_user);\n                return user.getActiveUser();\n            },\n            summary:\n                \"Sets the active user; this will override whatever credentials are passed to the server.\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.user),\n            posts: docApiPropTypes.user,\n        }),\n        \"/debug/users\": documentCallback({\n            func: (data, params, body) => new User(data).upsert(body),\n            summary:\n                \"Adds a user; this is done without any permission checks, so it can be used to bootstrap permissions during debug.\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.user),\n            posts: docApiPropTypes.user,\n        }),\n        \"/debug/clear_data\": documentCallback({\n            func: (data) => {\n                return new Debug(data).clearData();\n            },\n            summary: \"Deletes all data in the database\",\n        }),\n        \"/debug/snapshot\": documentCallback({\n            func: (data) => {\n                return new Debug(data).makeSnapshot();\n            },\n            summary: \"Makes a snapshot of the current state of the database\",\n        }),\n        \"/debug/restore_snapshot\": documentCallback({\n            func: (data) => {\n                return new Debug(data).restoreSnapshot();\n            },\n            summary: \"Restores the last snapshot of the database\",\n        }),\n    },\n};\n\n/**\n * Returns the blank value of the same type\n * as the passed-in data\n *\n * @param {*} data\n * @returns\n */\nfunction createBlankCopy(data) {\n    if (typeof data === \"object\") {\n        if (data instanceof Array) {\n            return [];\n        } else {\n            return {};\n        }\n    } else if (typeof data === \"string\") {\n        return \"\";\n    } else {\n        // If `data` is not of type string, array or object\n        // use the constructor, which will return blank value\n        // of that particular type.\n        return data.constructor();\n    }\n}\n","import Route from \"route-parser\";\nimport { mockData } from \"./data\";\nimport { sessionsRoutes } from \"./sessions\";\nimport { templatesRoutes } from \"./contract_templates\";\nimport { positionsRoutes } from \"./positions\";\nimport { instructorsRoutes } from \"./instructors\";\nimport { documentCallback } from \"../defs/doc-generation\";\nimport { assignmentsRoutes } from \"./assignments\";\nimport { applicantsRoutes } from \"./applicants\";\nimport { applicationsRoutes } from \"./applications\";\nimport { wageChunkRoutes } from \"./wage_chunks\";\nimport { debugRoutes } from \"./debug\";\nimport { activeUserRoutes, User } from \"./active_user\";\n\n/**\n * Mock API server that runs locally; useuful for demo purposes.\n *\n * @module\n */\n\nexport class MockAPI {\n    routePrefix = \"/api/v1\";\n    // a list of selectors for each route\n    getRoutes = Object.assign(\n        {},\n        sessionsRoutes.get,\n        templatesRoutes.get,\n        positionsRoutes.get,\n        instructorsRoutes.get,\n        assignmentsRoutes.get,\n        applicantsRoutes.get,\n        applicationsRoutes.get,\n        wageChunkRoutes.get,\n        debugRoutes.get,\n        activeUserRoutes.get,\n        {\n            \"/all_data\": documentCallback({\n                func: (data) => data,\n                exclude: true,\n            }),\n        }\n    );\n    postRoutes = Object.assign(\n        {},\n        sessionsRoutes.post,\n        templatesRoutes.post,\n        positionsRoutes.post,\n        instructorsRoutes.post,\n        assignmentsRoutes.post,\n        applicantsRoutes.post,\n        applicationsRoutes.post,\n        wageChunkRoutes.post,\n        debugRoutes.post,\n        activeUserRoutes.post\n    );\n\n    constructor(seedData) {\n        this.active = false;\n        this.data = seedData;\n        this._getRoutesParsers = Object.keys(this.getRoutes).map((routeStr) => {\n            // We want to peel of the role from the start of the route, but we don't want\n            // to consider it part of the route for documentation purposes. Since `routeStr`\n            // is used to find the callback of the route, we hack `Route` so that `spec`\n            // is the same as `routeStr`.\n            const r = new Route(\"(/:role)\" + routeStr);\n            r.spec = routeStr;\n            return r;\n        });\n        this._postRoutesParsers = Object.keys(this.postRoutes).map(\n            (routeStr) => {\n                // We want to peel of the role from the start of the route, but we don't want\n                // to consider it part of the route for documentation purposes. Since `routeStr`\n                // is used to find the callback of the route, we hack `Route` so that `spec`\n                // is the same as `routeStr`.\n                const r = new Route(\"(/:role)\" + routeStr);\n                r.spec = routeStr;\n                return r;\n            }\n        );\n    }\n\n    /**\n     * Make a mock `apiGET` call. Always returns an object of\n     * the form\n     * `{status: ..., message: ..., payload: ...}`\n     * This method is bound, so it is safe to pass this function around.\n     *\n     * @memberof MockAPI\n     * @param {string} url An API route without `/api/v1` (e.g., `/sessions`)\n     */\n    apiGET = (url) => {\n        for (const route of this._getRoutesParsers) {\n            const match = route.match(url);\n            // if we have a match, run the selector with the parsed data\n            if (match) {\n                try {\n                    this.authenticateActiveUserBasedOnRole(match.role);\n                    const payload = this.getRoutes[route.spec](\n                        this.data,\n                        match\n                    );\n\n                    return {\n                        status: \"success\",\n                        message: \"\",\n                        payload,\n                    };\n                } catch (e) {\n                    return { status: \"error\", message: e.toString() };\n                }\n            }\n        }\n        return {\n            status: \"error\",\n            message: `could not find route matching ${url}`,\n        };\n    };\n\n    /**\n     * Make a mock `apiPOST` call. Always returns an object of\n     * the form\n     * `{status: ..., message: ..., payload: ...}`\n     * This method is bound, so it is safe to pass this function around.\n     *\n     * @memberof MockAPI\n     * @param {string} url An API route without `/api/v1` (e.g., `/sessions`)\n     * @param {object} body The body of a post request. This should be an object, *not* a JSON string.\n     */\n    apiPOST = (url, body) => {\n        for (const route of this._postRoutesParsers) {\n            const match = route.match(url);\n            // if we have a match, run the selector with the parsed data\n            if (match) {\n                try {\n                    this.authenticateActiveUserBasedOnRole(match.role);\n                    const payload = this.postRoutes[route.spec](\n                        this.data,\n                        match,\n                        body\n                    );\n                    return {\n                        status: \"success\",\n                        message: \"\",\n                        payload,\n                    };\n                } catch (e) {\n                    return { status: \"error\", message: e.toString() };\n                }\n            }\n        }\n        return {\n            status: \"error\",\n            message: `could not find route matching ${url}`,\n        };\n    };\n\n    /**\n     * Authenticates the `active_user` as having the role `role`.\n     * If the user is not authenticated, an error is thrown.\n     *\n     * @param {string} role\n     * @returns\n     * @memberof MockAPI\n     */\n    authenticateActiveUserBasedOnRole(role) {\n        if (role == null) {\n            return;\n        }\n        const active_user = new User(this.data).getActiveUser();\n        if (active_user == null) {\n            return;\n        }\n        if (!active_user.roles.includes(role)) {\n            throw new Error(\n                `Not authenticated for accessing routes with prefix /${role}`\n            );\n        }\n    }\n\n    /**\n     * Replaces the global `window.fetch` object with calls to `apiGET` and\n     * `apiPOST`. This means that true network requests will no longer\n     * work.\n     *\n     * @param {number} [delay=1000]\n     * @memberof MockAPI\n     */\n    replaceGlobalFetch(delay = 1000) {\n        if (this.active) {\n            return;\n        }\n        this.active = true;\n        this._origFetch = fetch;\n        window.fetch = async (url, init = {}) => {\n            // Parse the URL first. We only want the pathname\n            const parsedURL = new URL(url, \"http://dummy.com\");\n            url = parsedURL.pathname;\n            // Make sure the url doesn't start with \"/api/v1\"\n            url = url.startsWith(this.routePrefix)\n                ? url.replace(this.routePrefix, \"\")\n                : url;\n            let mockResponse;\n            if (init.method === \"GET\") {\n                mockResponse = this.apiGET(url);\n            } else {\n                let body = init.body;\n                if (typeof body === \"string\") {\n                    body = JSON.parse(body);\n                }\n                mockResponse = this.apiPOST(url, body);\n            }\n            // eslint-disable-next-line\n            console.log(\n                `MockAPI ${init.method} Request.`,\n                url,\n                init,\n                \"Reponding with\",\n                mockResponse\n            );\n            // Create a `Response` object to return so that we fully immitate\n            // the `fetch` api.\n            const responseObj = new Response(\n                new Blob([JSON.stringify(mockResponse)], {\n                    type: \"application/json\",\n                }),\n                { status: 200, statusText: \"OK\" }\n            );\n            return new Promise((resolve) => {\n                window.setTimeout(() => resolve(responseObj), delay);\n            });\n        };\n    }\n\n    /**\n     * Restore the global `window.fetch` to what the browser provides.\n     * If `window.fetch` has not been overridden, this function does nothing.\n     *\n     * @memberof MockAPI\n     */\n    restoreGlobalFetch() {\n        this.active = false;\n        window.fetch = this._origFetch || fetch;\n    }\n}\n\nconst mockAPI = new MockAPI(mockData);\nexport { mockAPI, mockData };\n","/**\n * Tools for generating documentation\n */\n\nimport PropTypes from \"prop-types\";\nimport RouteParser from \"route-parser\";\nimport { generatePropTypes } from \"./prop-types\";\n\nclass CallAtom {\n    constructor(prop, args) {\n        this.name = prop;\n        this.args = args;\n    }\n    toString() {\n        if (this.args == null) {\n            return \"\" + this.name;\n        }\n        return \"\" + this.name + \"(\" + this.args.join(\", \") + \")\";\n    }\n}\nfunction createCallChain(chain = [], prop, args) {\n    return chain.concat([new CallAtom(prop, args)]);\n}\n/**\n * A proxy to wrap `PropTypes` so that the call chain can be recorded.\n * For example, `PropTypes.bool.isRequired` would have the added method `.callChain`\n * which would return an array of `CallAtom` objects consisting of `bool` and `isRequired`.\n * This can be used to generate documentation from existing proptype definitions.\n *\n * @param {*} obj\n * @param {*} [callChain=[]]\n * @returns\n */\nfunction propTypesProxy(obj, callChain = []) {\n    const handler = {\n        get(obj, prop, receiver) {\n            if (prop === \"callChain\") {\n                return callChain;\n            } else if (prop === \"toJSON\") {\n                return () => callChain;\n            }\n            const ret = Reflect.get(obj, prop, receiver);\n            if (ret instanceof Object) {\n                return propTypesProxy(ret, createCallChain(callChain, prop));\n            }\n            return ret;\n        },\n        apply(obj, thisArg, args) {\n            const lastProp = callChain.pop() || { name: \"<root>\" };\n            const ret = Reflect.apply(obj, thisArg, args);\n            if (ret instanceof Object) {\n                return propTypesProxy(\n                    ret,\n                    createCallChain(callChain, lastProp.name, args)\n                );\n            }\n            return ret;\n        },\n        ownKeys(obj) {\n            return [...Reflect.ownKeys(obj), \"callChain\", \"toJSON\"];\n        },\n    };\n\n    return new Proxy(obj, handler);\n}\nconst wrappedPropTypes = propTypesProxy(PropTypes);\n/**\n * PropType defintions for the API that have been wrapped in\n * a proxy so they can be convereted into documentation.\n */\nconst docApiPropTypes = generatePropTypes(wrappedPropTypes);\n\nconst PROPTYPES_TO_SWAGGER_TYPES = {\n    string: \"string\",\n    number: \"number\",\n    bool: \"boolean\",\n    object: \"object\",\n    array: \"array\",\n    any: {},\n};\n\nfunction wrappedPropTypesToSwagger(pt) {\n    const ret = {};\n    if (!pt.callChain) {\n        // eslint-disable-next-line\n        console.warn(\n            \"Attempting to compute swagger values for non-wrapped object\",\n            pt\n        );\n    } else {\n        // We are a proxied PropTypes object\n        //\n        // PropTypes calls can be at most two long with the second argument\n        // being `.isRequired`\n        const [type, isRequired] = pt.callChain;\n        const requiredList = [];\n        if (isRequired) {\n            ret[\"required\"] = true;\n        }\n        if (type.args) {\n            // in this case, we were a PropTypes function called with some arguments\n            switch (type.name) {\n                case \"shape\":\n                    // in this case we're passing in an object with properties to be validated\n                    ret[\"type\"] = \"object\";\n                    ret[\"properties\"] = {};\n                    for (const [key, val] of Object.entries(type.args[0])) {\n                        const swaggerVal = wrappedPropTypesToSwagger(val);\n                        if (swaggerVal[\"required\"]) {\n                            // Required properties in swagger must be listed up-front (i.e., as a list\n                            // of property names, not as an attribute of an individual property),\n                            // so hoist them.\n                            requiredList.push(key);\n                            delete swaggerVal[\"required\"];\n                        }\n                        ret[\"properties\"][key] = swaggerVal;\n                    }\n                    if (requiredList.length > 0) {\n                        ret[\"required\"] = requiredList;\n                    }\n                    break;\n                case \"arrayOf\":\n                    ret[\"type\"] = \"array\";\n                    ret[\"items\"] = wrappedPropTypesToSwagger(type.args[0]);\n                    break;\n                case \"oneOf\":\n                    // XXX assuming `oneOf` is only used for strings\n                    ret[\"type\"] = \"string\";\n                    ret[\"enum\"] = type.args[0];\n                    break;\n                case \"oneOfType\":\n                    ret[\"oneOf\"] = type.args[0].map(wrappedPropTypesToSwagger);\n                    break;\n                default:\n                    break;\n            }\n        } else {\n            if (PROPTYPES_TO_SWAGGER_TYPES[type.name]) {\n                // in this case, we're a basic swagger type\n                ret[\"type\"] = PROPTYPES_TO_SWAGGER_TYPES[type.name];\n            }\n        }\n    }\n\n    return ret;\n}\n\n/**\n * Wrap `payload` in a standard API response formatted\n * for openapi\n *\n * @param {object} payload\n * @returns {object}\n */\nfunction wrapInStandardApiResponseForSwagger(payload = { type: \"object\" }) {\n    return {\n        type: \"object\",\n        properties: {\n            status: {\n                type: \"string\",\n                enum: [\"success\", \"error\"],\n            },\n            message: { type: \"string\" },\n            payload,\n        },\n        required: [\"status\"],\n    };\n}\n\n/**\n * Take a path template in `\"route-parser\"`\n * form, e.g. `/sessions/:session_id`, and encode it for\n * consumption by swagger, e.g., `/sessions/{session_id}`.\n *\n * @param {string} url\n * @returns {string}\n */\nfunction urlTemplateToSwagger(url) {\n    // get the template variables\n    // using a trick: have the RoutePasers\n    // parse it's own template, giving us\n    // a list of variables in the process\n    const parsed = RouteParser(url);\n    const templateVars = Object.keys(parsed.match(parsed.spec));\n    const subs = {};\n    for (const templateVar of templateVars) {\n        subs[templateVar] = \"{\" + templateVar + \"}\";\n    }\n    return { url: decodeURI(parsed.reverse(subs)), templateVars };\n}\n\n/**\n * Convert the `docs` attribute from a callback that\n * has been documented with `documentCallback` into an openapi\n * object.\n *\n * @param {object} docs\n * @param {string[]} [templateVars=[]] - list of template variables in the route\n * @returns {object} - openapi object\n */\nfunction documentedCallbackToSwagger(docs, templateVars = []) {\n    const ret = { responses: { default: {} } };\n    if (!docs) {\n        return ret;\n    }\n    // Routes are all prefixed. `admin` can access all routes.\n    // other routes are restricted depending on the list specified in `roles`.\n    const prefixRoles = [\"admin\", ...(docs.roles || [])];\n    ret.summary =\n        `(prefixes: ${prefixRoles.map((x) => \"/\" + x).join(\", \")}) ` +\n        docs.summary;\n    // If there are templateVars, they should become `paramters`\n    if (templateVars.length > 0) {\n        ret.parameters = templateVars.map((x) => ({\n            name: x,\n            in: \"path\",\n            description: x,\n            required: true,\n        }));\n    }\n    // `docs.returns` holds information about what the route will return\n    if (docs.returns) {\n        ret.responses.default = {\n            content: {\n                \"application/json\": {\n                    schema: wrapInStandardApiResponseForSwagger(\n                        wrappedPropTypesToSwagger(docs.returns)\n                    ),\n                },\n            },\n        };\n    }\n    // `docs.posts` holds information about what you can put in the\n    // requestBody\n    if (docs.posts) {\n        ret.requestBody = {\n            content: {\n                \"application/json\": {\n                    schema: wrappedPropTypesToSwagger(docs.posts),\n                },\n            },\n        };\n    }\n\n    return ret;\n}\n\n/**\n * Turn mockAPI routes into swagger-ui JSON object\n *\n * @param {{getRoutes: object, postRoutes: object}} [mockAPI={}]\n * @returns {object} - openapi configuration\n */\nfunction mockApiRoutesAsSwaggerPaths(mockAPI = {}) {\n    const { getRoutes = {}, postRoutes = {} } = mockAPI;\n    const ret = {};\n    for (const [path, val] of Object.entries(getRoutes)) {\n        const { url: templatePath, templateVars } = urlTemplateToSwagger(path);\n        if (val.docs && val.docs.exclude) {\n            continue;\n        }\n        ret[templatePath] = Object.assign(ret[templatePath] || {}, {\n            get: documentedCallbackToSwagger(val.docs, templateVars),\n        });\n    }\n    for (const [path, val] of Object.entries(postRoutes)) {\n        const { url: templatePath, templateVars } = urlTemplateToSwagger(path);\n        if (val.docs && val.docs.exclude) {\n            continue;\n        }\n        ret[templatePath] = Object.assign(ret[templatePath] || {}, {\n            post: documentedCallbackToSwagger(val.docs, templateVars),\n        });\n    }\n\n    // The initial segment of each route is a \"tag\"; get a unique\n    // list of each of these tags and then for annotating the routes\n    const tags = Array.from(\n        new Set(\n            Object.keys(ret)\n                .map((x) => x.split(\"/\")[1])\n                .filter((x) => x)\n        )\n    );\n    // If a route contains one of the \"tags\", then it should be annotated\n    // accordingly (with each relavent tag)\n    for (const [path, info] of Object.entries(ret)) {\n        const applicableTags = tags.filter((x) => path.includes(x));\n        if (info.get && applicableTags.length > 0) {\n            info.get.tags = applicableTags;\n        }\n        if (info.post && applicableTags.length > 0) {\n            info.post.tags = applicableTags;\n        }\n    }\n\n    // Alphabetize the routes so they display in a sensible order.\n    const sortedRet = {};\n    for (const path of Object.keys(ret).sort()) {\n        sortedRet[path] = ret[path];\n    }\n\n    return sortedRet;\n}\n\n/**\n * Document a function with attributes for autogenerating openapi\n * specifications from.\n *\n * @param {*} { func, exclude = false, ...attrs }\n * @returns\n */\nfunction documentCallback({ func, exclude = false, ...attrs }) {\n    // create a wrapped function that we can stuff attributes onto\n    const ret = (...args) => func(...args);\n    ret.docs = {\n        exclude,\n        ...attrs,\n    };\n    return ret;\n}\n\nexport {\n    wrappedPropTypes,\n    wrappedPropTypesToSwagger,\n    urlTemplateToSwagger,\n    mockApiRoutesAsSwaggerPaths,\n    documentCallback,\n    docApiPropTypes,\n};\n","import { error } from \"react-notification-system-redux\";\n\n// these properties are for `react-notification-system-redux`\nconst defaultNotifProps = {\n    position: \"tr\",\n    autoDismiss: 10,\n    title: \"Error\",\n};\n\nexport const fetchError = (payload) =>\n    error({\n        ...defaultNotifProps,\n        title: \"Error fetching data\",\n        message: payload,\n    });\n\nexport const upsertError = (payload) =>\n    error({\n        ...defaultNotifProps,\n        title: \"Error updating/inserting data\",\n        message: payload,\n    });\n\nexport const deleteError = (payload) =>\n    error({\n        ...defaultNotifProps,\n        title: \"Error deleting data\",\n        message: payload,\n    });\n\n// General error for when a more specific error\n// type is not known\nexport const apiError = (payload) =>\n    error({\n        ...defaultNotifProps,\n        title: \"API Error\",\n        message: payload,\n    });\n","import { API_INTERACTION_START, API_INTERACTION_END } from \"../constants\";\n\n// actions\nexport const apiInteractionStart = (id, message) => ({\n    type: API_INTERACTION_START,\n    payload: { id, message },\n});\nexport const apiInteractionEnd = (id) => ({\n    type: API_INTERACTION_END,\n    payload: { id },\n});\n","export const API_INTERACTION_START = \"API_INTERACTION_START\";\nexport const API_INTERACTION_END = \"API_INTERACTION_END\";\n\n/* Constants were batch-created with the following code:\n\n    let wrap = x => x.map(y => `export const ${y} = \"${y}\";`);\n    console.log(\n        [\n            \"session\",\n            \"instructor\",\n            \"position\",\n            \"assignment\",\n            \"offer\",\n            \"contract_template\",\n            \"application\",\n            \"wage_chunk\"\n        ]\n            .map(x => {\n                x = x.toUpperCase();\n                return [`// \\`${x.toLowerCase()}\\`-related constants`]\n                    .concat(\n                        wrap([\n                            `FETCH_${x}S_SUCCESS`,\n                            `FETCH_ONE_${x}_SUCCESS`,\n                            `UPSERT_ONE_${x}_SUCCESS`,\n                            `DELETE_ONE_${x}_SUCCESS`\n                        ])\n                    )\n                    .join(\"\\n\");\n            })\n            .join(\"\\n\\n\")\n    );\n*/\n\n// `session`-related constants\nexport const FETCH_SESSIONS_SUCCESS = \"FETCH_SESSIONS_SUCCESS\";\nexport const FETCH_ONE_SESSION_SUCCESS = \"FETCH_ONE_SESSION_SUCCESS\";\nexport const UPSERT_ONE_SESSION_SUCCESS = \"UPSERT_ONE_SESSION_SUCCESS\";\nexport const DELETE_ONE_SESSION_SUCCESS = \"DELETE_ONE_SESSION_SUCCESS\";\nexport const SET_ACTIVE_SESSION = \"SET_ACTIVE_SESSION\";\n\n// `instructor`-related constants\nexport const FETCH_INSTRUCTORS_SUCCESS = \"FETCH_INSTRUCTORS_SUCCESS\";\nexport const FETCH_ONE_INSTRUCTOR_SUCCESS = \"FETCH_ONE_INSTRUCTOR_SUCCESS\";\nexport const UPSERT_ONE_INSTRUCTOR_SUCCESS = \"UPSERT_ONE_INSTRUCTOR_SUCCESS\";\nexport const DELETE_ONE_INSTRUCTOR_SUCCESS = \"DELETE_ONE_INSTRUCTOR_SUCCESS\";\nexport const ADD_INSTRUCTOR_TO_POSITION_SUCCESS =\n    \"ADD_INSTRUCTOR_TO_POSITION_SUCCESS\";\n\n// `position`-related constants\nexport const FETCH_POSITIONS_SUCCESS = \"FETCH_POSITIONS_SUCCESS\";\nexport const FETCH_ONE_POSITION_SUCCESS = \"FETCH_ONE_POSITION_SUCCESS\";\nexport const UPSERT_POSITIONS_SUCCESS = \"UPSERT_POSITIONS_SUCCESS\";\nexport const UPSERT_ONE_POSITION_SUCCESS = \"UPSERT_ONE_POSITION_SUCCESS\";\nexport const DELETE_ONE_POSITION_SUCCESS = \"DELETE_ONE_POSITION_SUCCESS\";\n\n// `assignment`-related constants\nexport const FETCH_ASSIGNMENTS_SUCCESS = \"FETCH_ASSIGNMENTS_SUCCESS\";\nexport const FETCH_ONE_ASSIGNMENT_SUCCESS = \"FETCH_ONE_ASSIGNMENT_SUCCESS\";\nexport const UPSERT_ONE_ASSIGNMENT_SUCCESS = \"UPSERT_ONE_ASSIGNMENT_SUCCESS\";\nexport const DELETE_ONE_ASSIGNMENT_SUCCESS = \"DELETE_ONE_ASSIGNMENT_SUCCESS\";\n\n// `offer`-related constants\nexport const FETCH_OFFERS_SUCCESS = \"FETCH_OFFERS_SUCCESS\";\nexport const FETCH_ONE_OFFER_SUCCESS = \"FETCH_ONE_OFFER_SUCCESS\";\nexport const UPSERT_ONE_OFFER_SUCCESS = \"UPSERT_ONE_OFFER_SUCCESS\";\nexport const DELETE_ONE_OFFER_SUCCESS = \"DELETE_ONE_OFFER_SUCCESS\";\nexport const SET_OFFER_ACCEPTED_SUCCESS = \"SET_OFFER_ACCEPTED_SUCCESS\";\nexport const SET_OFFER_REJECTED_SUCCESS = \"SET_OFFER_REJECTED_SUCCESS\";\nexport const OFFER_CREATE_SUCCESS = \"OFFER_CREATE_SUCCESS\";\nexport const OFFER_EMAIL_SUCCESS = \"OFFER_EMAIL_SUCCESS\";\nexport const OFFER_NAG_SUCCESS = \"OFFER_NAG_SUCCESS\";\nexport const OFFER_WITHDRAW_SUCCESS = \"OFFER_WITHDRAW_SUCCESS\";\n\n// `contract_template`-related constants\nexport const FETCH_CONTRACT_TEMPLATES_SUCCESS =\n    \"FETCH_CONTRACT_TEMPLATES_SUCCESS\";\nexport const FETCH_ONE_CONTRACT_TEMPLATE_SUCCESS =\n    \"FETCH_ONE_CONTRACT_TEMPLATE_SUCCESS\";\nexport const UPSERT_ONE_CONTRACT_TEMPLATE_SUCCESS =\n    \"UPSERT_ONE_CONTRACT_TEMPLATE_SUCCESS\";\nexport const DELETE_ONE_CONTRACT_TEMPLATE_SUCCESS =\n    \"DELETE_ONE_CONTRACT_TEMPLATE_SUCCESS\";\nexport const FETCH_ALL_CONTRACT_TEMPLATES_SUCCESS =\n    \"FETCH_ALL_CONTRACT_TEMPLATES_SUCCESS\";\n\n// `application`-related constants\nexport const FETCH_APPLICATIONS_SUCCESS = \"FETCH_APPLICATIONS_SUCCESS\";\nexport const FETCH_ONE_APPLICATION_SUCCESS = \"FETCH_ONE_APPLICATION_SUCCESS\";\nexport const UPSERT_ONE_APPLICATION_SUCCESS = \"UPSERT_ONE_APPLICATION_SUCCESS\";\nexport const DELETE_ONE_APPLICATION_SUCCESS = \"DELETE_ONE_APPLICATION_SUCCESS\";\n\n// `wage_chunk`-related constants\nexport const FETCH_WAGE_CHUNKS_SUCCESS = \"FETCH_WAGE_CHUNKS_SUCCESS\";\nexport const FETCH_WAGE_CHUNKS_FOR_ASSIGNMENT_SUCCESS =\n    \"FETCH_WAGE_CHUNKS_FOR_ASSIGNMENT_SUCCESS\";\nexport const UPSERT_WAGE_CHUNKS_FOR_ASSIGNMENT_SUCCESS =\n    \"UPSERT_WAGE_CHUNKS_FOR_ASSIGNMENT_SUCCESS\";\nexport const FETCH_ONE_WAGE_CHUNK_SUCCESS = \"FETCH_ONE_WAGE_CHUNK_SUCCESS\";\nexport const UPSERT_ONE_WAGE_CHUNK_SUCCESS = \"UPSERT_ONE_WAGE_CHUNK_SUCCESS\";\nexport const DELETE_ONE_WAGE_CHUNK_SUCCESS = \"DELETE_ONE_WAGE_CHUNK_SUCCESS\";\n\n// `applicant`-related constants\nexport const FETCH_APPLICANTS_SUCCESS = \"FETCH_APPLICANTS_SUCCESS\";\nexport const FETCH_ONE_APPLICANT_SUCCESS = \"FETCH_ONE_APPLICANT_SUCCESS\";\nexport const UPSERT_ONE_APPLICANT_SUCCESS = \"UPSERT_ONE_APPLICANT_SUCCESS\";\nexport const DELETE_ONE_APPLICANT_SUCCESS = \"DELETE_ONE_APPLICANT_SUCCESS\";\nexport const ADD_APPLICANT_TO_SESSION_SUCCESS =\n    \"ADD_APPLICANT_TO_SESSION_SUCCESS\";\n\n// `user`/`active_user` constants\nexport const FETCH_ACTIVE_USER_SUCCESS = \"FETCH_ACTIVE_USER_SUCCESS\";\nexport const SET_ACTIVE_USER_ROLE_SUCCESS = \"SET_ACTIVE_USER_ROLE_SUCCESS\";\nexport const FETCH_USERS_SUCCESS = \"FETCH_USERS_SUCCESS\";\nexport const UPSERT_USERS_SUCCESS = \"UPSERT_USERS_SUCCESS\";\n\n// `debug` constants\nexport const DEBUG_SET_ACTIVE_USER_SUCCESS = \"DEBUG_SET_ACTIVE_USER_SUCCESS\";\n\n// global constants\nexport const SET_GLOBALS = \"SET_GLOBALS\";\n","import uuid from \"uuid-random\";\nimport PropTypes from \"prop-types\";\nimport { apiError } from \"./errors\";\nimport { apiInteractionStart, apiInteractionEnd } from \"./status\";\n\n/**\n * Turn an array of items into a hash of items indexed\n * by the value of `indexBy`\n *\n * @export\n * @param {array} l\n * @param {string} [indexBy=\"id\"]\n * @returns {object[]}\n */\nexport function arrayToHash(l, indexBy = \"id\") {\n    if (!Array.isArray(l)) {\n        return l;\n    }\n    const ret = {};\n    for (const d of l) {\n        ret[d[indexBy]] = d;\n    }\n    return ret;\n}\n\n/**\n * Creates an action function that returns an object of the form\n * ```\n *    {\n *        type: TYPE,\n *        payload: payload\n *    }\n * ```\n * This factory function can be used if your action is of this standard form.\n *\n * @export\n * @param {string} type\n * @returns {function(object): {type: string, payload: object}}\n */\nexport function actionFactory(type) {\n    return (payload) => ({\n        type,\n        payload,\n    });\n}\n\n/**\n * Split an object into two objects. One with only properties listed in\n * `props` and the other with all remaining properties.\n *\n * @param {*} obj - object to be split\n * @param {*} [props=[]] - list of properties to split out\n * @returns {[object, object]} list of two objects. The first contains all properties not listed in `props`. The second contains all properties listed in `props`\n */\nexport function splitObjByProps(obj, props = []) {\n    const ret = {},\n        filtered = {};\n    for (const prop of props) {\n        if (Object.hasOwnProperty.call(obj, prop)) {\n            filtered[prop] = obj[prop];\n        }\n    }\n    for (const prop in obj) {\n        if (!Object.hasOwnProperty.call(filtered, prop)) {\n            ret[prop] = obj[prop];\n        }\n    }\n    return [ret, filtered];\n}\n\n/**\n * Create a function that takes an `obj` object. It effectively does\n * `obj[outPropName] = obj[inPropName].id; delete obj[inPropName]` but\n * is non-destructive.\n *\n * @export\n * @param {string} inPropName\n * @param {string} outPropName\n * @param {boolean} [isArrayOfIds=false]\n * @returns\n */\nexport function flattenIdFactory(\n    inPropName,\n    outPropName,\n    isArrayOfIds = false\n) {\n    return function (obj) {\n        // if the `inPropName` field doesn't exist, don't change anything\n        // and don't error!\n        if (obj[inPropName] == null) {\n            return obj;\n        }\n        const [ret, filtered] = splitObjByProps(obj, [inPropName]);\n        if (isArrayOfIds) {\n            ret[outPropName] = filtered[inPropName].map((x) => x.id);\n        } else {\n            ret[outPropName] = filtered[inPropName].id;\n        }\n        return ret;\n    };\n}\n/**\n * Create a dispatcher that validates `payload` accoring to the specified\n * `propTypes`. If validation fails, a warning will be printed to the console\n * and exectution of the dispatcher will stop. This function also wraps the\n * dispatch in `apiInteractionStart` and `apiInteractionEnd` actions.\n *\n * If the action only accepts one argument, then `propTypes` should be a single\n * `PropTypes` object (e.g., `{id: PropTypes.any.isRequired}`). If the action\n * accepts multiple arguments, `propTypes` should be an array (of length the number\n * of accepted arguments) of `PropTypes` objects.\n *\n * @export\n * @param {object} obj An object with information to create an action\n * @param {function} obj.dispatcher The action that will be dispatched after validation passes\n * @param {string} obj.name The name of the action\n * @param {string} obj.description A description of what the action does\n * @param {?(PropTypes|PropTypes[])} obj.propTypes A PropTypes object or an array of PropTypes objects\n * @param {?(function|boolean)} obj.onErrorDispatch Function that returns an action to be executed on error, or boolean `true` to autogenerate an error action\n * @returns {function} A redux-thunk action\n */\nexport function validatedApiDispatcher({\n    dispatcher,\n    // eslint-disable-next-line react/forbid-foreign-prop-types\n    propTypes,\n    name,\n    description,\n    onErrorDispatch,\n}) {\n    return (...args) => {\n        // we return a new dispatcher that performs some validation\n        // and then dispatches as usual\n        return async (dispatch) => {\n            // validate `args`. `args` is an array containing the arguments.\n            // if propTypes is an array, it lists the propTypes for every argument,\n            // otherwise there is just one argument.\n\n            let wasPropTypesError = false;\n            // This function performs the actual PropType check with extra arguments that\n            // will make the warnings in the console more descriptive\n            function propTypeCheck(propTypes, arg) {\n                PropTypes.checkPropTypes(\n                    propTypes,\n                    arg || {},\n                    \"api action argument\",\n                    name,\n                    () => {\n                        wasPropTypesError = true;\n                    }\n                );\n            }\n            if (Array.isArray(propTypes)) {\n                if (propTypes.length !== args.length) {\n                    wasPropTypesError = true;\n                } else {\n                    for (let i = 0; i < propTypes.length; i++) {\n                        propTypeCheck(propTypes[i], args[i]);\n                    }\n                }\n            } else if (propTypes) {\n                propTypeCheck(propTypes, args[0]);\n            }\n            if (wasPropTypesError) {\n                dispatch(\n                    apiError(\n                        `Invalid arguments to ${name} while attempting action \"${description}\"`\n                    )\n                );\n                return;\n            }\n\n            // Declare the start of an API interaction. Generate a `statusId`\n            // so that we can specify which API interaction is ending (since multiple\n            // ones may be going at the same time).\n            const statusId = uuid();\n            dispatch(apiInteractionStart(statusId, description));\n            try {\n                // We need to await so that promise errors get thrown\n                // as real errors\n                return await dispatch(dispatcher(...args));\n            } catch (e) {\n                console.warn(\"API Error\", e);\n                if (onErrorDispatch) {\n                    if (onErrorDispatch instanceof Function) {\n                        dispatch(onErrorDispatch(e));\n                    } else {\n                        dispatch(\n                            apiError(\n                                `Error encountered during \"${description}\"`\n                            )\n                        );\n                    }\n                } else {\n                    throw e;\n                }\n            } finally {\n                // Always declare the API interaction done, even\n                // if there was an error somewhere along the way.\n                dispatch(apiInteractionEnd(statusId));\n            }\n        };\n    };\n}\n","/*\n * A collection of untilty functions for interfacing with the API\n */\n\nconst API_URL = \"/api/v1\";\nconst FETCH_INIT = {\n    credentials: \"same-origin\",\n    headers: {\n        \"Content-Type\": \"application/json\",\n    },\n};\n\n/**\n * Error thrown whenever an api call returns with `status===\"error\"`\n *\n * @class ApiError\n * @extends {Error}\n */\nclass ApiError extends Error {\n    constructor(resp) {\n        const errorMessage = resp.message;\n        super(errorMessage);\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, ApiFetchError);\n        }\n        this.response = resp;\n        this.status = resp.status;\n    }\n}\n\n/**\n * Error thrown whenever an api fetch request\n * returns with a status other than 200\n *\n * @class ApiFetchError\n * @extends {ApiError}\n */\nclass ApiFetchError extends ApiError {\n    constructor(resp, path) {\n        const errorMessage = `Got status ${resp.status} ${\n            resp.statusText\n        } when fetching ${API_URL + path}`;\n        super({ message: errorMessage });\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, ApiFetchError);\n        }\n        this.response = resp;\n        this.status = resp.status;\n    }\n}\n\n// Ensure that `path` starts with a `/`\nfunction _ensurePath(path) {\n    return path.startsWith(\"/\") ? path : \"/\" + path;\n}\n\n// Process a `fetch` response from the API.\n// Successful responses from the API should be of\n// the form `{status: (\"success\"|\"error\"), message: \"...\", payload: ...}.\n// Throw an error on a failed HTTP request or a `status !== \"success\"`\n// response from the API.\nasync function _processFetchResponse(resp, path) {\n    if (resp.status === 200) {\n        const json = await resp.json();\n        if (json.status !== \"success\") {\n            // If we got random JSON instead of {status: ..., message: ..., payload: ...}\n            // There will be no `json.message`. Provide a default message that will get\n            // overridden in this case\n            throw new ApiError({\n                message: \"Server response did not have `status === 'success`\",\n                ...json,\n            });\n        }\n        return json.payload;\n    }\n    // if we made it this far, there was a bad status\n    // returned during fetch\n    throw new ApiFetchError(resp, path);\n}\n\n/**\n * Do a GET requestion on the specified api route\n *\n * @param {string} path\n * @returns {Promise<object>} Promise containing the processed JSON response\n * @throws {(ApiError|ApiFetchError|Error)} Throws an error if the fetch fails or returns with `status===\"error\"`\n */\nasync function apiGET(path) {\n    // remove a leading \"/\" if there is one in `path`\n    path = _ensurePath(path);\n    const resp = await fetch(API_URL + path, {\n        ...FETCH_INIT,\n        method: \"GET\",\n    });\n    return await _processFetchResponse(resp, path);\n}\n\n/**\n * Do a POST requestion on the specified api route\n *\n * @param {string} path\n * @param {object} [body={}]\n * @returns {Promise<object>} Promise containing the processed JSON response\n * @throws {(ApiError|ApiFetchError|Error)} Throws an error if the fetch fails or returns with `status===\"error\"`\n */\nasync function apiPOST(path, body = {}) {\n    // remove a leading \"/\" if there is one in `path`\n    path = _ensurePath(path);\n    const resp = await fetch(API_URL + path, {\n        ...FETCH_INIT,\n        method: \"POST\",\n        body: JSON.stringify(body),\n    });\n    return await _processFetchResponse(resp, path);\n}\n\nexport { API_URL, ApiError, ApiFetchError, apiGET, apiPOST };\n","/*\n * A set of utility functions to help with creating reducers\n */\n\nimport { combineReducers as _origCombineReducers } from \"redux\";\nimport { createReducer as _origCreateReducer } from \"redux-create-reducer\";\n\n/**\n * Either updates the item `modelData`\n * with id == newItem.id, or appends it.\n *\n * @param {object} modelData\n * @param {object} newItem\n * @returns {object} An updated version of modelData\n */\nexport function upsertItem(modelData, newItem) {\n    let didUpdate = false;\n    const newModelData = modelData.map((item) => {\n        if (item.id === newItem.id) {\n            didUpdate = 1;\n            return newItem;\n        }\n        return item;\n    });\n    if (!didUpdate) {\n        newModelData.push(newItem);\n    }\n    return newModelData;\n}\n\n/**\n * Create a basic reducer for the operations\n *   FETCH_MANY\n *   FETCH_ONE\n *   UPSERT_ONE\n *   DELETE_ONE\n * A basic reducer assumes that `state._modelData` is\n * an array and that each item in that array has an `id`\n * that can be used to determine upserts and deletes, etc..\n *\n * @param {string} FETCH_MANY\n * @param {string} FETCH_ONE\n * @param {string} UPSERT_ONE\n * @param {string} DELETE_ONE\n * @returns {object} An object of reducers suitable for passing to `createReducer`\n */\nexport function createBasicReducerObject(\n    FETCH_MANY,\n    FETCH_ONE,\n    UPSERT_ONE,\n    DELETE_ONE\n) {\n    return {\n        [FETCH_MANY]: (state, action) => ({\n            ...state,\n            _modelData: action.payload,\n        }),\n        [FETCH_ONE]: (state, action) => ({\n            ...state,\n            _modelData: upsertItem(state._modelData, action.payload),\n        }),\n        [UPSERT_ONE]: (state, action) => ({\n            ...state,\n            _modelData: upsertItem(state._modelData, action.payload),\n        }),\n        [DELETE_ONE]: (state, action) => {\n            const deletedItem = action.payload;\n            return {\n                ...state,\n                _modelData: state._modelData.filter(\n                    (item) => item.id !== deletedItem.id\n                ),\n            };\n        },\n    };\n}\n\n/**\n * Wraps \"redux-create-reducer\"'s version of `createReducer` to add\n * a `_storePath` attribute to the initial state and the reducer.\n * `_storePath` is used by `localStoreSelector` to return the local\n * state when passed in the global state. (For example, if\n *    `state = { a: b: localState }`, then `localStoreSelector(state) === localState`.)\n *\n * @param {object} initialState\n * @param {object} handlers\n * @returns\n */\nexport function createReducer(initialState, handlers) {\n    const path = [];\n    function pushToPath(dir) {\n        path.unshift(dir);\n    }\n    // Every isolated state should have a unique id, so generate\n    // a random one.\n    const _storePath = { id: Math.random(), path, pushToPath };\n\n    // add _storePath to the initial state and to the\n    // new reducer\n    initialState._storePath = _storePath;\n    const reducer = _origCreateReducer(initialState, handlers);\n    reducer._storePath = _storePath;\n\n    // For convenience, attach a local store selector to the reducer\n    reducer._localStoreSelector = createLocalStoreSelector(_storePath);\n\n    return reducer;\n}\n\n/**\n * Search `state` for a local state in the location of `_storePath.path`.\n * For example, if `_storePath.path = [\"a\", \"b\"]`, this function will\n * return `state.a.b`.\n *\n * @param {object} state Redux state\n * @param {object} _storePath The `_storePath` object to use for searching `state`\n * @returns\n */\nfunction _localStoreSelector(state, _storePath) {\n    if (state._storePath && state._storePath.id === _storePath.id) {\n        return state;\n    }\n    try {\n        let localState = state;\n        for (const dir of _storePath.path) {\n            localState = localState[dir];\n        }\n        return localState;\n    } catch (e) {\n        // eslint-disable-next-line\n        console.error(\n            \"Searching\",\n            state,\n            \"for local state with path\",\n            _storePath.join(\".\"),\n            \"but encountered an error\"\n        );\n    }\n    return state;\n}\n\n/**\n * Create a selector that, when passed in the global redux state, will search\n * and return a local state based on the information in `_storePath`. This selector\n * can be passed either the local state or the global state. If it is passed the local\n * state, it checks that the `state._storePath.id` field matches `_storePath.id`;\n * if so, this selector immediately returns `state`. Otherwise, use `_storePath.path`\n * to search for the local state. For example, if `_storePath.path = [\"a\", \"b\"]`,\n * the returned selector will return `state.a.b`.\n *\n * @export\n * @param {object} _storePath\n * @param {array} _storePath.path The path to search in the redux state\n * @param {array} _storePath.id The unique id of the local state\n * @returns {Function} A selector that returns the local state (based on `_storePath`) when passed the global state\n */\nexport function createLocalStoreSelector(_storePath) {\n    return (state) => _localStoreSelector(state, _storePath);\n}\n\n/**\n * Wraps \"redux\"'s `combineReducers` function so that `reducer._storePath.pushToPath`\n * is called on all child reducers.\n *\n * Redux's `combineReducers` function creates a new reducer from `model` that dispatches\n * actions to all reducers listed in `model`, but passes them an isolated part of the\n * store instead of passing in the full redux store as `state`. This is great for writing\n * reducers, but it makes things complicated for writing selectors, since, in general,\n * a selector will get passed the whole state, not the isolated part of the state that\n * `combineReducers` supplies. This wrapped version of `combineReducers` adds to a `path`\n * variable that is present in each reducer and which can be passed to a smart selector.\n *\n * @export\n * @param {object} model An object whose values are reducers\n * @returns {Function} A reducer\n */\nexport function combineReducers(model) {\n    const pushToPathCallbacks = [];\n    // recursively call all `pushToPath` functions.\n    // They have been stored in `pushToPathCallbacks`\n    function pushToPath(dir) {\n        for (const func of pushToPathCallbacks) {\n            func(dir);\n        }\n    }\n\n    for (const [dir, reducer] of Object.entries(model)) {\n        if (reducer._storePath) {\n            reducer._storePath.pushToPath(dir);\n            pushToPathCallbacks.push(reducer._storePath.pushToPath);\n        }\n    }\n\n    const newReducer = _origCombineReducers(model);\n    newReducer._storePath = { pushToPath };\n\n    return newReducer;\n}\n","import {\n    FETCH_SESSIONS_SUCCESS,\n    FETCH_ONE_SESSION_SUCCESS,\n    UPSERT_ONE_SESSION_SUCCESS,\n    DELETE_ONE_SESSION_SUCCESS,\n    SET_ACTIVE_SESSION,\n} from \"../constants\";\nimport { createBasicReducerObject, createReducer } from \"./utils\";\n\nconst initialState = {\n    _modelData: [],\n    activeSession: null,\n};\n\n// basicReducers is an object whose keys are FETCH_SESSIONS_SUCCESS, etc,\n// and values are the corresponding reducer functions\nconst basicReducers = createBasicReducerObject(\n    FETCH_SESSIONS_SUCCESS,\n    FETCH_ONE_SESSION_SUCCESS,\n    UPSERT_ONE_SESSION_SUCCESS,\n    DELETE_ONE_SESSION_SUCCESS\n);\n\nexport const sessionsReducer = createReducer(initialState, {\n    ...basicReducers,\n    [SET_ACTIVE_SESSION]: (state, action) => ({\n        ...state,\n        activeSession: action.payload,\n    }),\n});\n","import {\n    FETCH_USERS_SUCCESS,\n    FETCH_ACTIVE_USER_SUCCESS,\n    SET_ACTIVE_USER_ROLE_SUCCESS,\n} from \"../constants\";\nimport { createReducer } from \"./utils\";\n\nconst initialState = {\n    users: [],\n    active_user: {},\n    active_role: \"admin\",\n};\n\nexport const usersReducer = createReducer(initialState, {\n    [FETCH_ACTIVE_USER_SUCCESS]: (state, action) => ({\n        ...state,\n        active_user: action.payload,\n    }),\n    [FETCH_USERS_SUCCESS]: (state, action) => ({\n        ...state,\n        users: action.payload,\n    }),\n    [SET_ACTIVE_USER_ROLE_SUCCESS]: (state, action) => ({\n        ...state,\n        active_role: action.payload,\n    }),\n});\n","import {\n    FETCH_APPLICANTS_SUCCESS,\n    FETCH_ONE_APPLICANT_SUCCESS,\n    UPSERT_ONE_APPLICANT_SUCCESS,\n    DELETE_ONE_APPLICANT_SUCCESS,\n    ADD_APPLICANT_TO_SESSION_SUCCESS,\n} from \"../constants\";\nimport { createBasicReducerObject, createReducer } from \"./utils\";\n\nconst initialState = {\n    _modelData: [],\n};\n\n// basicReducers is an object whose keys are FETCH_SESSIONS_SUCCESS, etc,\n// and values are the corresponding reducer functions\nconst basicReducers = createBasicReducerObject(\n    FETCH_APPLICANTS_SUCCESS,\n    FETCH_ONE_APPLICANT_SUCCESS,\n    UPSERT_ONE_APPLICANT_SUCCESS,\n    DELETE_ONE_APPLICANT_SUCCESS\n);\n\n/**\n * Produces an array that is the union of `target` and `source`.\n *\n * @param {object[]} target\n * @param {object[]} source\n */\nfunction insertIfMissing(target, source) {\n    const missingItems = [];\n    for (let item of target) {\n        if (!source.some((x) => x.id === item.id)) {\n            // the current item is new\n            missingItems.push(item);\n        }\n    }\n    if (missingItems.length > 0) {\n        return target.concat(missingItems);\n    }\n    return target;\n}\n\nexport const applicantsReducer = createReducer(initialState, {\n    ...basicReducers,\n    [ADD_APPLICANT_TO_SESSION_SUCCESS]: (state, action) => ({\n        ...state,\n        _modelData: insertIfMissing(state._modelData, action.payload),\n    }),\n});\n","import PropTypes from \"prop-types\";\nimport {\n    FETCH_APPLICANTS_SUCCESS,\n    FETCH_ONE_APPLICANT_SUCCESS,\n    UPSERT_ONE_APPLICANT_SUCCESS,\n    DELETE_ONE_APPLICANT_SUCCESS,\n} from \"../constants\";\nimport { fetchError, upsertError, deleteError } from \"./errors\";\nimport { actionFactory, validatedApiDispatcher } from \"./utils\";\nimport { apiGET, apiPOST } from \"../../libs/apiUtils\";\nimport { applicantsReducer } from \"../reducers/applicants\";\nimport { createSelector } from \"reselect\";\nimport { activeRoleSelector } from \"./users\";\nimport { activeSessionSelector } from \"./sessions\";\n\n// actions\nconst fetchApplicantsSuccess = actionFactory(FETCH_APPLICANTS_SUCCESS);\nconst fetchOneApplicantSuccess = actionFactory(FETCH_ONE_APPLICANT_SUCCESS);\nconst upsertOneApplicantSuccess = actionFactory(UPSERT_ONE_APPLICANT_SUCCESS);\nconst deleteOneApplicantSuccess = actionFactory(DELETE_ONE_APPLICANT_SUCCESS);\n\n// dispatchers\nexport const fetchApplicants = validatedApiDispatcher({\n    name: \"fetchApplicants\",\n    description: \"Fetch applicants\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: () => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        // When we fetch applicants, we only want the applicants associated with the current session\n        const { id: activeSessionId } = getState().model.sessions.activeSession;\n        const data = await apiGET(\n            `/${role}/sessions/${activeSessionId}/applicants`\n        );\n        dispatch(fetchApplicantsSuccess(data));\n        return data;\n    },\n});\n\nexport const fetchApplicant = validatedApiDispatcher({\n    name: \"fetchApplicant\",\n    description: \"Fetch applicant\",\n    propTypes: { id: PropTypes.any.isRequired },\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (payload) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiGET(`/${role}/applicants/${payload.id}`);\n        dispatch(fetchOneApplicantSuccess(data));\n        return data;\n    },\n});\n\nexport const upsertApplicant = validatedApiDispatcher({\n    name: \"upsertApplicant\",\n    description: \"Add/insert applicant\",\n    propTypes: {},\n    onErrorDispatch: (e) => upsertError(e.toString()),\n    dispatcher: (payload, bySession = true) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        let data;\n        if (bySession) {\n            const session = activeSessionSelector(getState());\n            data = await apiPOST(\n                `/${role}/sessions/${session.id}/applicants`,\n                payload\n            );\n        } else {\n            data = await apiPOST(`/${role}/applicants`, payload);\n        }\n        dispatch(upsertOneApplicantSuccess(data));\n        return data;\n    },\n});\n\nexport const deleteApplicant = validatedApiDispatcher({\n    name: \"deleteApplicant\",\n    description: \"Delete applicant\",\n    propTypes: { id: PropTypes.any.isRequired },\n    onErrorDispatch: (e) => deleteError(e.toString()),\n    dispatcher: (payload) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const { id: activeSessionId } = getState().model.sessions.activeSession;\n        const data = await apiPOST(\n            `/${role}/sessions/${activeSessionId}/applicants/delete`,\n            payload\n        );\n        dispatch(deleteOneApplicantSuccess(data));\n    },\n});\n\nexport const exportApplicants = validatedApiDispatcher({\n    name: \"exportApplicants\",\n    description: \"Export applicants\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (formatter, format = \"spreadsheet\") => async (\n        dispatch,\n        getState\n    ) => {\n        if (!(formatter instanceof Function)) {\n            throw new Error(\n                `\"formatter\" must be a function when using the export action.`\n            );\n        }\n        // Re-fetch all applicants from the server in case things happened to be out of sync.\n        await dispatch(fetchApplicants());\n        const applicants = applicantsSelector(getState());\n\n        return formatter(applicants, format);\n    },\n});\n\nexport const upsertApplicants = validatedApiDispatcher({\n    name: \"upsertApplicants\",\n    description: \"Upsert applicants\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (applicants) => async (dispatch) => {\n        if (applicants.length === 0) {\n            return;\n        }\n        const dispatchers = applicants.map((applicant) =>\n            dispatch(upsertApplicant(applicant))\n        );\n        await Promise.all(dispatchers);\n        // Re-fetch all applicants from the server in case things happened to be out of sync.\n        return await dispatch(fetchApplicants());\n    },\n});\n\n// selectors\n\n// Each reducer is given an isolated state; instead of needed to remember to\n// pass the isolated state to each selector, `reducer._localStoreSelector` will intelligently\n// search for and return the isolated state associated with `reducer`. This is not\n// a standard redux function.\nexport const localStoreSelector = applicantsReducer._localStoreSelector;\nexport const applicantsSelector = createSelector(\n    localStoreSelector,\n    (state) => state._modelData\n);\n","import {\n    FETCH_APPLICATIONS_SUCCESS,\n    FETCH_ONE_APPLICATION_SUCCESS,\n    UPSERT_ONE_APPLICATION_SUCCESS,\n    DELETE_ONE_APPLICATION_SUCCESS,\n} from \"../constants\";\nimport { createBasicReducerObject, createReducer } from \"./utils\";\n\nconst initialState = {\n    _modelData: [],\n};\n\n// basicReducers is an object whose keys are FETCH_SESSIONS_SUCCESS, etc,\n// and values are the corresponding reducer functions\nconst basicReducers = createBasicReducerObject(\n    FETCH_APPLICATIONS_SUCCESS,\n    FETCH_ONE_APPLICATION_SUCCESS,\n    UPSERT_ONE_APPLICATION_SUCCESS,\n    DELETE_ONE_APPLICATION_SUCCESS\n);\n\nexport const applicationsReducer = createReducer(initialState, basicReducers);\n","import {\n    FETCH_POSITIONS_SUCCESS,\n    FETCH_ONE_POSITION_SUCCESS,\n    UPSERT_ONE_POSITION_SUCCESS,\n    DELETE_ONE_POSITION_SUCCESS,\n    ADD_INSTRUCTOR_TO_POSITION_SUCCESS,\n} from \"../constants\";\nimport { createBasicReducerObject, createReducer } from \"./utils\";\n\nconst initialState = {\n    _modelData: [],\n};\n\n// basicReducers is an object whose keys are FETCH_SESSIONS_SUCCESS, etc,\n// and values are the corresponding reducer functions\nconst basicReducers = createBasicReducerObject(\n    FETCH_POSITIONS_SUCCESS,\n    FETCH_ONE_POSITION_SUCCESS,\n    UPSERT_ONE_POSITION_SUCCESS,\n    DELETE_ONE_POSITION_SUCCESS\n);\n\nexport const positionsReducer = createReducer(initialState, {\n    ...basicReducers,\n    [ADD_INSTRUCTOR_TO_POSITION_SUCCESS]: (state, action) => {\n        const positionId = action.payload.position.id;\n        const instructors = action.payload.instructors;\n\n        // update the instructors list, but only if we're in the\n        // right position\n        function updateInstructors(position) {\n            if (position.id !== positionId) {\n                return position;\n            }\n            return {\n                ...position,\n                instructors: instructors,\n            };\n        }\n\n        return {\n            ...state,\n            _modelData: state._modelData.map(updateInstructors),\n        };\n    },\n});\n","import {\n    FETCH_INSTRUCTORS_SUCCESS,\n    FETCH_ONE_INSTRUCTOR_SUCCESS,\n    UPSERT_ONE_INSTRUCTOR_SUCCESS,\n    DELETE_ONE_INSTRUCTOR_SUCCESS,\n} from \"../constants\";\nimport { createBasicReducerObject, createReducer } from \"./utils\";\n\nconst initialState = {\n    _modelData: [],\n};\n\n// basicReducers is an object whose keys are FETCH_SESSIONS_SUCCESS, etc,\n// and values are the corresponding reducer functions\nconst basicReducers = createBasicReducerObject(\n    FETCH_INSTRUCTORS_SUCCESS,\n    FETCH_ONE_INSTRUCTOR_SUCCESS,\n    UPSERT_ONE_INSTRUCTOR_SUCCESS,\n    DELETE_ONE_INSTRUCTOR_SUCCESS\n);\n\nexport const instructorsReducer = createReducer(initialState, basicReducers);\n","import PropTypes from \"prop-types\";\nimport {\n    FETCH_INSTRUCTORS_SUCCESS,\n    FETCH_ONE_INSTRUCTOR_SUCCESS,\n    UPSERT_ONE_INSTRUCTOR_SUCCESS,\n    DELETE_ONE_INSTRUCTOR_SUCCESS,\n} from \"../constants\";\nimport { fetchError, upsertError, deleteError } from \"./errors\";\nimport { actionFactory, validatedApiDispatcher } from \"./utils\";\nimport { apiGET, apiPOST } from \"../../libs/apiUtils\";\nimport { instructorsReducer } from \"../reducers/instructors\";\nimport { createSelector } from \"reselect\";\nimport { activeRoleSelector } from \"./users\";\n\n// actions\nconst fetchInstructorsSuccess = actionFactory(FETCH_INSTRUCTORS_SUCCESS);\nconst fetchOneInstructorSuccess = actionFactory(FETCH_ONE_INSTRUCTOR_SUCCESS);\nconst upsertOneInstructorSuccess = actionFactory(UPSERT_ONE_INSTRUCTOR_SUCCESS);\nconst deleteOneInstructorSuccess = actionFactory(DELETE_ONE_INSTRUCTOR_SUCCESS);\n\n// dispatchers\nexport const fetchInstructors = validatedApiDispatcher({\n    name: \"fetchInstructors\",\n    description: \"Fetch instructors\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: () => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiGET(`/${role}/instructors`);\n        dispatch(fetchInstructorsSuccess(data));\n        return data;\n    },\n});\n\nexport const fetchInstructor = validatedApiDispatcher({\n    name: \"fetchInstructor\",\n    description: \"Fetch instructor\",\n    propTypes: { id: PropTypes.any.isRequired },\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (payload) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiGET(`/${role}/instructors/${payload.id}`);\n        dispatch(fetchOneInstructorSuccess(data));\n        return data;\n    },\n});\n\nexport const upsertInstructor = validatedApiDispatcher({\n    name: \"upsertInstructor\",\n    description: \"Add/insert instructor\",\n    propTypes: {},\n    onErrorDispatch: (e) => upsertError(e.toString()),\n    dispatcher: (payload) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiPOST(`/${role}/instructors`, payload);\n        dispatch(upsertOneInstructorSuccess(data));\n        return data;\n    },\n});\n\nexport const deleteInstructor = validatedApiDispatcher({\n    name: \"deleteInstructor\",\n    description: \"Delete instructor\",\n    propTypes: { id: PropTypes.any.isRequired },\n    onErrorDispatch: (e) => deleteError(e.toString()),\n    dispatcher: (payload) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiPOST(`/${role}/instructors/delete`, payload);\n        dispatch(deleteOneInstructorSuccess(data));\n    },\n});\n\nexport const exportInstructors = validatedApiDispatcher({\n    name: \"exportInstructors\",\n    description: \"Export instructors\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (formatter, format = \"spreadsheet\") => async (\n        dispatch,\n        getState\n    ) => {\n        if (!(formatter instanceof Function)) {\n            throw new Error(\n                `\"formatter\" must be a function when using the export action.`\n            );\n        }\n        // Re-fetch all instructors from the server in case things happened to be out of sync.\n        await dispatch(fetchInstructors());\n        const instructors = instructorsSelector(getState());\n\n        return formatter(instructors, format);\n    },\n});\n\nexport const upsertInstructors = validatedApiDispatcher({\n    name: \"upsertInstructors\",\n    description: \"Upsert instructors\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (instructors) => async (dispatch) => {\n        if (instructors.length === 0) {\n            return;\n        }\n        const dispatchers = instructors.map((instructor) =>\n            dispatch(upsertInstructor(instructor))\n        );\n        await Promise.all(dispatchers);\n        // Re-fetch all instructors from the server in case things happened to be out of sync.\n        return await dispatch(fetchInstructors());\n    },\n});\n// selectors\n\n// Each reducer is given an isolated state; instead of needed to remember to\n// pass the isolated state to each selector, `reducer._localStoreSelector` will intelligently\n// search for and return the isolated state associated with `reducer`. This is not\n// a standard redux function.\nexport const localStoreSelector = instructorsReducer._localStoreSelector;\nexport const instructorsSelector = createSelector(\n    localStoreSelector,\n    (state) => state._modelData\n);\n","import {\n    FETCH_CONTRACT_TEMPLATES_SUCCESS,\n    FETCH_ONE_CONTRACT_TEMPLATE_SUCCESS,\n    UPSERT_ONE_CONTRACT_TEMPLATE_SUCCESS,\n    DELETE_ONE_CONTRACT_TEMPLATE_SUCCESS,\n    FETCH_ALL_CONTRACT_TEMPLATES_SUCCESS,\n} from \"../constants\";\nimport { createBasicReducerObject, createReducer } from \"./utils\";\n\nconst initialState = {\n    _modelData: [],\n    all: [],\n};\n\n// basicReducers is an object whose keys are FETCH_*_SUCCESS, etc,\n// and values are the corresponding reducer functions\nconst basicReducers = createBasicReducerObject(\n    FETCH_CONTRACT_TEMPLATES_SUCCESS,\n    FETCH_ONE_CONTRACT_TEMPLATE_SUCCESS,\n    UPSERT_ONE_CONTRACT_TEMPLATE_SUCCESS,\n    DELETE_ONE_CONTRACT_TEMPLATE_SUCCESS\n);\n\nexport const contractTemplatesReducer = createReducer(initialState, {\n    ...basicReducers,\n    [FETCH_ALL_CONTRACT_TEMPLATES_SUCCESS]: (state, action) => ({\n        ...state,\n        all: action.payload,\n    }),\n});\n","import PropTypes from \"prop-types\";\nimport {\n    FETCH_CONTRACT_TEMPLATES_SUCCESS,\n    UPSERT_ONE_CONTRACT_TEMPLATE_SUCCESS,\n    DELETE_ONE_CONTRACT_TEMPLATE_SUCCESS,\n    FETCH_ALL_CONTRACT_TEMPLATES_SUCCESS,\n} from \"../constants\";\nimport { fetchError, upsertError, deleteError } from \"./errors\";\nimport { actionFactory, validatedApiDispatcher } from \"./utils\";\nimport { apiGET, apiPOST } from \"../../libs/apiUtils\";\nimport { contractTemplatesReducer } from \"../reducers/contract_templates\";\nimport { createSelector } from \"reselect\";\nimport { activeRoleSelector } from \"./users\";\n\n// actions\nconst fetchContractTemplatesSuccess = actionFactory(\n    FETCH_CONTRACT_TEMPLATES_SUCCESS\n);\nconst fetchAllContractTemplatesSuccess = actionFactory(\n    FETCH_ALL_CONTRACT_TEMPLATES_SUCCESS\n);\nconst upsertOneContractTemplateSuccess = actionFactory(\n    UPSERT_ONE_CONTRACT_TEMPLATE_SUCCESS\n);\nconst deleteOneContractTemplateSuccess = actionFactory(\n    DELETE_ONE_CONTRACT_TEMPLATE_SUCCESS\n);\n\n// dispatchers\nexport const fetchContractTemplates = validatedApiDispatcher({\n    name: \"fetchContractTemplates\",\n    description: \"Fetch contract_templates\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: () => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const { id: activeSessionId } = getState().model.sessions.activeSession;\n        const data = await apiGET(\n            `/${role}/sessions/${activeSessionId}/contract_templates`\n        );\n        dispatch(fetchContractTemplatesSuccess(data));\n        return data;\n    },\n});\n\nexport const upsertContractTemplate = validatedApiDispatcher({\n    name: \"upsertContractTemplate\",\n    description: \"Add/insert contract_template\",\n    propTypes: {},\n    onErrorDispatch: (e) => upsertError(e.toString()),\n    dispatcher: (payload) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const { id: activeSessionId } = getState().model.sessions.activeSession;\n        const data = await apiPOST(\n            `/${role}/sessions/${activeSessionId}/contract_templates`,\n            payload\n        );\n        dispatch(upsertOneContractTemplateSuccess(data));\n        return data;\n    },\n});\n\nexport const deleteContractTemplate = validatedApiDispatcher({\n    name: \"deleteContractTemplate\",\n    description: \"Delete contract_template from a session\",\n    propTypes: { id: PropTypes.any.isRequired },\n    onErrorDispatch: (e) => deleteError(e.toString()),\n    dispatcher: (payload) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const { id: activeSessionId } = getState().model.sessions.activeSession;\n        const data = await apiPOST(\n            `/${role}/sessions/${activeSessionId}/contract_templates/delete`,\n            payload\n        );\n        dispatch(deleteOneContractTemplateSuccess(data));\n        return data;\n    },\n});\n\nexport const fetchAllContractTemplates = validatedApiDispatcher({\n    name: \"fetchAllContractTemplates\",\n    description: \"Fetch all available contract_templates\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: () => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiGET(`/${role}/available_contract_templates`);\n        dispatch(fetchAllContractTemplatesSuccess(data));\n        return data;\n    },\n});\n\nexport const previewContractTemplate = validatedApiDispatcher({\n    name: \"previewContractTemplate\",\n    description:\n        \"Preview the html content of a contract template. No redux state is set by this call, but the contents of the template is returned.\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (template_id) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiGET(\n            `/${role}/contract_templates/${template_id}/view`\n        );\n        return data;\n    },\n});\n\nexport const downloadContractTemplate = validatedApiDispatcher({\n    name: \"downloadContractTemplate\",\n    description:\n        \"Download the content of a contract template. No redux state is set by this call, but a `File` object with the contents of the template is returned.\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (template_id) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiGET(\n            `/${role}/contract_templates/${template_id}/download`\n        );\n        // The data comes in encoded as base64, so we decode it as binary data.\n        const content = new Uint8Array(\n            atob(data.content)\n                .split(\"\")\n                .map((x) => x.charCodeAt(0))\n        );\n        return new File([content], data.file_name, {\n            type: data.mime_type,\n        });\n    },\n});\n\n// selectors\n\n// Each reducer is given an isolated state; instead of needed to remember to\n// pass the isolated state to each selector, `reducer._localStoreSelector` will intelligently\n// search for and return the isolated state associated with `reducer`. This is not\n// a standard redux function.\nexport const localStoreSelector = contractTemplatesReducer._localStoreSelector;\nexport const contractTemplatesSelector = createSelector(\n    localStoreSelector,\n    (state) => state._modelData\n);\nexport const allContractTemplatesSelector = createSelector(\n    localStoreSelector,\n    (state) => state.all\n);\n","import PropTypes from \"prop-types\";\nimport {\n    FETCH_POSITIONS_SUCCESS,\n    FETCH_ONE_POSITION_SUCCESS,\n    UPSERT_ONE_POSITION_SUCCESS,\n    DELETE_ONE_POSITION_SUCCESS,\n} from \"../constants\";\nimport { fetchError, upsertError, deleteError } from \"./errors\";\nimport {\n    actionFactory,\n    validatedApiDispatcher,\n    arrayToHash,\n    flattenIdFactory,\n    splitObjByProps,\n} from \"./utils\";\nimport { apiGET, apiPOST } from \"../../libs/apiUtils\";\nimport { positionsReducer } from \"../reducers/positions\";\nimport { createSelector } from \"reselect\";\nimport { instructorsSelector } from \"./instructors\";\nimport { contractTemplatesSelector } from \"./contract_templates\";\nimport { activeRoleSelector } from \"./users\";\nimport { applicantsSelector } from \"./applicants\";\n\n// actions\nconst fetchPositionsSuccess = actionFactory(FETCH_POSITIONS_SUCCESS);\nconst fetchOnePositionSuccess = actionFactory(FETCH_ONE_POSITION_SUCCESS);\nconst upsertOnePositionSuccess = actionFactory(UPSERT_ONE_POSITION_SUCCESS);\nconst deleteOnePositionSuccess = actionFactory(DELETE_ONE_POSITION_SUCCESS);\n\n// dispatchers\nexport const fetchPositions = validatedApiDispatcher({\n    name: \"fetchPositions\",\n    description: \"Fetch positions\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: () => async (dispatch, getState) => {\n        const { id: activeSessionId } = getState().model.sessions.activeSession;\n        const role = activeRoleSelector(getState());\n        const data = await apiGET(\n            `/${role}/sessions/${activeSessionId}/positions`\n        );\n        dispatch(fetchPositionsSuccess(data));\n    },\n});\n\nexport const fetchPosition = validatedApiDispatcher({\n    name: \"fetchPosition\",\n    description: \"Fetch position\",\n    propTypes: { id: PropTypes.any.isRequired },\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (payload) => async (dispatch, getState) => {\n        const { id: activeSessionId } = getState().model.sessions.activeSession;\n        const role = activeRoleSelector(getState());\n        const data = await apiGET(\n            `/${role}/sessions/${activeSessionId}/positions/${payload.id}`\n        );\n        dispatch(fetchOnePositionSuccess(data));\n    },\n});\n\n// Some helper functions to convert the data that the UI uses\n// into data that the API can use\nconst instructorsToInstructorIds = flattenIdFactory(\n    \"instructors\",\n    \"instructor_ids\",\n    true\n);\nconst contractTemplateToContractTemplateId = flattenIdFactory(\n    \"contract_template\",\n    \"contract_template_id\"\n);\n\nconst instructorToInstructorId = flattenIdFactory(\n    \"instructor\",\n    \"instructor_id\"\n);\n\nconst applicantToApplicantId = flattenIdFactory(\"applicant\", \"applicant_id\");\n\nfunction prepForApi(data) {\n    const [ret, filtered] = splitObjByProps(data, [\"instructor_preferences\"]);\n\n    if (filtered[\"instructor_preferences\"]) {\n        ret[\"instructor_preferences\"] = filtered[\n            \"instructor_preferences\"\n        ].map((preference) =>\n            applicantToApplicantId(instructorToInstructorId(preference))\n        );\n    }\n\n    return contractTemplateToContractTemplateId(\n        instructorsToInstructorIds(ret)\n    );\n}\n\nexport const upsertPosition = validatedApiDispatcher({\n    name: \"upsertPosition\",\n    description: \"Add/insert position\",\n    propTypes: {},\n    onErrorDispatch: (e) => upsertError(e.toString()),\n    dispatcher: (payload) => async (dispatch, getState) => {\n        const { id: activeSessionId } = getState().model.sessions.activeSession;\n        const role = activeRoleSelector(getState());\n        const data = await apiPOST(\n            `/${role}/sessions/${activeSessionId}/positions`,\n            prepForApi(payload)\n        );\n        dispatch(upsertOnePositionSuccess(data));\n    },\n});\n\nexport const deletePosition = validatedApiDispatcher({\n    name: \"deletePosition\",\n    description: \"Delete position\",\n    propTypes: { id: PropTypes.any.isRequired },\n    onErrorDispatch: (e) => deleteError(e.toString()),\n    dispatcher: (payload) => async (dispatch, getState) => {\n        const { id: activeSessionId } = getState().model.sessions.activeSession;\n        const role = activeRoleSelector(getState());\n        const data = await apiPOST(\n            `/${role}/sessions/${activeSessionId}/positions/delete`,\n            prepForApi(payload)\n        );\n        dispatch(deleteOnePositionSuccess(data));\n    },\n});\n\nexport const exportPositions = validatedApiDispatcher({\n    name: \"exportPositions\",\n    description: \"Export positions\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (formatter, format = \"spreadsheet\") => async (\n        dispatch,\n        getState\n    ) => {\n        if (!(formatter instanceof Function)) {\n            throw new Error(\n                `\"formatter\" must be a function when using the export action.`\n            );\n        }\n        // Re-fetch all positions from the server in case things happened to be out of sync.\n        await dispatch(fetchPositions());\n        const positions = positionsSelector(getState());\n\n        return formatter(positions, format);\n    },\n});\n\nexport const upsertPositions = validatedApiDispatcher({\n    name: \"upsertPositions\",\n    description: \"Upsert a list of positions\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (positions) => async (dispatch) => {\n        if (positions.length === 0) {\n            return;\n        }\n        const dispatchers = positions.map((position) =>\n            dispatch(upsertPosition(position))\n        );\n        await Promise.all(dispatchers);\n        // Re-fetch all positions from the server in case things happened to be out of sync.\n        await dispatch(fetchPositions());\n    },\n});\n\n// selectors\n\n// Each reducer is given an isolated state; instead of needed to remember to\n// pass the isolated state to each selector, `reducer._localStoreSelector` will intelligently\n// search for and return the isolated state associated with `reducer`. This is not\n// a standard redux function.\nexport const localStoreSelector = positionsReducer._localStoreSelector;\nconst _positionsSelector = createSelector(\n    localStoreSelector,\n    (state) => state._modelData\n);\n/**\n * Get the positions, but populate the `instructors` array with the full instructor\n * information.\n */\nexport const positionsSelector = createSelector(\n    [\n        _positionsSelector,\n        instructorsSelector,\n        contractTemplatesSelector,\n        applicantsSelector,\n    ],\n    (positions, instructors, contractTemplates, applicants) => {\n        // Hash the instructors by `id` for fast lookup\n        const instructorsById = arrayToHash(instructors);\n        const contractTemplatesById = arrayToHash(contractTemplates);\n        const applicantsById = arrayToHash(applicants);\n\n        // Leave all the data alone, except replace the `instructor_ids` list\n        // with the full instructor data.\n        return positions.map(\n            ({\n                instructor_ids,\n                contract_template_id,\n                instructor_preferences,\n                ...rest\n            }) => ({\n                ...rest,\n                // When the instructor list references an instructor that we haven't loaded\n                // we don't want the frontend to crash, so filter out any null instructors\n                instructors: instructor_ids\n                    .map((x) => instructorsById[x])\n                    .filter((x) => x),\n                contract_template: contractTemplatesById[contract_template_id],\n                instructor_preferences: (instructor_preferences || []).map(\n                    ({ applicant_id, instructor_id, ...rest }) => ({\n                        instructor: instructorsById[instructor_id],\n                        applicant: applicantsById[applicant_id],\n                        ...rest,\n                    })\n                ),\n            })\n        );\n    }\n);\n","import PropTypes from \"prop-types\";\nimport {\n    FETCH_APPLICATIONS_SUCCESS,\n    FETCH_ONE_APPLICATION_SUCCESS,\n    UPSERT_ONE_APPLICATION_SUCCESS,\n    DELETE_ONE_APPLICATION_SUCCESS,\n} from \"../constants\";\nimport { fetchError, upsertError, deleteError } from \"./errors\";\nimport {\n    actionFactory,\n    arrayToHash,\n    validatedApiDispatcher,\n    flattenIdFactory,\n    splitObjByProps,\n} from \"./utils\";\nimport { apiGET, apiPOST } from \"../../libs/apiUtils\";\nimport { applicationsReducer } from \"../reducers/applications\";\nimport { createSelector } from \"reselect\";\nimport { applicantsSelector } from \"./applicants\";\nimport { activeRoleSelector } from \"./users\";\nimport { positionsSelector } from \"./positions\";\n\n// actions\nconst fetchApplicationsSuccess = actionFactory(FETCH_APPLICATIONS_SUCCESS);\nconst fetchOneApplicationSuccess = actionFactory(FETCH_ONE_APPLICATION_SUCCESS);\nconst upsertOneApplicationSuccess = actionFactory(\n    UPSERT_ONE_APPLICATION_SUCCESS\n);\nconst deleteOneApplicationSuccess = actionFactory(\n    DELETE_ONE_APPLICATION_SUCCESS\n);\n\nconst applicantToApplicantId = flattenIdFactory(\"applicant\", \"applicant_id\");\nconst positionToPositionId = flattenIdFactory(\"position\", \"position_id\");\nfunction prepForApi(data) {\n    const [ret, filtered] = splitObjByProps(data, [\"position_preferences\"]);\n\n    if (filtered[\"position_preferences\"]) {\n        ret[\"position_preferences\"] = filtered[\n            \"position_preferences\"\n        ].map((preference) => positionToPositionId(preference));\n    }\n\n    return applicantToApplicantId(ret);\n}\n\n// dispatchers\nexport const fetchApplications = validatedApiDispatcher({\n    name: \"fetchApplications\",\n    description: \"Fetch applications\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: () => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const { id: activeSessionId } = getState().model.sessions.activeSession;\n        const data = await apiGET(\n            `/${role}/sessions/${activeSessionId}/applications`\n        );\n        dispatch(fetchApplicationsSuccess(data));\n        return data;\n    },\n});\n\nexport const fetchApplication = validatedApiDispatcher({\n    name: \"fetchApplication\",\n    description: \"Fetch application\",\n    propTypes: { id: PropTypes.any.isRequired },\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (payload) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const { id: activeSessionId } = getState().model.sessions.activeSession;\n        const data = await apiGET(\n            `/${role}/sessions/${activeSessionId}/applications/${payload.id}`\n        );\n        dispatch(fetchOneApplicationSuccess(data));\n        return data;\n    },\n});\n\nexport const upsertApplication = validatedApiDispatcher({\n    name: \"upsertApplication\",\n    description: \"Add/insert application\",\n    propTypes: {},\n    onErrorDispatch: (e) => upsertError(e.toString()),\n    dispatcher: (payload) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const { id: activeSessionId } = getState().model.sessions.activeSession;\n        const data = await apiPOST(\n            `/${role}/sessions/${activeSessionId}/applications`,\n            prepForApi(payload)\n        );\n        dispatch(upsertOneApplicationSuccess(data));\n        return data;\n    },\n});\n\nexport const deleteApplication = validatedApiDispatcher({\n    name: \"deleteApplication\",\n    description: \"Delete application\",\n    propTypes: { id: PropTypes.any.isRequired },\n    onErrorDispatch: (e) => deleteError(e.toString()),\n    dispatcher: (payload) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const { id: activeSessionId } = getState().model.sessions.activeSession;\n        const data = await apiPOST(\n            `/${role}/sessions/${activeSessionId}/applications/delete`,\n            prepForApi(payload)\n        );\n        dispatch(deleteOneApplicationSuccess(data));\n    },\n});\n\n// selectors\n\n// Each reducer is given an isolated state; instead of needed to remember to\n// pass the isolated state to each selector, `reducer._localStoreSelector` will intelligently\n// search for and return the isolated state associated with `reducer`. This is not\n// a standard redux function.\nexport const localStoreSelector = applicationsReducer._localStoreSelector;\nexport const _applicationsSelector = createSelector(\n    localStoreSelector,\n    (state) => state._modelData\n);\n\n// Get the current list of applications and recompute `applicant_id` and `position_id`\n// to have corresponding `applicant` and `position` objects\nexport const applicationsSelector = createSelector(\n    [_applicationsSelector, applicantsSelector, positionsSelector],\n    (applications, applicants, positions) => {\n        if (applications.length === 0) {\n            return [];\n        }\n\n        const applicantsById = arrayToHash(applicants);\n        const positionsById = arrayToHash(positions);\n\n        // Change `applicant_id` to the corresponding `applicant` object\n        // and similarly, change each `position_id` in each entry of\n        // `position_preferences` to corresponding `position` object.\n        return applications.map(\n            ({ position_preferences, applicant_id, ...rest }) => ({\n                ...rest,\n                applicant: applicantsById[applicant_id] || {},\n                position_preferences: (position_preferences || []).map(\n                    ({ position_id, ...rest }) => ({\n                        position: positionsById[position_id],\n                        ...rest,\n                    })\n                ),\n            })\n        );\n    }\n);\n","import {\n    FETCH_ASSIGNMENTS_SUCCESS,\n    FETCH_ONE_ASSIGNMENT_SUCCESS,\n    UPSERT_ONE_ASSIGNMENT_SUCCESS,\n    DELETE_ONE_ASSIGNMENT_SUCCESS,\n    FETCH_WAGE_CHUNKS_FOR_ASSIGNMENT_SUCCESS,\n    UPSERT_WAGE_CHUNKS_FOR_ASSIGNMENT_SUCCESS,\n} from \"../constants\";\nimport { createBasicReducerObject, createReducer } from \"./utils\";\n\nconst initialState = {\n    _modelData: [],\n    // Since we don't want to fetch all wage chunks all the time,\n    // we fetch them on a per-assignment basis and store them here.\n    _wageChunksByAssignmentId: {},\n};\n\n// basicReducers is an object whose keys are FETCH_SESSIONS_SUCCESS, etc,\n// and values are the corresponding reducer functions\nconst basicReducers = createBasicReducerObject(\n    FETCH_ASSIGNMENTS_SUCCESS,\n    FETCH_ONE_ASSIGNMENT_SUCCESS,\n    UPSERT_ONE_ASSIGNMENT_SUCCESS,\n    DELETE_ONE_ASSIGNMENT_SUCCESS\n);\n\n/**\n * Given a list of all the wage chunks for a particular assignment,\n * sets the _wageChunksByAssignmentId hash appropriately.\n *\n * @param {*} state\n * @param {{payload: object}} action\n * @returns\n */\nfunction setWageChunks(state, action) {\n    const assignmentId = (action.payload[0] || {}).assignment_id;\n    if (!assignmentId) {\n        return state;\n    }\n    return {\n        ...state,\n        _wageChunksByAssignmentId: {\n            ...state._wageChunksByAssignmentId,\n            [assignmentId]: action.payload,\n        },\n    };\n}\n\nexport const assignmentsReducer = createReducer(initialState, {\n    ...basicReducers,\n    // wage chunks are closely associated with assignments, so their actions happen\n    // here\n    [FETCH_WAGE_CHUNKS_FOR_ASSIGNMENT_SUCCESS]: setWageChunks,\n    [UPSERT_WAGE_CHUNKS_FOR_ASSIGNMENT_SUCCESS]: setWageChunks,\n});\n","import PropTypes from \"prop-types\";\nimport {\n    UPSERT_ONE_WAGE_CHUNK_SUCCESS,\n    DELETE_ONE_WAGE_CHUNK_SUCCESS,\n    FETCH_WAGE_CHUNKS_FOR_ASSIGNMENT_SUCCESS,\n    UPSERT_WAGE_CHUNKS_FOR_ASSIGNMENT_SUCCESS,\n} from \"../constants\";\nimport { fetchError, upsertError, deleteError } from \"./errors\";\nimport { actionFactory, validatedApiDispatcher } from \"./utils\";\nimport { apiGET, apiPOST } from \"../../libs/apiUtils\";\nimport { createSelector } from \"reselect\";\nimport { assignmentsReducer } from \"../reducers/assignments\";\nimport { fetchAssignment } from \"./assignments\";\nimport { activeRoleSelector } from \"./users\";\n\n// actions\nconst fetchWageChunksForAssignmentSuccess = actionFactory(\n    FETCH_WAGE_CHUNKS_FOR_ASSIGNMENT_SUCCESS\n);\nconst upsertWageChunksForAssignmentSuccess = actionFactory(\n    UPSERT_WAGE_CHUNKS_FOR_ASSIGNMENT_SUCCESS\n);\nconst upsertOneWageChunkSuccess = actionFactory(UPSERT_ONE_WAGE_CHUNK_SUCCESS);\nconst deleteOneWageChunkSuccess = actionFactory(DELETE_ONE_WAGE_CHUNK_SUCCESS);\n\n// dispatchers\nexport const fetchWageChunksForAssignment = validatedApiDispatcher({\n    name: \"fetchWageChunksForAssignment\",\n    description: \"Fetch wage chunks associated with an assignment\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (payload) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        // When we fetch wage chunks for an assignment, we only get the wage chunks for that particular assignment\n        const { id: assignmentId } = payload;\n        const data = await apiGET(\n            `/${role}/assignments/${assignmentId}/wage_chunks`\n        );\n        dispatch(fetchWageChunksForAssignmentSuccess(data));\n    },\n});\n\nexport const upsertWageChunksForAssignment = validatedApiDispatcher({\n    name: \"upsertWageChunksForAssignment\",\n    description: \"Fetch wage chunks associated with an assignment\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (assignment, payload) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        // When we fetch wage chunks for an assignment, we only get the wage chunks for that particular assignment\n        const { id: assignmentId } = assignment;\n        const data = await apiPOST(\n            `/${role}/assignments/${assignmentId}/wage_chunks`,\n            payload\n        );\n        dispatch(upsertWageChunksForAssignmentSuccess(data));\n        // After we update a wage chunk, we should refetch the assignment to make sure\n        // there isn't stale data\n        await dispatch(fetchAssignment(assignment));\n    },\n});\n\nexport const upsertWageChunk = validatedApiDispatcher({\n    name: \"upsertWageChunk\",\n    description: \"Add/insert wage chunk\",\n    propTypes: {},\n    onErrorDispatch: (e) => upsertError(e.toString()),\n    dispatcher: (payload) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiPOST(`/${role}/wage_chunks`, payload);\n        dispatch(upsertOneWageChunkSuccess(data));\n    },\n});\n\nexport const deleteWageChunk = validatedApiDispatcher({\n    name: \"deleteWageChunk\",\n    description: \"Delete a wage chunk\",\n    propTypes: { id: PropTypes.any.isRequired },\n    onErrorDispatch: (e) => deleteError(e.toString()),\n    dispatcher: (payload) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiPOST(`/${role}/wage_chunks/delete`, payload);\n        dispatch(deleteOneWageChunkSuccess(data));\n    },\n});\n\n// selectors\n\n// Each reducer is given an isolated state; instead of needed to remember to\n// pass the isolated state to each selector, `reducer._localStoreSelector` will intelligently\n// search for and return the isolated state associated with `reducer`. This is not\n// a standard redux function.\n\n// wage chunk data is stored with the assignments in the redux store\nexport const localStoreSelector = assignmentsReducer._localStoreSelector;\nexport const wageChunksByAssignmentSelector = createSelector(\n    localStoreSelector,\n    (state) =>\n        function (assignment) {\n            const assignment_id = assignment.id;\n            if (!state._wageChunksByAssignmentId[assignment_id]) {\n                return [];\n            }\n            return state._wageChunksByAssignmentId[assignment_id];\n        }\n);\n","import PropTypes from \"prop-types\";\nimport {\n    FETCH_ASSIGNMENTS_SUCCESS,\n    FETCH_ONE_ASSIGNMENT_SUCCESS,\n    UPSERT_ONE_ASSIGNMENT_SUCCESS,\n    DELETE_ONE_ASSIGNMENT_SUCCESS,\n} from \"../constants\";\nimport { fetchError, upsertError, deleteError } from \"./errors\";\nimport {\n    actionFactory,\n    validatedApiDispatcher,\n    arrayToHash,\n    flattenIdFactory,\n} from \"./utils\";\nimport { apiGET, apiPOST } from \"../../libs/apiUtils\";\nimport { assignmentsReducer } from \"../reducers/assignments\";\nimport { createSelector } from \"reselect\";\nimport { applicantsSelector } from \"./applicants\";\nimport { positionsSelector } from \"./positions\";\nimport { activeRoleSelector } from \"./users\";\nimport {\n    fetchWageChunksForAssignment,\n    wageChunksByAssignmentSelector,\n    upsertWageChunksForAssignment,\n} from \"./wage_chunks\";\n\n// actions\nconst fetchAssignmentsSuccess = actionFactory(FETCH_ASSIGNMENTS_SUCCESS);\nconst fetchOneAssignmentSuccess = actionFactory(FETCH_ONE_ASSIGNMENT_SUCCESS);\nconst upsertOneAssignmentSuccess = actionFactory(UPSERT_ONE_ASSIGNMENT_SUCCESS);\nconst deleteOneAssignmentSuccess = actionFactory(DELETE_ONE_ASSIGNMENT_SUCCESS);\n\n// dispatchers\nexport const fetchAssignments = validatedApiDispatcher({\n    name: \"fetchAssignments\",\n    description: \"Fetch assignments\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: () => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const { id: activeSessionId } = getState().model.sessions.activeSession;\n        const data = await apiGET(\n            `/${role}/sessions/${activeSessionId}/assignments`\n        );\n        dispatch(fetchAssignmentsSuccess(data));\n        return data;\n    },\n});\n\nexport const fetchAssignment = validatedApiDispatcher({\n    name: \"fetchAssignment\",\n    description: \"Fetch assignment\",\n    propTypes: { id: PropTypes.any.isRequired },\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (payload) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiGET(`/${role}/assignments/${payload.id}`);\n        dispatch(fetchOneAssignmentSuccess(data));\n        return data;\n    },\n});\n\n// Some helper functions to convert the data that the UI uses\n// into data that the API can use\nconst applicantToApplicantId = flattenIdFactory(\"applicant\", \"applicant_id\");\nconst positionToPositionId = flattenIdFactory(\"position\", \"position_id\");\nfunction prepForApi(data) {\n    return positionToPositionId(applicantToApplicantId(data));\n}\n\nexport const upsertAssignment = validatedApiDispatcher({\n    name: \"upsertAssignment\",\n    description: \"Add/insert assignment\",\n    propTypes: {},\n    onErrorDispatch: (e) => upsertError(e.toString()),\n    dispatcher: (payload) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        let data = await apiPOST(`/${role}/assignments`, prepForApi(payload));\n        dispatch(upsertOneAssignmentSuccess(data));\n        if (payload.wage_chunks) {\n            await dispatch(\n                upsertWageChunksForAssignment(payload, payload.wage_chunks)\n            );\n            // The wage chunks could have changed the number of \"hours\" for the assignment.\n            // Refetch it to make sure the data isn't stale.\n            data = await dispatch(fetchAssignment(data));\n        }\n        dispatch(upsertOneAssignmentSuccess(data));\n        return data;\n    },\n});\n\nexport const deleteAssignment = validatedApiDispatcher({\n    name: \"deleteAssignment\",\n    description: \"Delete assignment\",\n    propTypes: { id: PropTypes.any.isRequired },\n    onErrorDispatch: (e) => deleteError(e.toString()),\n    dispatcher: (payload) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiPOST(\n            `/${role}/assignments/delete`,\n            prepForApi(payload)\n        );\n        dispatch(deleteOneAssignmentSuccess(data));\n    },\n});\n\nexport const exportAssignments = validatedApiDispatcher({\n    name: \"exportAssignments\",\n    description: \"Export assignments\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (formatter, format = \"spreadsheet\") => async (\n        dispatch,\n        getState\n    ) => {\n        if (!(formatter instanceof Function)) {\n            throw new Error(\n                `\"formatter\" must be a function when using the export action.`\n            );\n        }\n        // Re-fetch all assignments from the server in case things happened to be out of sync.\n        await dispatch(fetchAssignments());\n        const assignments = assignmentsSelector(getState());\n\n        // Normally, wage chunk information is not fetched with an assignment. This information\n        // must be fetched separately.\n        const wageChunkPromises = assignments.map((assignment) =>\n            dispatch(fetchWageChunksForAssignment(assignment))\n        );\n        await Promise.all(wageChunkPromises);\n        // Attach the wage chunk information to each assignment\n        for (const assignment of assignments) {\n            assignment.wage_chunks = wageChunksByAssignmentSelector(getState())(\n                assignment\n            );\n        }\n\n        return formatter(assignments, format);\n    },\n});\n\nexport const upsertAssignments = validatedApiDispatcher({\n    name: \"upsertAssignments\",\n    description: \"Upsert a list of assignments\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (assignments) => async (dispatch) => {\n        if (assignments.length === 0) {\n            return;\n        }\n        const dispatchers = assignments.map((assignment) =>\n            dispatch(upsertAssignment(assignment))\n        );\n        await Promise.all(dispatchers);\n        // Re-fetch all assignments from the server in case things happened to be out of sync.\n        await dispatch(fetchAssignments());\n    },\n});\n\n// selectors\n\n// Each reducer is given an isolated state; instead of needing to remember to\n// pass the isolated state to each selector, `reducer._localStoreSelector` will intelligently\n// search for and return the isolated state associated with `reducer`. This is not\n// a standard redux function.\nexport const localStoreSelector = assignmentsReducer._localStoreSelector;\n/**\n * Get just the assignment data as it appears in the store; i.e., it has references to\n * id's of applicants and positions.\n */\nconst _assignmentsSelector = createSelector(\n    localStoreSelector,\n    (state) => state._modelData\n);\n/**\n * Get the current assignments. This selector is memoized and will only\n * be recomputed when assignments, applicants, or positions change.\n */\nexport const assignmentsSelector = createSelector(\n    [_assignmentsSelector, applicantsSelector, positionsSelector],\n    (assignments, applicants, positions) => {\n        if (assignments.length === 0) {\n            return [];\n        }\n        applicants = arrayToHash(applicants);\n        positions = arrayToHash(positions);\n        return assignments.map(({ position_id, applicant_id, ...rest }) => ({\n            ...rest,\n            position: positions[position_id] || {},\n            applicant: applicants[applicant_id] || {},\n        }));\n    }\n);\n","import { validatedApiDispatcher } from \"./utils\";\nimport { apiError } from \"./errors\";\nimport { activeSessionSelector } from \"./sessions\";\nimport { initFromStage } from \"./init\";\n\nexport const setGlobals = validatedApiDispatcher({\n    name: \"setGlobals\",\n    description: \"Sets global variables\",\n    onErrorDispatch: (e) => apiError(e.toString()),\n    dispatcher: (payload) => async (dispatch, getState) => {\n        const globals = { ...globalsSelector(getState()), ...payload };\n\n        // Store the globals in the URL\n        await dispatch(setGlobalsInUrl(globals));\n\n        // Now store the globals in the Redux store\n        dispatch({ type: \"SET_GLOBALS\", payload: globals });\n    },\n});\n\n/**\n * Sets the specified values to be part of the URL\n */\nexport const setGlobalsInUrl = validatedApiDispatcher({\n    name: \"setGlobalsInUrl\",\n    description: \"Stores global variables in the URL\",\n    onErrorDispatch: (e) => apiError(e.toString()),\n    dispatcher: (payload) => async () => {\n        // Create a new URL with the globals set in it\n        const searchParams = new URLSearchParams();\n        for (const [key, val] of Object.entries(payload)) {\n            searchParams.append(key, JSON.stringify(val));\n        }\n\n        // If we have globals to store, push them onto the url\n        if (window.history.pushState && (\"\" + searchParams).length > 0) {\n            let newUrl = new URL(window.location);\n            newUrl.search = \"?\" + searchParams;\n            newUrl = \"\" + newUrl;\n            if (\"\" + newUrl !== \"\" + window.location) {\n                window.history.pushState({ path: newUrl }, \"\", newUrl);\n            }\n        }\n    },\n});\n\nexport const setMockAPIState = validatedApiDispatcher({\n    name: \"setMockAPIState\",\n    description: \"Activates or deactivates the mockAPI\",\n    onErrorDispatch: (e) => apiError(e.toString()),\n    dispatcher: (payload, options = { skipInit: false }) => async (\n        dispatch\n    ) => {\n        await dispatch(setGlobals({ mockAPI: payload }));\n\n        if (!options.skipInit) {\n            await dispatch(initFromStage(\"toggleMockAPI\"));\n        }\n    },\n});\n\nexport const globalsSelector = (state) => {\n    // Peel off the `activeSession` if it is stored in globals.\n    // We want to always use the \"real\" active session and want\n    // to avoid multiple sources of truth.\n    // eslint-disable-next-line\n    const { activeSession, ...otherGlobals } = state.ui.globals;\n    const storedActiveSession = activeSessionSelector(state);\n    if (storedActiveSession != null && storedActiveSession.id != null) {\n        return { ...otherGlobals, activeSession: storedActiveSession.id };\n    }\n    return otherGlobals;\n};\n","import {\n    setActiveSession,\n    fetchSessions,\n    sessionsSelector,\n    activeSessionSelector,\n} from \"./sessions\";\nimport {\n    fetchActiveUser,\n    setActiveUserRole,\n    activeRoleSelector,\n} from \"./users\";\nimport { fetchApplicants } from \"./applicants\";\nimport { fetchApplications } from \"./applications\";\nimport { fetchAssignments } from \"./assignments\";\nimport { fetchContractTemplates } from \"./contract_templates\";\nimport { fetchInstructors } from \"./instructors\";\nimport { fetchPositions } from \"./positions\";\nimport { setGlobals, globalsSelector } from \"./globals\";\nimport { parseURLSearchString } from \"../../libs/urlUtils\";\n\n/**\n * A helper function to replace all API actions to\n * use mock API actions.\n *\n * @param {boolean} enableMockAPI\n */\nfunction toggleMockApi(enableMockAPI) {\n    // in production, ToggleMockApi is a no-op. In development, it actually\n    // does something.\n    /* eslint-disable */\n    if (enableMockAPI != null && process.env.REACT_APP_DEV_FEATURES) {\n        const mock = require(\"../mockAPI\");\n        const mockAPI = mock.mockAPI;\n\n        if (enableMockAPI === true) {\n            mockAPI.replaceGlobalFetch();\n        } else {\n            mockAPI.restoreGlobalFetch();\n        }\n    }\n    /* eslint-enable */\n}\n\n/**\n * Prepare an object to be used to set global variables. The\n * return value is the same as the input except with `null` entries\n * removed.\n *\n * @param {*} globals\n * @returns {object} same as input but with `null` values removed.\n */\nfunction prepareGlobals(globals) {\n    const ret = {};\n    for (const [key, val] of Object.entries(globals)) {\n        if (val != null) {\n            ret[key] = val;\n        }\n    }\n    return ret;\n}\n\n/**\n * Various actions have side effects, requiring additional actions to\n * be dispatched. For example, if a session changes, all data related to\n * that session needs to be re-fetched.\n *\n * This function allows you to specify \"stage\" to start the init procedure at.\n * It will handle re-fetching any dependent data and dispatching any\n * required actions depending on the stage specified.\n *\n * @export\n * @param {string} stage - What stage to start the init procedure at\n * @param {{ startAfterStage: boolean }} options - if true, start from the stage following the specified stage; if false, start from the specified stage\n * @returns {function} an async function that handles all the API calls.\n */\nexport function initFromStage(stage, options = { startAfterStage: false }) {\n    const startAfterStage = !!options.startAfterStage;\n\n    return async (dispatch, getState) => {\n        const parsedGlobals = { mockAPI: null, activeSession: null };\n\n        /**\n         * A helper function to determine if the `currentStage`\n         * should be run\n         *\n         * @param {string} queryStage\n         * @returns {boolean} whether the `currentStage` action\n         * should be performed\n         */\n        function shouldRunStage(queryStage) {\n            const initOrder = [\n                \"pageLoad\",\n                \"toggleMockAPI\",\n                \"setActiveUser\",\n                \"setActiveUserRole\",\n                \"fetchSessions\",\n                \"setActiveSession\",\n                \"updateGlobals\",\n                \"fetchSessionDependentData\",\n            ];\n\n            // Is the queried stage dependent on the current stage?\n            // If `startAfterStage` is set, we actually want to know\n            // if we are the *next* stage.\n            const stageDependent =\n                initOrder.indexOf(stage) + startAfterStage <=\n                initOrder.indexOf(queryStage);\n\n            // `\"setActiveSession\" requires that an active session be set before\n            // it gets run.\n            if (stageDependent && queryStage === \"setActiveSession\") {\n                const state = getState();\n                const sessions = sessionsSelector(state);\n                const activeSession = activeSessionSelector(state) || {\n                    id: parsedGlobals.activeSession,\n                };\n                if (\n                    sessions.find((session) => session.id === activeSession.id)\n                ) {\n                    return true;\n                }\n                return false;\n            }\n\n            // All session dependent data depends on an active session being set\n            if (stageDependent && queryStage === \"fetchSessionDependentData\") {\n                const state = getState();\n                const activeSession = activeSessionSelector(state);\n                if (activeSession && activeSession.id != null) {\n                    return true;\n                }\n                return false;\n            }\n\n            return stageDependent;\n        }\n\n        if (shouldRunStage(\"pageLoad\")) {\n            // When the page loads we parse the URL and pull out any globals that\n            // need setting\n            if (window.location) {\n                Object.assign(\n                    parsedGlobals,\n                    parseURLSearchString(window.location.search)\n                );\n                // Immediately set any global variables in the Redux store.\n                await dispatch(setGlobals(prepareGlobals(parsedGlobals)));\n            }\n        }\n\n        if (shouldRunStage(\"toggleMockAPI\")) {\n            const globals = globalsSelector(getState());\n            toggleMockApi(globals.mockAPI);\n        }\n\n        if (shouldRunStage(\"setActiveUser\")) {\n            await dispatch(fetchActiveUser());\n        }\n\n        if (shouldRunStage(\"setActiveUserRole\")) {\n            const activeRole = activeRoleSelector(getState());\n            await dispatch(setActiveUserRole(activeRole, { skipInit: true }));\n        }\n\n        if (shouldRunStage(\"fetchSessions\")) {\n            await dispatch(fetchSessions());\n        }\n\n        if (shouldRunStage(\"setActiveSession\")) {\n            // after sessions are fetched, we compare with the active session.\n            // The active session might need to be \"updated\" if the ID matches but\n            // the data doesn't\n            const state = getState();\n            const sessions = sessionsSelector(state);\n            const activeSession = activeSessionSelector(state);\n            // There are two places where the active session could be store:\n            // in the URL as a global and in the Redux store. Prefer the value\n            // in the URL.\n            const matchingSession =\n                sessions.find(\n                    (session) => session.id === parsedGlobals.activeSession\n                ) || activeSession;\n\n            await dispatch(\n                setActiveSession(matchingSession, { skipInit: true })\n            );\n        }\n\n        if (shouldRunStage(\"updateGlobals\")) {\n            await dispatch(setGlobals(prepareGlobals(parsedGlobals)));\n        }\n\n        if (shouldRunStage(\"fetchSessionDependentData\")) {\n            // `fetchActions` array contains all the fetch API calls that need to be\n            // made in order to obtain all data that the app needs.\n            const fetchActions = [\n                fetchApplicants,\n                fetchApplications,\n                fetchAssignments,\n                fetchContractTemplates,\n                fetchInstructors,\n                fetchPositions,\n            ];\n\n            // The order of fetching here doesn't matter, so dispatch all at once\n            await Promise.all(fetchActions.map((action) => dispatch(action())));\n        }\n    };\n}\n","import {\n    FETCH_ACTIVE_USER_SUCCESS,\n    FETCH_USERS_SUCCESS,\n    UPSERT_USERS_SUCCESS,\n    SET_ACTIVE_USER_ROLE_SUCCESS,\n} from \"../constants\";\nimport { fetchError, upsertError, deleteError } from \"./errors\";\nimport { actionFactory, validatedApiDispatcher } from \"./utils\";\nimport { apiGET, apiPOST } from \"../../libs/apiUtils\";\nimport { usersReducer } from \"../reducers/users\";\nimport { initFromStage } from \"./init\";\n\n// actions\nconst fetchActiveUserSuccess = actionFactory(FETCH_ACTIVE_USER_SUCCESS);\nconst fetchUsersSuccess = actionFactory(FETCH_USERS_SUCCESS);\nconst upsertUserSuccess = actionFactory(UPSERT_USERS_SUCCESS);\nconst setActiveUserRoleSuccess = actionFactory(SET_ACTIVE_USER_ROLE_SUCCESS);\n\n// dispatchers\nexport const fetchActiveUser = validatedApiDispatcher({\n    name: \"fetchActiveUser\",\n    description: \"Fetch the active user\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: () => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiGET(`/${role}/active_user`);\n        dispatch(fetchActiveUserSuccess(data));\n        return data;\n    },\n});\n\nexport const upsertUser = validatedApiDispatcher({\n    name: \"upsertUsers\",\n    description: \"Upserts a user (setting their role(s))\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (user) => async (dispatch) => {\n        const data = await apiPOST(`/admin/users`, user);\n        dispatch(upsertUserSuccess(data));\n        await dispatch(fetchUsers(user));\n    },\n});\n\nexport const fetchUsers = validatedApiDispatcher({\n    name: \"fetchUsers\",\n    description: \"Fetch all users\",\n    propTypes: {},\n    onErrorDispatch: (e) => upsertError(e.toString()),\n    dispatcher: () => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiGET(`/${role}/users`);\n        dispatch(fetchUsersSuccess(data));\n        return data;\n    },\n});\n\nexport const setActiveUserRole = validatedApiDispatcher({\n    name: \"setActiveUserRole\",\n    description: \"Sets the role of the active user\",\n    onErrorDispatch: (e) => deleteError(e.toString()),\n    dispatcher: (payload, options = {}) => async (dispatch) => {\n        await dispatch(setActiveUserRoleSuccess(payload));\n        if (!options.skipInit) {\n            await dispatch(\n                initFromStage(\"setActiveUserRole\", { startAfterStage: true })\n            );\n        }\n    },\n});\n\nexport const debugOnlyFetchUsers = validatedApiDispatcher({\n    name: \"debugOnlyFetchUsers\",\n    description:\n        \"Fetch all users; this is available only in debug mode and bypasses any user permissions\",\n    propTypes: {},\n    onErrorDispatch: (e) => upsertError(e.toString()),\n    dispatcher: () => async (dispatch) => {\n        const data = await apiGET(`/debug/users`);\n        dispatch(fetchUsersSuccess(data));\n    },\n});\n\nexport const debugOnlySetActiveUser = validatedApiDispatcher({\n    name: \"debugOnlySetActiveUser\",\n    description:\n        \"Sets the active user (i.e. fakes the 'logged on' user); available only in debug mode\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (user, options = {}) => async (dispatch) => {\n        const data = await apiPOST(`/debug/active_user`, user);\n        await dispatch(fetchActiveUserSuccess(data));\n        // The new user we switch to might not have the same roles as the previous user.\n        // Default to the highest-authority role available, which is the first in the list.\n        await dispatch(setActiveUserRoleSuccess(data.roles[0]));\n\n        // After the active user has been set, we need to re-download (almost) all data\n        // with the permissions of the new active user.\n        if (!options.skipInit) {\n            await dispatch(initFromStage(\"setActiveUser\"));\n        }\n    },\n});\n\n// selectors\n\n// Each reducer is given an isolated state; instead of needed to remember to\n// pass the isolated state to each selector, `reducer._localStoreSelector` will intelligently\n// search for and return the isolated state associated with `reducer`. This is not\n// a standard redux function.\nexport const localStoreSelector = usersReducer._localStoreSelector;\nexport const usersSelector = (state) => localStoreSelector(state).users;\nexport const activeUserSelector = (state) =>\n    localStoreSelector(state).active_user;\nexport const activeRoleSelector = (state) =>\n    localStoreSelector(state).active_role;\n","import PropTypes from \"prop-types\";\nimport { createSelector } from \"reselect\";\nimport {\n    FETCH_SESSIONS_SUCCESS,\n    FETCH_ONE_SESSION_SUCCESS,\n    UPSERT_ONE_SESSION_SUCCESS,\n    DELETE_ONE_SESSION_SUCCESS,\n    SET_ACTIVE_SESSION,\n} from \"../constants\";\nimport { fetchError, upsertError, deleteError } from \"./errors\";\nimport { actionFactory, validatedApiDispatcher } from \"./utils\";\nimport { apiGET, apiPOST } from \"../../libs/apiUtils\";\nimport { sessionsReducer } from \"../reducers/sessions\";\nimport { activeRoleSelector } from \"./users\";\nimport { initFromStage } from \"./init\";\n\n// actions\nconst fetchSessionsSuccess = actionFactory(FETCH_SESSIONS_SUCCESS);\nconst fetchOneSessionSuccess = actionFactory(FETCH_ONE_SESSION_SUCCESS);\nconst upsertOneSessionSuccess = actionFactory(UPSERT_ONE_SESSION_SUCCESS);\nconst deleteOneSessionSuccess = actionFactory(DELETE_ONE_SESSION_SUCCESS);\nconst setActiveSessionAction = actionFactory(SET_ACTIVE_SESSION);\n\n// dispatchers\nexport const fetchSessions = validatedApiDispatcher({\n    name: \"fetchSessions\",\n    description: \"Fetch sessions\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: () => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiGET(`/${role}/sessions`);\n        await dispatch(fetchSessionsSuccess(data));\n        return data;\n    },\n});\n\nexport const fetchSession = validatedApiDispatcher({\n    name: \"fetchSession\",\n    description: \"Fetch session\",\n    propTypes: { id: PropTypes.any.isRequired },\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (payload) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiGET(`/${role}/sessions/${payload.id}`);\n        dispatch(fetchOneSessionSuccess(data));\n        return data;\n    },\n});\n\nexport const upsertSession = validatedApiDispatcher({\n    name: \"upsertSession\",\n    description: \"Add/insert session\",\n    propTypes: {},\n    onErrorDispatch: (e) => upsertError(e.toString()),\n    dispatcher: (payload) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiPOST(`/${role}/sessions`, payload);\n        dispatch(upsertOneSessionSuccess(data));\n        return data;\n    },\n});\n\nexport const deleteSession = (payload) =>\n    validatedApiDispatcher({\n        name: \"deleteSession\",\n        description: \"Delete session\",\n        propTypes: { id: PropTypes.any.isRequired },\n        onErrorDispatch: (e) => deleteError(e.toString()),\n        dispatcher: async (dispatch, getState) => {\n            const role = activeRoleSelector(getState());\n            const data = await apiPOST(`/${role}/sessions/delete`, payload);\n            dispatch(deleteOneSessionSuccess(data));\n        },\n    });\n\n/**\n * Sets the `activeSession`. `activeSession` is used\n * in other API calls, so changing the active session may\n * trigger changes in other data (for example, `instructors` or `positions`)\n *\n * @param {object} payload - The session to set active\n */\nexport const setActiveSession = validatedApiDispatcher({\n    name: \"setActiveSession\",\n    description: \"Set the active session\",\n    onErrorDispatch: true,\n    dispatcher: (payload, options = {}) => async (dispatch, getState) => {\n        const { skipInit } = options;\n        const state = getState();\n        const currentActiveSession = activeSessionSelector(state);\n        if (currentActiveSession === payload) {\n            return;\n        }\n        // passing in null will unset the active session\n        if (payload == null) {\n            await dispatch(setActiveSessionAction(null));\n            return;\n        }\n        if ((currentActiveSession || { id: null }).id === payload.id) {\n            return;\n        }\n        // If we made it here, the activeSession is changing.\n        await dispatch(setActiveSessionAction(payload));\n        // Make sure all tasks we depend on get run\n        if (!skipInit) {\n            await dispatch(\n                initFromStage(\"setActiveSession\", { startAfterStage: true })\n            );\n        }\n    },\n});\n\n// selectors\nexport const localStoreSelector = sessionsReducer._localStoreSelector;\nexport const sessionsSelector = createSelector(\n    localStoreSelector,\n    (state) => state._modelData\n);\nexport const activeSessionSelector = createSelector(\n    localStoreSelector,\n    (state) => state.activeSession\n);\n","import {\n    FETCH_ONE_OFFER_SUCCESS,\n    SET_OFFER_ACCEPTED_SUCCESS,\n    SET_OFFER_REJECTED_SUCCESS,\n    OFFER_CREATE_SUCCESS,\n    OFFER_EMAIL_SUCCESS,\n    OFFER_NAG_SUCCESS,\n    OFFER_WITHDRAW_SUCCESS,\n} from \"../constants\";\nimport { fetchError } from \"./errors\";\nimport { actionFactory, validatedApiDispatcher } from \"./utils\";\nimport { apiGET, apiPOST } from \"../../libs/apiUtils\";\nimport { fetchAssignment } from \"./assignments\";\nimport { activeRoleSelector } from \"./users\";\n\n// actions\nexport const fetchOfferSuccess = actionFactory(FETCH_ONE_OFFER_SUCCESS);\nexport const setOfferAcceptedSuccess = actionFactory(\n    SET_OFFER_ACCEPTED_SUCCESS\n);\nexport const setOfferRejectedSuccess = actionFactory(\n    SET_OFFER_REJECTED_SUCCESS\n);\nexport const offerCreateSuccess = actionFactory(OFFER_CREATE_SUCCESS);\nexport const offerEmailSuccess = actionFactory(OFFER_EMAIL_SUCCESS);\nexport const offerNagSuccess = actionFactory(OFFER_NAG_SUCCESS);\nexport const offerWithdrawSuccess = actionFactory(OFFER_WITHDRAW_SUCCESS);\n\n// dispatchers\nexport const fetchActiveOfferForAssignment = validatedApiDispatcher({\n    name: \"fetchActiveOfferForAssignment\",\n    description: \"Fetch an offer associated with an assignment\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (payload) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiGET(\n            `/${role}/assignments/${payload.id}/active_offer`\n        );\n        dispatch(fetchOfferSuccess(data));\n        return data;\n    },\n});\n\nexport const setOfferForAssignmentAccepted = validatedApiDispatcher({\n    name: \"setOfferForAssignmentAccepted\",\n    description: \"Set an offer as accepted\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (assignment) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiPOST(\n            `/${role}/assignments/${assignment.id}/active_offer/accept`\n        );\n        dispatch(setOfferAcceptedSuccess(data));\n        // After we update an offer, we should refetch the assignment to make sure\n        // there isn't stale data\n        await dispatch(fetchAssignment(assignment));\n    },\n});\n\nexport const setOfferForAssignmentRejected = validatedApiDispatcher({\n    name: \"setOfferForAssignmentRejected\",\n    description: \"Set an offer as rejected\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (assignment) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiPOST(\n            `/${role}/assignments/${assignment.id}/active_offer/reject`\n        );\n        dispatch(setOfferRejectedSuccess(data));\n        // After we update an offer, we should refetch the assignment to make sure\n        // there isn't stale data\n        await dispatch(fetchAssignment(assignment));\n    },\n});\n\nexport const offerForAssignmentWithdraw = validatedApiDispatcher({\n    name: \"offerForAssignmentWithdraw\",\n    description: \"Withdraw an offer\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (assignment) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiPOST(\n            `/${role}/assignments/${assignment.id}/active_offer/withdraw`\n        );\n        dispatch(offerWithdrawSuccess(data));\n        // After we update an offer, we should refetch the assignment to make sure\n        // there isn't stale data\n        await dispatch(fetchAssignment(assignment));\n    },\n});\n\nexport const offerForAssignmentCreate = validatedApiDispatcher({\n    name: \"offerForAssignmentCreate\",\n    description: \"Create an offer\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (assignment) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiPOST(\n            `/${role}/assignments/${assignment.id}/active_offer/create`\n        );\n        dispatch(offerCreateSuccess(data));\n        // After we update an offer, we should refetch the assignment to make sure\n        // there isn't stale data\n        await dispatch(fetchAssignment(assignment));\n    },\n});\n\nexport const offerForAssignmentEmail = validatedApiDispatcher({\n    name: \"offerForAssignmentEmail\",\n    description: \"Email an offer\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (assignment) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiPOST(\n            `/${role}/assignments/${assignment.id}/active_offer/email`\n        );\n        dispatch(offerEmailSuccess(data));\n        // After we update an offer, we should refetch the assignment to make sure\n        // there isn't stale data\n        await dispatch(fetchAssignment(assignment));\n    },\n});\n\nexport const offerForAssignmentNag = validatedApiDispatcher({\n    name: \"offerForAssignmentNag\",\n    description: \"Send a nag email for an offer\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (assignment) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiPOST(\n            `/${role}/assignments/${assignment.id}/active_offer/nag`\n        );\n        dispatch(offerNagSuccess(data));\n        // After we update an offer, we should refetch the assignment to make sure\n        // there isn't stale data\n        await dispatch(fetchAssignment(assignment));\n    },\n});\n","import React from \"react\";\nimport { Button, ButtonGroup } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { setGlobals, globalsSelector } from \"../../api/actions\";\n\n/**\n * A toggle switch for turning on and off the Mock API. An instance\n * of the Mock API is included in this component, and this component\n * takes no arguments.\n *\n * This component only renders when `process.env.REACT_APP_DEV_FEATURES` is truthy.\n *\n * @export\n * @returns {React.ElementType}\n */\nlet ToggleMockApi = function ToggleMockApi(props) {\n    const { globals, setMockAPIState } = props;\n    const active = globals.mockAPI;\n\n    return (\n        <span\n            title={\n                \"The Mock API simulates the TAPP API but uses browser-based storage. This allows you to test TAPP functionality without a working server.\"\n            }\n        >\n            Mock API{\" \"}\n            <ButtonGroup>\n                <Button\n                    variant={active ? \"primary\" : \"secondary\"}\n                    onClick={() => setMockAPIState(true)}\n                >\n                    On\n                </Button>\n                <Button\n                    variant={active ? \"secondary\" : \"primary\"}\n                    onClick={() => setMockAPIState(false)}\n                >\n                    Off\n                </Button>\n            </ButtonGroup>\n        </span>\n    );\n};\n\nToggleMockApi = connect((state) => ({ globals: globalsSelector(state) }), {\n    setGlobals,\n})(ToggleMockApi);\n\nexport { ToggleMockApi };\n","import React from \"react\";\nimport { Dropdown } from \"react-bootstrap\";\n\nconst ident = () => {};\n\n/**\n * A toggle switch for turning on and off the Mock API. An instance\n * of the Mock API is included in this component, and this component\n * takes no arguments.\n *\n * This component only renders when `process.env.REACT_APP_DEV_FEATURES` is truthy.\n *\n * @export\n * @returns {React.ElementType}\n */\nfunction ActiveUserButton({\n    users = [],\n    activeUser = {},\n    setActiveUser = ident,\n    fetchUsers = ident,\n}) {\n    const [dropdownVisible, setDropdownVisible] = React.useState(false);\n\n    React.useEffect(() => {\n        // Whenever the dropdown is open, fetch a list of all available users.\n        // This would normally not be a good idea, but since this button is only\n        // used in debug mode, it's okay.\n        if (dropdownVisible) {\n            fetchUsers();\n        }\n    }, [dropdownVisible, fetchUsers]);\n\n    return (\n        <span\n            title={\n                \"Set which user you are currently logged in as. This is only available when the server is running in debug mode.\"\n            }\n            className=\"logged-in-as-container\"\n        >\n            <label>Logged in as</label>\n            <Dropdown\n                onSelect={(i) => {\n                    setActiveUser(users[i]);\n                }}\n                onToggle={(desiredVisibility) =>\n                    setDropdownVisible(desiredVisibility)\n                }\n                show={dropdownVisible}\n                alignRight\n            >\n                <Dropdown.Toggle split variant=\"dark\">\n                    {activeUser.utorid}{\" \"}\n                </Dropdown.Toggle>\n                <Dropdown.Menu flip={true}>\n                    {(users || []).map((user, i) => (\n                        <Dropdown.Item\n                            key={i}\n                            eventKey={i}\n                            active={activeUser.utorid === user.utorid}\n                        >\n                            {user.utorid} ({(user.roles || []).join(\", \")})\n                        </Dropdown.Item>\n                    ))}\n                </Dropdown.Menu>\n            </Dropdown>\n        </span>\n    );\n}\n\nexport { ActiveUserButton };\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { NavLink, Switch, Route } from \"react-router-dom\";\n\nimport \"./main.css\";\nimport { Navbar, Nav } from \"react-bootstrap\";\nimport { ToggleMockApi } from \"./mockAPI\";\n\nimport SwaggerUI from \"swagger-ui-react\";\nimport \"swagger-ui-react/swagger-ui.css\";\nimport { mockApiRoutesAsSwaggerPaths } from \"../../api/defs/doc-generation\";\nimport { mockAPI } from \"../../api/mockAPI\";\nimport {\n    setMockAPIState,\n    usersSelector,\n    activeUserSelector,\n    debugOnlySetActiveUser,\n    debugOnlyFetchUsers,\n} from \"../../api/actions\";\nimport { ActiveUserButton } from \"./active-user-switch\";\n\n/**\n * Wrap `\"react-router-dom\"`'s `NavLink` in Bootstrap\n * styling.\n *\n * @param {*} props\n * @returns\n */\nfunction BootstrapNavLink(props) {\n    return (\n        <Nav.Link\n            as={NavLink}\n            activeClassName=\"bg-warning text-dark\"\n            to={props.to}\n        >\n            {props.children}\n        </Nav.Link>\n    );\n}\nBootstrapNavLink.propTypes = {\n    to: PropTypes.string,\n};\n\nconst swaggerData = {\n    openapi: \"3.0.0\",\n    info: {\n        description:\n            \"TAPP is a program for TA management--for making TA assignments and distributing TA contracts.\",\n        title: \"TAPP\",\n    },\n    servers: [\n        { url: \"/api/v1/admin\" },\n        { url: \"/api/v1/instructor\" },\n        { url: \"/api/v1/ta\" },\n        { url: \"/api/v1\" },\n    ],\n    paths: {\n        /* XXX this is hear temporarily to serve as an example for generating Swagger (openapi) documenation\n        \"/bob\": {\n            get: {\n                summary: \"Bob's summary\",\n                tags: [\"helful\"],\n                produces: \"application/json\",\n                responses: {\n                    default: {\n                        description: \"OK\",\n                        content: {\n                            \"application/json\": {\n                                schema: {\n                                    type: \"object\",\n                                    properties: {\n                                        status: {\n                                            type: \"string\",\n                                            enum: [\"success\", \"error\"]\n                                        },\n                                        message: { type: \"string\" },\n                                        payload: {\n                                            type: \"array\",\n                                            items: {\n                                                type: \"object\",\n                                                properties: {\n                                                    name: { type: \"string\" }\n                                                },\n                                                required: [\"name\"]\n                                            }\n                                        }\n                                    },\n                                    required: [\"status\"]\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n*/\n        ...mockApiRoutesAsSwaggerPaths(mockAPI),\n    },\n};\n\nconst ConnectedActiveUserButton = connect(\n    (state) => ({\n        activeUser: activeUserSelector(state),\n        users: usersSelector(state),\n    }),\n    { fetchUsers: debugOnlyFetchUsers, setActiveUser: debugOnlySetActiveUser }\n)(ActiveUserButton);\n\n// When toggled, `ToggleMockApi` will try\n// to refetch all the sessions, so pass it an\n// appropriate dispatcher.\nconst ConnectedToggleMockApi = connect(null, { setMockAPIState })(\n    ToggleMockApi\n);\n\nfunction DevFrame(props) {\n    return (\n        <div id=\"dev-frame\" className=\"bg-info\">\n            <div id=\"dev-frame-header\">\n                <Navbar expand variant=\"dark\">\n                    <Navbar.Brand\n                        href=\"#/\"\n                        title=\"View TAPP in development mode in a framed window.\"\n                    >\n                        Dev Mode\n                    </Navbar.Brand>\n                    <Nav className=\"mr-auto\">\n                        <BootstrapNavLink to=\"/dashboard\">\n                            Dashboard\n                        </BootstrapNavLink>\n                    </Nav>\n                    <Nav className=\"mr-auto\">\n                        <BootstrapNavLink to=\"/api-docs\">\n                            API Docs\n                        </BootstrapNavLink>\n                    </Nav>\n                    <Navbar.Collapse className=\"justify-content-end\">\n                        <ConnectedActiveUserButton />\n                        <ConnectedToggleMockApi />\n                    </Navbar.Collapse>\n                </Navbar>\n            </div>\n            <div id=\"dev-frame-body\">\n                <div id=\"dev-frame-body-inner\">\n                    <Switch>\n                        <Route path=\"/api-docs\">\n                            <SwaggerUI spec={swaggerData} docExpansion=\"list\" />\n                        </Route>\n                        <Route>{props.children}</Route>\n                    </Switch>\n                </div>\n            </div>\n            <div id=\"dev-frame-footer\"></div>\n        </div>\n    );\n}\n\nexport { DevFrame };\n","/**\n * Notifications popup whenever they show up in state.ui.notifications\n */\nimport { connect } from \"react-redux\";\nimport Notifications from \"react-notification-system-redux\";\n\nexport const ConnectedNotifications = connect((state) => ({\n    notifications: state.ui.notifications,\n}))(Notifications);\n","import { SET_SELECTED_ROWS } from \"./constants\";\n\n// actions\nexport const setSelectedRows = (data) => ({\n    type: SET_SELECTED_ROWS,\n    payload: data,\n});\n\n// selectors\nexport const offerTableSelector = (state) => state.ui.offerTable;\n","import React from \"react\";\nimport { Form, Col } from \"react-bootstrap\";\n\n/**\n * A higher-order-function which returns a function that creates editable fields.\n * For example, `fieldEditorFactory(x, setX)(\"I set foo\", \"foo\", \"number\")` returns\n * a react `<input />` element that will call `setX({...x, foo: <new foo val>})` whenever\n * the input changes.\n *\n * A `type=` parameter can be passed in; when used, some types are coerced. For example,\n * `type=number` will automatically coerce strings to numbers so `setBoundData` would be\n * passed an object with the specified attribute cast as a number.\n *\n * @export\n * @param {object} boundData - object whose attributes will be (non-destructively) set\n * @param {function(object): void} setBoundData - setter function\n * @returnType {function(title: string, attr: string, type: string, inputAttrs: object): React.Node}\n */\nexport function fieldEditorFactory(boundData, setBoundData) {\n    /**\n     * Create a callback function which updates the specified attribute.\n     *\n     * @param {string} attr\n     * @returns\n     */\n    function setAttrFactory(attr, coerceFunc = (x) => x) {\n        return (e) => {\n            const newVal = e.target.value || \"\";\n            const newData = { ...boundData, [attr]: coerceFunc(newVal) };\n            setBoundData(newData);\n        };\n    }\n\n    /**\n     * Create a bootstrap form component that updates the specified attr\n     * of `boundData`\n     *\n     * @param {string} title - Label text of the form control\n     * @param {string} attr - attribute of `boundData` to be updated when this form control changes\n     * @param {string?} type - the type of the `<input />` element\n     * @param {object?} inputAttrs - additional attributes to be passed to the `<input />` element\n     * @returnType {React.Node}\n     */\n    function createFieldEditor(title, attr, type = \"text\", inputAttrs = {}) {\n        // Function called on the value before it is passed to setBoundData\n        let coerceFunc = (x) => x;\n        // Function that is called on the value before it is passed to the `<input />`\n        // element\n        let valueFunc = (x) => x || \"\";\n\n        // depending on the type we want to coerce values appropriately\n        switch (type) {\n            case \"number\":\n                coerceFunc = Number;\n                break;\n            case \"date\":\n                coerceFunc = (x) => new Date(x).toISOString();\n                valueFunc = (x) => {\n                    try {\n                        return new Date(x).toISOString().slice(0, 10);\n                    } catch (e) {\n                        return \"\";\n                    }\n                };\n                break;\n            default:\n                break;\n        }\n\n        return (\n            <React.Fragment>\n                <Form.Label>{title}</Form.Label>\n                <Form.Control\n                    type={type}\n                    value={valueFunc(boundData[attr])}\n                    onChange={setAttrFactory(attr, coerceFunc)}\n                    {...inputAttrs}\n                />\n            </React.Fragment>\n        );\n    }\n\n    return createFieldEditor;\n}\n\n/**\n * Place all children side-by-side in a react-boostrap `Form.Row`\n *\n * @export\n * @param {*} props\n * @returnType {React.Node}\n */\nexport function DialogRow(props) {\n    const { children } = props;\n    return (\n        <Form.Row style={{ alignItems: \"baseline\" }}>\n            {React.Children.map(children, (child, index) => {\n                return (\n                    <Form.Group as={Col} key={index}>\n                        {child}\n                    </Form.Group>\n                );\n            })}\n        </Form.Row>\n    );\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Form } from \"react-bootstrap\";\nimport { docApiPropTypes } from \"../../api/defs/doc-generation\";\nimport { fieldEditorFactory, DialogRow } from \"./common-controls\";\n/**\n * Edit a session\n *\n * @export\n * @param {{session: object, setSession: function}} props\n * @returns\n */\nexport function SessionEditor(props) {\n    const { session, setSession } = props;\n\n    const createFieldEditor = fieldEditorFactory(session, setSession);\n\n    return (\n        <Form>\n            <DialogRow>\n                {createFieldEditor(\"Session Name (e.g. 2019 Fall)\", \"name\")}\n                {createFieldEditor(\"Start Date\", \"start_date\", \"date\")}\n                {createFieldEditor(\"End Date\", \"end_date\", \"date\")}\n            </DialogRow>\n            <DialogRow>\n                {createFieldEditor(\n                    \"Rate 1 (pre-January rate)\",\n                    \"rate1\",\n                    \"number\",\n                    {\n                        step: \"0.01\",\n                        min: 0,\n                    }\n                )}\n                {createFieldEditor(\n                    \"Rate 2 (post-January rate)\",\n                    \"rate2\",\n                    \"number\",\n                    {\n                        step: \"0.01\",\n                        min: 0,\n                    }\n                )}\n            </DialogRow>\n        </Form>\n    );\n}\nSessionEditor.propTypes = {\n    session: docApiPropTypes.session.isRequired,\n    setSession: PropTypes.func.isRequired,\n};\n","import React from \"react\";\n\n/**\n * Create a `DiffCell` that will render a field's modification if\n * one is present. Otherwise, render the original value.\n *\n * @param {*} accessor\n * @returns\n */\nexport function createDiffCell({ accessor, Cell }) {\n    accessor = (accessor || \"\").split(\".\");\n    function get(obj) {\n        let ret = obj;\n        for (const key of accessor) {\n            if (ret == null) {\n                return undefined;\n            }\n            ret = ret[key];\n        }\n        return ret;\n    }\n\n    /**\n     * If a particular cell has been modified, render the \"modification description\".\n     * Otherwise, render the actual value.\n     *\n     * @param {*} {original}\n     * @returns\n     */\n    function DiffCell({ original }) {\n        const value = get(original.obj);\n        const changed = get(original.changes);\n        if (changed != null) {\n            return (\n                <div className=\"diff-changed-cell bg-primary text-white\">\n                    {changed}\n                </div>\n            );\n        }\n        // If there is a custom cell renderer, use that. Otherwise, pass the value directly.\n        return Cell ? Cell({ value, original: original.obj }) : value;\n    }\n    return DiffCell;\n}\n\n/**\n * Take a react table column specification and convert it to a specification for a diff table.\n *\n * @param {*} columns\n * @returns\n */\nexport function createDiffColumnsFromColumns(columns) {\n    return columns.map((column) => {\n        const ret = { ...column, Cell: createDiffCell(column) };\n        delete ret.accessor;\n        return ret;\n    });\n}\n","import React from \"react\";\nimport ReactTable from \"react-table\";\nimport { createDiffColumnsFromColumns } from \"./diff-table\";\nimport { Applicant, MinimalApplicant } from \"../api/defs/types\";\nimport { DiffSpec } from \"../libs/diffUtils\";\nimport { Form } from \"react-bootstrap\";\nimport { DialogRow } from \"./forms/common-controls\";\n\nconst DEFAULT_COLUMNS = [\n    { Header: \"Last Name\", accessor: \"last_name\" },\n    { Header: \"First Name\", accessor: \"first_name\" },\n    { Header: \"UTORid\", accessor: \"utorid\" },\n    { Header: \"Student Number\", accessor: \"student_number\" },\n    { Header: \"Email\", accessor: \"email\" },\n    { Header: \"Phone\", accessor: \"phone\" },\n];\n\n/**\n * Display a DiffSpec array of positions and highlight the changes.\n *\n * @export\n * @param {*} { modifiedApplicants }\n * @returns\n */\nexport function ApplicantsDiffList({\n    modifiedApplicants,\n}: {\n    modifiedApplicants: DiffSpec<MinimalApplicant, Applicant>[];\n}) {\n    return (\n        <ApplicantsList\n            applicants={modifiedApplicants as any[]}\n            columns={createDiffColumnsFromColumns(DEFAULT_COLUMNS)}\n        />\n    );\n}\n\nexport function ApplicantsList(props: {\n    applicants: (Omit<Applicant, \"id\"> | Applicant)[];\n    columns?: any[];\n}) {\n    const { applicants, columns = DEFAULT_COLUMNS } = props;\n    return (\n        <ReactTable\n            data={applicants}\n            columns={columns}\n            showPagination={false}\n            minRows={1}\n        />\n    );\n}\n\nconst DEFAULT_APPLICANT = {\n    first_name: \"\",\n    last_name: \"\",\n    email: \"\",\n    utorid: \"\",\n    phone: \"\",\n    student_number: \"\",\n};\n\n/**\n * Edit information about an instructor.\n *\n * @export\n * @param {{instructor: object, setInstructor: function}} props\n * @returns\n */\nexport function ApplicantEditor(props: {\n    applicant: Partial<Applicant>;\n    setApplicant: Function;\n}) {\n    const { applicant: applicantProps, setApplicant } = props;\n    const applicant = { ...DEFAULT_APPLICANT, ...applicantProps };\n\n    /**\n     * Create a callback function which updates the specified attribute\n     * of a position.\n     *\n     * @param {string} attr\n     * @returns\n     */\n    function setAttrFactory(attr: keyof Applicant) {\n        return (e: React.ChangeEvent<HTMLInputElement>) => {\n            const newVal = e.target.value || \"\";\n            const newApplicant = { ...applicant, [attr]: newVal };\n            setApplicant(newApplicant);\n        };\n    }\n\n    /**\n     * Create a bootstrap form component that updates the specified attr\n     * of `position`\n     *\n     * @param {string} title - Label text of the form control\n     * @param {string} attr - attribute of `position` to be updated when this form control changes\n     * @returns {node}\n     */\n    function createFieldEditor(\n        title: string,\n        attr: keyof Applicant,\n        type = \"text\"\n    ) {\n        return (\n            <React.Fragment>\n                <Form.Label>{title}</Form.Label>\n                <Form.Control\n                    type={type}\n                    value={applicant[attr] || \"\"}\n                    onChange={setAttrFactory(attr)}\n                />\n            </React.Fragment>\n        );\n    }\n\n    return (\n        <Form>\n            <Form.Row>\n                <DialogRow>\n                    {createFieldEditor(\"First Name\", \"first_name\")}\n                    {createFieldEditor(\"Last Name\", \"last_name\")}\n                </DialogRow>\n                <DialogRow>\n                    {createFieldEditor(\"Email\", \"email\")}\n                    {createFieldEditor(\"UTORid\", \"utorid\")}\n                </DialogRow>\n                <DialogRow>\n                    {createFieldEditor(\"Student Number\", \"student_number\")}\n                    {createFieldEditor(\"Phone\", \"phone\")}\n                </DialogRow>\n            </Form.Row>\n        </Form>\n    );\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport ReactTable from \"react-table\";\nimport { docApiPropTypes } from \"../api/defs/doc-generation\";\n\nconst DEFAULT_COLUMNS = [\n    { Header: \"Template Name\", accessor: \"template_name\" },\n    {\n        Header: \"Template File\",\n        accessor: \"template_file\",\n    },\n];\n\n/**\n * List the instructors using a ReactTable. `columns` can be passed\n * in to customize columns/cell renderers.\n *\n * @export\n * @param {{instructors: object[], columns: object[]}} props\n * @returns\n */\nexport function ContractTemplatesList(props) {\n    const { contractTemplates, columns = DEFAULT_COLUMNS } = props;\n    return (\n        <ReactTable\n            data={contractTemplates}\n            columns={columns}\n            showPagination={false}\n            minRows={1}\n        />\n    );\n}\nContractTemplatesList.propTypes = {\n    contractTemplates: PropTypes.arrayOf(docApiPropTypes.contractTemplate)\n        .isRequired,\n    columns: PropTypes.arrayOf(\n        PropTypes.shape({ Header: PropTypes.any.isRequired })\n    ),\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport ReactTable from \"react-table\";\nimport { docApiPropTypes } from \"../api/defs/doc-generation\";\nimport { Form } from \"react-bootstrap\";\nimport { DialogRow } from \"./forms/common-controls\";\nimport { createDiffColumnsFromColumns } from \"./diff-table\";\n\nconst DEFAULT_COLUMNS = [\n    { Header: \"Last Name\", accessor: \"last_name\" },\n    { Header: \"First Name\", accessor: \"first_name\" },\n    { Header: \"Email\", accessor: \"email\" },\n    { Header: \"UTORid\", accessor: \"utorid\" },\n];\n\n/**\n * List the instructors using a ReactTable. `columns` can be passed\n * in to customize columns/cell renderers.\n *\n * @export\n * @param {{instructors: object[], columns: object[]}} props\n * @returns\n */\nexport function InstructorsList(props) {\n    const { instructors, columns = DEFAULT_COLUMNS } = props;\n    return (\n        <React.Fragment>\n            <ReactTable\n                data={instructors}\n                columns={columns}\n                showPagination={false}\n                minRows={1}\n            />\n        </React.Fragment>\n    );\n}\nInstructorsList.propTypes = {\n    instructors: PropTypes.oneOfType([\n        PropTypes.arrayOf(docApiPropTypes.instructor),\n        PropTypes.any,\n    ]).isRequired,\n    columns: PropTypes.arrayOf(\n        PropTypes.shape({ Header: PropTypes.any.isRequired })\n    ),\n};\n\nexport function InstructorsDiffList({ modifiedInstructors }) {\n    return (\n        <InstructorsList\n            instructors={modifiedInstructors}\n            columns={createDiffColumnsFromColumns(DEFAULT_COLUMNS)}\n        />\n    );\n}\n\nconst DEFAULT_INSTRUCTOR = {\n    utorid: \"\",\n    last_name: \"\",\n    first_name: \"\",\n};\n\n/**\n * Edit information about an instructor.\n *\n * @export\n * @param {{instructor: object, setInstructor: function}} props\n * @returns\n */\nexport function InstructorEditor(props) {\n    const { instructor: instructorProps, setInstructor } = props;\n    const instructor = { ...DEFAULT_INSTRUCTOR, ...instructorProps };\n\n    /**\n     * Create a callback function which updates the specified attribute\n     * of a position.\n     *\n     * @param {string} attr\n     * @returns\n     */\n    function setAttrFactory(attr) {\n        return (e) => {\n            const newVal = e.target.value || \"\";\n            const newInstructor = { ...instructor, [attr]: newVal };\n            setInstructor(newInstructor);\n        };\n    }\n\n    /**\n     * Create a bootstrap form component that updates the specified attr\n     * of `position`\n     *\n     * @param {string} title - Label text of the form control\n     * @param {string} attr - attribute of `position` to be updated when this form control changes\n     * @returns {node}\n     */\n    function createFieldEditor(title, attr, type = \"text\") {\n        return (\n            <React.Fragment>\n                <Form.Label>{title}</Form.Label>\n                <Form.Control\n                    type={type}\n                    value={instructor[attr] || \"\"}\n                    onChange={setAttrFactory(attr)}\n                />\n            </React.Fragment>\n        );\n    }\n\n    return (\n        <Form>\n            <Form.Row>\n                <DialogRow>\n                    {createFieldEditor(\"First Name\", \"first_name\")}\n                    {createFieldEditor(\"Last Name\", \"last_name\")}\n                </DialogRow>\n                <DialogRow>\n                    {createFieldEditor(\"Email\", \"email\")}\n                    {createFieldEditor(\"UTORid\", \"utorid\")}\n                </DialogRow>\n            </Form.Row>\n        </Form>\n    );\n}\nInstructorEditor.propTypes = {\n    instructor: docApiPropTypes.instructor,\n    setInstructor: PropTypes.func,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { FaEdit } from \"react-icons/fa\";\nimport { Modal, Button, Spinner } from \"react-bootstrap\";\n\nimport \"./edit-field-widgets.css\";\n\n/**\n * A dialog allowing one to edit `props.value`. `onChagne` is called\n * when \"save\" is clicked while editing this value.\n *\n * @param {*} props\n * @returns\n */\nfunction EditFieldDialog(props) {\n    const { title, value, show, onHide, onChange } = props;\n    const [fieldVal, setFieldVal] = React.useState(value);\n    const [inProgress, setInProgress] = React.useState(false);\n\n    function cancelClick() {\n        setFieldVal(value);\n        onHide();\n    }\n\n    function saveClick() {\n        async function doSave() {\n            // eslint-disable-next-line\n            if (fieldVal != value) {\n                setInProgress(true);\n                // Only call `onChange` if the value has changed\n                await onChange(fieldVal, value);\n            }\n        }\n        doSave().finally(() => {\n            //onHide();\n            setInProgress(false);\n        });\n    }\n    // When a confirm operation is in progress, a spinner is displayed; otherwise\n    // it's hidden\n    const spinner = inProgress ? (\n        <Spinner animation=\"border\" size=\"sm\" className=\"mr-1\" />\n    ) : null;\n\n    const changeIndicator =\n        // eslint-disable-next-line\n        fieldVal == value ? null : (\n            <span>\n                Change from{\" \"}\n                <span className=\"field-dialog-formatted-name\">{value}</span> to{\" \"}\n                <span className=\"field-dialog-formatted-name\">{fieldVal}</span>\n            </span>\n        );\n\n    return (\n        <Modal show={show} onHide={cancelClick}>\n            <Modal.Header closeButton>\n                <Modal.Title>{title}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <input\n                    type=\"text\"\n                    value={fieldVal}\n                    onChange={(e) => setFieldVal(e.currentTarget.value)}\n                />{\" \"}\n                {changeIndicator}\n            </Modal.Body>\n            <Modal.Footer>\n                <Button onClick={cancelClick} variant=\"outline-secondary\">\n                    Cancel\n                </Button>\n                <Button onClick={saveClick}>{spinner}Save</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n\n/**\n * An edit icon that appears on hover.\n *\n * @param {*} props\n * @returns\n */\nfunction EditFieldIcon(props) {\n    const { title, hidden, onClick } = props;\n    if (hidden) {\n        return null;\n    }\n    return (\n        <div\n            className=\"show-on-hover edit-glyph\"\n            onClick={onClick}\n            title={title}\n        >\n            <FaEdit />\n        </div>\n    );\n}\n\n/**\n * Adds an \"edit\" icon which shows up when hovering on the wrapped widget.\n * Clicking the \"edit\" icon opens a dialog that allows one to edit the value.\n * `onChange` is called if \"save\" is pressed in the edit dialog.\n *\n * @export\n * @param {{children, title, value, onChange: function, editable: boolean}} props\n * @returns\n */\nexport function EditableField(props) {\n    const { children, title, value, onChange, editable = true } = props;\n    const [dialogShow, setDialogShow] = React.useState(false);\n    return (\n        <div className=\"show-on-hover-wrapper\">\n            {children}\n            <EditFieldIcon\n                title={title}\n                hidden={!editable}\n                onClick={() => setDialogShow(true)}\n            />\n            <EditFieldDialog\n                title={title}\n                value={value}\n                onChange={onChange}\n                show={dialogShow}\n                onHide={() => setDialogShow(false)}\n            />\n        </div>\n    );\n}\nEditFieldDialog.propTypes = {\n    title: PropTypes.node,\n    value: PropTypes.any.isRequired,\n    onChange: PropTypes.func,\n    editable: PropTypes.bool,\n};\n","import React from \"react\";\nimport { Modal, Button } from \"react-bootstrap\";\n\nexport function DeleteInstructorDialog(props) {\n    const { show, onHide, onDelete, instructor } = props;\n    if (!instructor) {\n        // This check ensures that the instructor object exists before trying to access instructor.last_name\n        // and instructor.first_name, which will cause a runtime error if instructor is null.\n        return null;\n    } else {\n        return (\n            <Modal show={show} onHide={onHide}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Delete Instructor</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    Are you sure you want to delete instructor{\" \"}\n                    {`${instructor.last_name}, ${instructor.first_name}`}? This\n                    action cannot be undone.\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button onClick={onHide} variant=\"light\">\n                        Cancel\n                    </Button>\n                    <Button onClick={onDelete} title=\"Delete Instructor\">\n                        Delete\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n    instructorsSelector,\n    upsertInstructor,\n    deleteInstructor,\n    positionsSelector,\n} from \"../../api/actions\";\nimport { InstructorsList } from \"../../components/instructors\";\nimport { EditableField } from \"../../components/edit-field-widgets\";\nimport { DeleteInstructorDialog } from \"./delete-instructor-dialog\";\nimport { FaTrash, FaLock, FaTimes } from \"react-icons/fa\";\n\n/**\n * A cell that renders editable applicant information\n *\n * @param {*} props\n * @returns\n */\nfunction EditableCell(props) {\n    const title = `Edit ${props.column.Header}`;\n    const { upsertInstructor, field } = props;\n    function onChange(newVal) {\n        const applicantId = props.original.id;\n        upsertInstructor({ id: applicantId, [field]: newVal });\n    }\n    return (\n        <EditableField\n            title={title}\n            value={props.value || \"\"}\n            onChange={onChange}\n        >\n            {props.value}\n        </EditableField>\n    );\n}\n\nfunction EditableInstructorsList(props) {\n    const {\n        upsertInstructor,\n        deleteInstructor,\n        inDeleteMode,\n        positions,\n        ...rest\n    } = props;\n\n    const [deleteDialogVisible, setDeleteDialogVisible] = React.useState(false);\n    const [instructorToDelete, setInstructorToDelete] = React.useState(null);\n\n    // Bind an `ApplicantCell` to a particular field\n    function generateCell(field) {\n        return (props) => (\n            <EditableCell\n                field={field}\n                upsertInstructor={upsertInstructor}\n                {...props}\n            />\n        );\n    }\n\n    const instructorCurrentlyAssignedHash = {};\n    for (const position of positions || []) {\n        for (const instructor of position.instructors || []) {\n            instructorCurrentlyAssignedHash[instructor.id] = true;\n        }\n    }\n\n    // props.original contains the row data for this particular instructor\n    function CellDeleteButton({ original: instructor }) {\n        const disabled = instructorCurrentlyAssignedHash[instructor.id];\n        if (disabled) {\n            return (\n                <div className=\"delete-button-container\">\n                    <FaLock\n                        className=\"delete-instructor-button disabled\"\n                        title=\"This instructor is assigned to a position and so cannot be deleted. Unassign the instructor from all positions to delete.\"\n                    />\n                </div>\n            );\n        }\n        return (\n            <div className=\"delete-button-container\">\n                <FaTimes\n                    className=\"delete-instructor-button\"\n                    title={`Delete ${instructor.last_name}, ${instructor.first_name}`}\n                    onClick={() => {\n                        setInstructorToDelete(instructor);\n                        setDeleteDialogVisible(true);\n                    }}\n                />\n            </div>\n        );\n    }\n\n    const columns = [\n        {\n            Header: (\n                <FaTrash className=\"delete-instructor-column-header-icon\" />\n            ),\n            Cell: CellDeleteButton,\n            show: inDeleteMode,\n            maxWidth: 32,\n            resizable: false,\n        },\n        {\n            Header: \"Last Name\",\n            accessor: \"last_name\",\n            Cell: generateCell(\"last_name\"),\n        },\n        {\n            Header: \"First Name\",\n            accessor: \"first_name\",\n            Cell: generateCell(\"first_name\"),\n        },\n        {\n            Header: \"Email\",\n            accessor: \"email\",\n            Cell: generateCell(\"email\"),\n        },\n        {\n            Header: \"UTORid\",\n            accessor: \"utorid\",\n            Cell: generateCell(\"utorid\"),\n        },\n    ];\n\n    return (\n        <React.Fragment>\n            <InstructorsList columns={columns} {...rest} />\n            <DeleteInstructorDialog\n                show={deleteDialogVisible}\n                onHide={() => {\n                    setDeleteDialogVisible(false);\n                    setInstructorToDelete(null);\n                }}\n                onDelete={() => {\n                    deleteInstructor(instructorToDelete);\n                    setDeleteDialogVisible(false);\n                }}\n                instructor={instructorToDelete}\n            />\n        </React.Fragment>\n    );\n}\n\n/**\n * EditableInstructorsList that has been connected to the redux store\n * for live updates and editability.\n */\nexport const ConnectedInstructorsList = connect(\n    (state) => ({\n        instructors: instructorsSelector(state),\n        positions: positionsSelector(state),\n    }),\n    { upsertInstructor, deleteInstructor }\n)(EditableInstructorsList);\n","/**\n * Trims the input string. If the `x` is not a string, it is\n * coerced\n *\n * @param {string} x\n * @returns\n */\nexport function strip(x) {\n    if (x == null) {\n        return \"\";\n    }\n    return (\"\" + x).trim();\n}\n\n/**\n * Formats the input date string to be human readable\n * Input string is of the form 2019-01-01T00:00:00.000Z\n * Output string is of the form January 1, 2019\n * @param {string} dateString\n */\nexport function formatDate(dateString) {\n    if (!dateString) {\n        return dateString;\n    }\n    // Normalize the date string so we can compensate for timezone issues.\n    // This string is now formatted YYYY-MM-DD\n    const normalizedDateString = new Date(dateString).toJSON().slice(0, 10);\n    // Add timezone offset information so that Javascript will\n    // interpret the date in the current timezone\n    const date = new Date(`${normalizedDateString}T00:00:00.000`);\n    return `${date.toLocaleDateString(\"en-CA\", {\n        month: \"short\",\n        year: \"numeric\",\n        day: \"numeric\",\n    })}`;\n}\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { InstructorEditor } from \"../../components/instructors\";\nimport { Modal, Button, Alert } from \"react-bootstrap\";\nimport { upsertInstructor, instructorsSelector } from \"../../api/actions\";\nimport { strip } from \"../../libs/utils\";\n\nconst BLANK_INSTRUCTOR = {\n    first_name: \"\",\n    last_name: \"\",\n    email: \"\",\n    utorid: \"\",\n};\n\n/**\n * Find if there is a conflicting instructor in the passed in list\n * of instructors, or if any required fields are incorrect.\n *\n * @param {object} instructor\n * @param {object[]} instructors\n */\nfunction getConficts(instructor, instructors) {\n    const ret = { delayShow: \"\", immediateShow: \"\" };\n    if (\n        !strip(instructor.utorid) ||\n        !strip(instructor.first_name) ||\n        !strip(instructor.last_name)\n    ) {\n        ret.delayShow = \"A first name, last name, and utorid is required\";\n    }\n    const matchingInstructor = instructors.find(\n        (x) => strip(x.utorid) === strip(instructor.utorid)\n    );\n    if (matchingInstructor) {\n        ret.immediateShow = (\n            <p>\n                Another instructor exists with utorid={instructor.utorid}:{\" \"}\n                <b>\n                    {matchingInstructor.first_name}{\" \"}\n                    {matchingInstructor.last_name}\n                </b>\n            </p>\n        );\n    }\n    return ret;\n}\n\nfunction AddInstructorDialog(props) {\n    const { show, onHide = () => {}, instructors, upsertInstructor } = props;\n    const [newInstructor, setNewInstructor] = React.useState(BLANK_INSTRUCTOR);\n\n    React.useEffect(() => {\n        if (!show) {\n            // If the dialog is hidden, reset the state\n            setNewInstructor(BLANK_INSTRUCTOR);\n        }\n    }, [show]);\n\n    function createInstructor() {\n        upsertInstructor(newInstructor);\n        onHide();\n    }\n\n    const conflicts = getConficts(newInstructor, instructors);\n\n    return (\n        <Modal show={show} onHide={onHide}>\n            <Modal.Header closeButton>\n                <Modal.Title>Add Instructor</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <InstructorEditor\n                    instructor={newInstructor}\n                    setInstructor={setNewInstructor}\n                />\n                {conflicts.immediateShow ? (\n                    <Alert variant=\"danger\">{conflicts.immediateShow}</Alert>\n                ) : null}\n            </Modal.Body>\n            <Modal.Footer>\n                <Button onClick={onHide} variant=\"light\">\n                    Cancel\n                </Button>\n                <Button\n                    onClick={createInstructor}\n                    title={conflicts.delayShow || \"Create Instructor\"}\n                    disabled={\n                        !!conflicts.delayShow || !!conflicts.immediateShow\n                    }\n                >\n                    Create Instructor\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n/**\n * AddInstructorDialog that has been connected to the redux store\n */\nexport const ConnectedAddInstructorDialog = connect(\n    (state) => ({ instructors: instructorsSelector(state) }),\n    { upsertInstructor }\n)(AddInstructorDialog);\n","import React from \"react\";\nimport classNames from \"classnames\";\nimport { Dropdown } from \"react-bootstrap\";\n\nimport \"./action-buttons.css\";\n\ninterface PropsWithChildren {\n    children: React.ReactNode;\n}\ninterface ActionButtonProps extends PropsWithChildren {\n    icon?: React.ReactNode | Function;\n    onClick?: () => any;\n    active?: boolean;\n}\n\ninterface ActionMenuButtonProps extends ActionButtonProps {\n    menu: React.ReactNode;\n}\n\n/**\n * Wrap `icon` in a span (if it is non-null). `icon` may be a function,\n * in which case it is rendered as a react element.\n *\n * @param {(React.ReactNode | Function)} icon\n * @returns {React.ReactNode}\n */\nfunction wrapIcon(icon: React.ReactNode | Function): React.ReactNode {\n    if (!icon) {\n        return icon;\n    }\n    if (typeof icon === \"function\") {\n        const Icon = icon;\n        icon = <Icon />;\n    }\n    return <span className=\"mr-2\">{icon}</span>;\n}\n\n/**\n * Container to house `ActionButton`s.\n *\n * @export\n * @param {PropsWithChildren} { children }\n * @returns\n */\nexport function ActionsList({ children }: PropsWithChildren) {\n    return (\n        <div className=\"page-actions\">\n            <Dropdown>{children}</Dropdown>\n        </div>\n    );\n}\n\n/**\n * Label a group of `ActionButton`s\n *\n * @export\n * @param {PropsWithChildren} { children }\n * @returns\n */\nexport function ActionHeader({ children }: PropsWithChildren) {\n    return <Dropdown.Header>{children}</Dropdown.Header>;\n}\n\n/**\n * An action button. Behaves like a button but is styled to fit in the `ActionsList`\n * area. Accepts an optional `icon` and an `active` boolean which determines whether\n * the button is permanently highlighted.\n *\n * @export\n * @param {ActionButtonProps} {\n *     icon = null,\n *     children,\n *     active,\n *     ...rest\n * }\n * @returns\n */\nexport function ActionButton({\n    icon = null,\n    children,\n    active,\n    ...rest\n}: ActionButtonProps) {\n    const iconNode = wrapIcon(icon);\n    return (\n        <Dropdown.Item as=\"button\" className={classNames({ active })} {...rest}>\n            {iconNode}\n            {children}\n        </Dropdown.Item>\n    );\n}\n\n/**\n * Display an action button with a `menu` that can be toggled. `menu` is expected\n * to be a React component. If you want a list of items in the menu, you may wrap\n * them in a `<React.Fragment />` tag. You can (and should) use `ActionButton`s in\n * the menu.\n *\n * @export\n * @param {ActionMenuButtonProps} {\n *     icon = null,\n *     children,\n *     menu = null,\n *     active,\n *     ...rest\n * }\n * @returns\n */\nexport function ActionMenuButton({\n    icon = null,\n    children,\n    menu = null,\n    active,\n    ...rest\n}: ActionMenuButtonProps) {\n    const [menuOpen, setMenuOpen] = React.useState(false);\n    const [menuHeight, setMenuHeight] = React.useState(0);\n    const menuSizerRef = React.useRef<HTMLDivElement>(null);\n\n    React.useEffect(() => {\n        if (menuSizerRef == null || menuSizerRef.current == null) {\n            return;\n        }\n        setMenuHeight(menuSizerRef.current.clientHeight);\n    }, [children]);\n\n    const iconNode = wrapIcon(icon);\n\n    return (\n        <>\n            <div\n                className={classNames(\"action-accordion\", {\n                    dropright: !menuOpen,\n                })}\n            >\n                <button\n                    className={classNames(\"dropdown-item\", { active })}\n                    {...rest}\n                >\n                    {iconNode}\n                    {children}\n                </button>\n                <button\n                    className=\"dropdown-item dropdown-toggle\"\n                    onClick={() => setMenuOpen(!menuOpen)}\n                ></button>\n            </div>\n            <div\n                className={classNames(\"action-accordion-item-container\", {\n                    closed: !menuOpen,\n                })}\n                style={{ height: menuHeight }}\n            >\n                <div ref={menuSizerRef}>{menu}</div>\n            </div>\n        </>\n    );\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button, Dropdown, ButtonGroup } from \"react-bootstrap\";\nimport { ActionMenuButton, ActionButton } from \"./action-buttons\";\nimport { FaDownload } from \"react-icons/fa\";\n\n/**\n * Export button that offers the ability to export as Spreadsheet/CSV/JSON.\n * `onClick` is called when the button is clicked and supplied with\n * one of \"spreadsheet\", \"csv\", or \"json\".\n *\n * @param {*} props\n * @returns\n */\nexport function ExportButton(props) {\n    const { onClick: clickCallback } = props;\n\n    function onClick(option) {\n        if (clickCallback) {\n            clickCallback(option);\n        }\n    }\n\n    return (\n        <Dropdown as={ButtonGroup} onSelect={onClick}>\n            <Button onClick={() => onClick(\"spreadsheet\")}>Export</Button>\n            <Dropdown.Toggle split id=\"dropdown-split-basic\" />\n            <Dropdown.Menu>\n                <Dropdown.Item eventKey=\"spreadsheet\">\n                    As Spreadsheet\n                </Dropdown.Item>\n                <Dropdown.Item eventKey=\"csv\">As CSV</Dropdown.Item>\n                <Dropdown.Item eventKey=\"json\">As JSON</Dropdown.Item>\n            </Dropdown.Menu>\n        </Dropdown>\n    );\n}\nExportButton.propTypes = {\n    onClick: PropTypes.func.isRequired,\n};\n\n/**\n * Export button that offers the ability to export as Spreadsheet/CSV/JSON.\n * `onClick` is called when the button is clicked and supplied with\n * one of \"spreadsheet\", \"csv\", or \"json\".\n *\n * @param {*} props\n * @returns\n */\nexport function ExportActionButton(props) {\n    const { onClick: clickCallback } = props;\n\n    function onClick(option) {\n        if (clickCallback) {\n            clickCallback(option);\n        }\n    }\n\n    return (\n        <ActionMenuButton\n            onClick={() => onClick(\"spreadsheet\")}\n            icon={FaDownload}\n            menu={\n                <>\n                    <ActionButton onClick={() => onClick(\"spreadsheet\")}>\n                        As Spreadsheet\n                    </ActionButton>\n                    <ActionButton onClick={() => onClick(\"csv\")}>\n                        As CSV\n                    </ActionButton>\n                    <ActionButton onClick={() => onClick(\"json\")}>\n                        As JSON\n                    </ActionButton>\n                </>\n            }\n        >\n            Export\n        </ActionMenuButton>\n    );\n}\nExportButton.propTypes = {\n    onClick: PropTypes.func.isRequired,\n};\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport XLSX from \"xlsx\";\nimport {\n    Button,\n    Modal,\n    Form,\n    Spinner,\n    Container,\n    Row,\n    Col,\n} from \"react-bootstrap\";\nimport { ActionButton } from \"./action-buttons\";\nimport { FaUpload } from \"react-icons/fa\";\n\nconst DEFAULT_LABEL = \"Select a spreadsheet, CSV, or JSON file.\";\n\n/**\n * A dialog for handling file input. The work of showing validation/content is handled by `dialogContent`.\n * This component handles displaying and parting a file specified by an <input type=\"file\" /> node.\n *\n * @param {*} {\n *     dialogOpen,\n *     onCancel,\n *     onClose,\n *     onConfirm,\n *     dialogContent,\n *     onFileChange,\n * } - `onCancel` means the cancel button was clicked. `onClose` means the `x` was clicked or there was a click outside of the dialog window.\n * @returns\n */\nfunction ImportDialog({\n    dialogOpen,\n    onCancel,\n    onClose,\n    onConfirm,\n    dialogContent,\n    onFileChange,\n    setInProgress: parentSetInProgress,\n}) {\n    const [fileInputLabel, setFileInputLabel] = React.useState(DEFAULT_LABEL);\n    const [fileArrayBuffer, setFileArrayBuffer] = React.useState(null);\n    const [fileContents, setFileContents] = React.useState(null);\n    const [inProgress, _setInProgress] = React.useState(false);\n\n    // When we are processing we want to set a spinner button\n    // in the dialog as well as communicate to our parent\n    // that we are in the midst of processing. Therefore, we\n    // call both the internal `setInProgress` function as well\n    // as the one from our parent.\n    function setInProgress(val) {\n        _setInProgress(val);\n        if (typeof parentSetInProgress === \"function\") {\n            parentSetInProgress(val);\n        }\n    }\n\n    if (!(onCancel instanceof Function)) {\n        onCancel = () => console.warn(\"No onCancel function set for dialog\");\n    }\n\n    // When file contents changes\n    React.useEffect(() => {\n        if (!fileContents) {\n            return;\n        }\n        if (onFileChange instanceof Function) {\n            onFileChange(fileContents);\n        }\n    }, [fileContents, onFileChange]);\n\n    // Wrap the <input type=\"file\" /> in an effect that parses the file\n    React.useEffect(() => {\n        if (!fileArrayBuffer) {\n            return;\n        }\n\n        // Attempt to decode the file as JSON. If that doesn't work,\n        // we process it as a spreadsheet.\n\n        const rawData = new Uint8Array(fileArrayBuffer);\n        try {\n            const str = new TextDecoder().decode(rawData);\n            setFileContents({ data: JSON.parse(str), fileType: \"json\" });\n            return;\n            // eslint-disable-next-line\n        } catch (e) {}\n        try {\n            const workbook = XLSX.read(rawData, { type: \"array\" });\n            const firstSheet = workbook.SheetNames[0];\n            setFileContents({\n                data: XLSX.utils.sheet_to_json(workbook.Sheets[firstSheet]),\n                fileType: \"spreadsheet\",\n            });\n            return;\n            // eslint-disable-next-line\n        } catch (e) {}\n\n        console.warn(\n            \"Could not determine file type for\",\n            fileInputLabel,\n            fileArrayBuffer\n        );\n    }, [fileArrayBuffer, fileInputLabel]);\n\n    function _onFileChange(event) {\n        const file = event.target.files[0];\n        setFileInputLabel(file.name);\n\n        const reader = new FileReader();\n        reader.onload = (e) => setFileArrayBuffer(e.target.result);\n        reader.readAsArrayBuffer(file);\n    }\n\n    function _onConfirm() {\n        if (!(onConfirm instanceof Function)) {\n            return;\n        }\n        setInProgress(true);\n        // We wrap `onConfirm` in an async function which will automatically\n        // convert it to a promise if needed.\n        (async () => onConfirm(fileContents))()\n            .then(() => {\n                setInProgress(false);\n            })\n            .catch(console.error)\n            .finally(() => {\n                setInProgress(false);\n                setFileArrayBuffer(null);\n                setFileContents(null);\n                setFileInputLabel(DEFAULT_LABEL);\n            });\n    }\n\n    // When a confirm operation is in progress, a spinner is displayed; otherwise\n    // it's hidden\n    const spinner = inProgress ? (\n        <Spinner animation=\"border\" size=\"sm\" className=\"mr-1\" />\n    ) : null;\n\n    return (\n        <Modal\n            show={dialogOpen}\n            onHide={onClose}\n            size=\"lg\"\n            dialogClassName=\"wide-modal\"\n        >\n            <Modal.Header closeButton>\n                <Modal.Title>Import From File</Modal.Title>\n            </Modal.Header>\n\n            <Modal.Body>\n                <Container>\n                    <Row className=\"mb-3\">\n                        <Col>\n                            <Form>\n                                <Form.File\n                                    label={fileInputLabel}\n                                    onChange={_onFileChange}\n                                    custom\n                                ></Form.File>\n                            </Form>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>{dialogContent}</Col>\n                    </Row>\n                </Container>\n            </Modal.Body>\n\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={onCancel}>\n                    Cancel\n                </Button>\n                <Button variant=\"primary\" onClick={_onConfirm}>\n                    {spinner}\n                    Confirm\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n\n/**\n * Renders an dropdown import button component that imports data from file.\n * When clicked, a dialog is opened where a user can select a file to import.\n *\n * @param onFileChange - function called when a file is selected. Do any processing or validation in response to this callback.\n * @param dialgoContent - Content of the dialog to be show. Can be a preview of the data or a validation message.\n * @param onConfirm - Called when the \"Confirm\" button is pressed. Can be an async function. If so, a spinner will be displayed between the time \"Confirm\" is pressed and the time `onConfirm` finishes executing.\n */\nexport function ImportButton({\n    onFileChange,\n    dialogContent,\n    onConfirm,\n    setInProgress,\n}) {\n    const [dialogOpen, setDialogOpen] = useState(false);\n\n    /**\n     * closes the dialog by setting dialogOpen to false\n     */\n    function handleClose() {\n        setDialogOpen(false);\n    }\n\n    function onCancel() {\n        onFileChange(null);\n        handleClose();\n    }\n\n    async function _onConfirm(...args) {\n        await onConfirm(...args);\n        setDialogOpen(false);\n    }\n\n    return (\n        <>\n            <Button onClick={() => setDialogOpen(true)}>Import</Button>\n            <ImportDialog\n                dialogOpen={dialogOpen}\n                onCancel={onCancel}\n                onClose={handleClose}\n                onFileChange={onFileChange}\n                dialogContent={dialogContent}\n                onConfirm={_onConfirm}\n                setInProgress={setInProgress}\n            />\n        </>\n    );\n}\n\nImportButton.propTypes = {\n    uploadFunc: PropTypes.func,\n};\n\n/**\n * Renders an dropdown import button component that imports data from file.\n * When clicked, a dialog is opened where a user can select a file to import.\n *\n * @param onFileChange - function called when a file is selected. Do any processing or validation in response to this callback.\n * @param dialgoContent - Content of the dialog to be show. Can be a preview of the data or a validation message.\n * @param onConfirm - Called when the \"Confirm\" button is pressed. Can be an async function. If so, a spinner will be displayed between the time \"Confirm\" is pressed and the time `onConfirm` finishes executing.\n */\nexport function ImportActionButton({\n    onFileChange,\n    dialogContent,\n    onConfirm,\n    setInProgress,\n}) {\n    const [dialogOpen, setDialogOpen] = useState(false);\n\n    /**\n     * closes the dialog by setting dialogOpen to false\n     */\n    function handleClose() {\n        setDialogOpen(false);\n    }\n\n    function onCancel() {\n        onFileChange(null);\n        handleClose();\n    }\n\n    async function _onConfirm(...args) {\n        await onConfirm(...args);\n        setDialogOpen(false);\n    }\n\n    return (\n        <>\n            <ActionButton icon={FaUpload} onClick={() => setDialogOpen(true)}>\n                Import\n            </ActionButton>\n            <ImportDialog\n                dialogOpen={dialogOpen}\n                onCancel={onCancel}\n                onClose={handleClose}\n                onFileChange={onFileChange}\n                dialogContent={dialogContent}\n                onConfirm={_onConfirm}\n                setInProgress={setInProgress}\n            />\n        </>\n    );\n}\n\nImportButton.propTypes = {\n    uploadFunc: PropTypes.func,\n};\n","/*\n * A collection of utility functions for dealing with imported data (e.g., spreadsheets\n * and JSON files).\n */\nimport FuzzySet from \"fuzzyset\";\nimport XLSX from \"xlsx\";\nimport * as chrono from \"chrono-node\";\n\n/**\n * Validates `data` based on the specified `schema`. At the moment this\n * function only checks that every key specified by `schema.requiredKeys` is\n * non-null.\n *\n * @export\n * @param {*} data\n * @param {*} schema\n */\nexport function validate(data, schema) {\n    const { requiredKeys } = schema;\n    for (const item of data) {\n        for (const key of requiredKeys) {\n            if (item[key] == null) {\n                throw new Error(\n                    `Item \"${JSON.stringify(\n                        item\n                    )}\" missing required property \"${key}\"`\n                );\n            }\n        }\n    }\n}\n\n/**\n * Delete all properties from `keyMap` that have `value` as\n * their value. This function mutates `keyMap`.\n *\n * @param {*} value\n * @param {*} keyMap\n * @returns\n */\nfunction deleteReferences(value, keyMap) {\n    for (const key in keyMap) {\n        if (keyMap[key] === value) {\n            delete keyMap[key];\n        }\n    }\n    return keyMap;\n}\n\n/**\n * Do fuzzy matching looking for the best approximation of\n * `keyMap[targetKey]`. E.g., if `keyMap = { foo: \"bar\" }`,\n * then `findMatchingKey(\"Foo\", keyMap)` would return `\"bar\"`.\n *\n * If no fuzzy match is found, `null` is returned.\n *\n * @param {*} targetKey\n * @param {*} [keyMap={}]\n * @returns {string | null}\n */\nfunction findMatchingKey(targetKey, keyMap = {}) {\n    if (targetKey in keyMap) {\n        return keyMap[targetKey];\n    }\n    const fuzzySet = FuzzySet(Object.keys(keyMap));\n    // We set a 70% match threshold to prevent mismatches.\n    const matches = fuzzySet.get(targetKey, null, 0.7);\n    if (matches) {\n        // Since we already checked for 100% matches, `matches` will\n        // always be an array of results of the form [[<%match>, <value matched>]]\n        const matchedKey = matches[0][1];\n        return keyMap[matchedKey];\n    }\n\n    return null;\n}\n\n/**\n * Given a `schema`, use fuzzy matching to match column names to\n * schema values.\n *\n * @class SpreadsheetRowMapper\n */\nexport class SpreadsheetRowMapper {\n    constructor(schema) {\n        this.keys = schema.keys;\n        this.keyMap = { ...schema.keyMap };\n        // `keys` are always valid, so make sure they are in the keymap.\n        for (const key of this.keys) {\n            this.keyMap[key] = key;\n        }\n        // Maintain a copy of `this.keyMap`. Items are deleted\n        // from this copy when they are matched (and cached). That\n        // way we don't accidentally double-match an item.\n        this.unmatchedKeys = { ...this.keyMap };\n\n        // This stores associations that we've found in\n        // the spreadsheet already.\n        this.empiricalKeyMap = {};\n        this.unknownKeys = {};\n    }\n    /**\n     * Inputs an object, e.g. `{\"First Name\": \"Joe\", \"Last Name\": \"Smith\"}`\n     * and returns a formatted object where the keys have been replaced by\n     * keys from the schema. E.g., this function might return `{first_name: \"Joe\", last_name: \"Smith\"}`.\n     *\n     * The search for appropriate keys is done with a fuzzy matching algorithm, so\n     * the processed spreadsheet headers don't need to exactly match what's given.\n     *\n     * @param {*} row\n     * @param {boolean} log - whether or not to show lookups using `console.log`\n     * @memberof SpreadsheetRowMapper\n     */\n    formatRow(row, log = true) {\n        const ret = {};\n        for (const [key, value] of Object.entries(row)) {\n            // If we've found this key before, use the cached version.\n            if (key in this.empiricalKeyMap) {\n                ret[this.empiricalKeyMap[key]] = value;\n                continue;\n            }\n            // If we have cached that we don't know a key, continue\n            if (key in this.unknownKeys) {\n                continue;\n            }\n            const matchedKey = findMatchingKey(key, this.unmatchedKeys);\n            if (matchedKey == null) {\n                if (log) {\n                    console.log(\n                        \"Could not find a key corresponding to spreadsheet column\",\n                        `\"${key}\"`\n                    );\n                }\n                this.unknownKeys[key] = true;\n                continue;\n            }\n            if (log) {\n                console.log(\n                    \"Assuming association between spreadsheet column\",\n                    `\"${key}\"`,\n                    \"and the key\",\n                    `\"${matchedKey}\"`\n                );\n            }\n            this.empiricalKeyMap[key] = matchedKey;\n            deleteReferences(matchedKey, this.unmatchedKeys);\n            ret[matchedKey] = value;\n        }\n\n        return ret;\n    }\n}\n\n/**\n * Find a suitable match in the `people` array for `name`. `name` can\n * be a utorid or a string `\"Last, First\"` or a string `\"First Last\"`.\n * If no suitable match is found, an error is thrown.\n *\n * @export\n * @param {string} name\n * @param {{utorid: string, first_name: string, last_name: string}[]} people\n * @returns\n */\nexport function matchByUtoridOrName(name, people) {\n    let match = people.find((x) => x.utorid === name);\n    if (match) {\n        // We found an exact match by UTORid\n        return match;\n    }\n\n    const nameHash = {};\n    for (const person of people) {\n        // We want to be able to match no matter the order in which the names are specified.\n        nameHash[`${person.last_name}, ${person.first_name}`] = person;\n        nameHash[`${person.first_name} ${person.last_name}`] = person;\n    }\n\n    const fuzzySet = FuzzySet(Object.keys(nameHash));\n    match = fuzzySet.get(name, null, 0.7);\n    if (match) {\n        let matchedKey = match;\n        if (Array.isArray(match)) {\n            // If we get an array as a result, it will be of the form [[<%match>, <value matched>]]\n            matchedKey = match[0][1];\n        }\n        return nameHash[matchedKey];\n    }\n\n    throw new Error(`Could not find a match for \"${name}\"`);\n}\n\n/**\n * Parse a date string or integer and return a normalized date string.\n *\n * @param {string | number} str - input date; either a string or an excel date integer\n * @returns {string} - date in YYYY-MM-DD:T00:00:00.000 format\n */\nfunction parseDate(str) {\n    // Dates parsed from excel will come in as a number. Convert those to an appropriate string first.\n    if (typeof str === \"number\") {\n        // Convert to seconds since epoc\n        const sec = Math.round((str - 25569) * 86400 * 1000);\n        // Excel ignores timezone information, so we need to parse this and\n        // remove the timezone tag.\n        str = new Date(sec).toJSON().replace(\"Z\", \"\");\n    }\n    // Parse the date accepting many different formats\n    let date = chrono.parseDate(str);\n    // We need to jump through some hoops to remove all the timezone information.\n    try {\n        return date.toJSON().replace(/T.*/, \"T00:00:00.000Z\");\n    } catch (e) {\n        throw new Error(`Cannot parse \"${str}\" as date`);\n    }\n}\n\n/**\n * Use `schema` to normalize `data` to be an array of objects specified\n * by `schema`. `data` is expected to be an object with `fileType`\n * and `data` attributes. `data.fileType` may be `\"json\"` or `\"spreadsheet\"`.\n * `\"json\"` data is expected to already match the schema. `\"spreadsheet\"` data\n * is converted to match the schema using fuzzy matching on column names (if needed).\n *\n * @export\n * @param {{fileType: \"json\" | \"spreadsheet\", data: any}} data\n * @param {*} [schema={ keys: [], requiredKeys: [] }]\n * @returns\n */\nexport function normalizeImport(\n    data,\n    schema = { keys: [], requiredKeys: [], dateColumns: [] }\n) {\n    const { keys, baseName } = schema;\n    let ret = [];\n    if (data.fileType === \"json\") {\n        // Unwrap data so that it's just an array\n        data = data.data;\n        if (data[baseName]) {\n            data = data[baseName];\n        }\n        for (const item of data) {\n            const newItem = {};\n            for (const key of keys) {\n                newItem[key] = item[key];\n            }\n            ret.push(newItem);\n        }\n    }\n\n    if (data.fileType === \"spreadsheet\") {\n        // `data` should be an array of objects indexed by column name.\n        // E.g., [{\"First Name\": \"Joe\", \"Last Name\": \"Smith\"}, ...]\n        data = data.data;\n\n        const rowMapper = new SpreadsheetRowMapper(schema);\n\n        for (const row of data) {\n            ret.push(rowMapper.formatRow(row));\n        }\n    }\n\n    if (schema.dateColumns && schema.dateColumns.length > 0) {\n        ret = ret.map((row) => {\n            const newRow = { ...row };\n            for (const col of schema.dateColumns) {\n                if (newRow[col] != null) {\n                    newRow[col] = parseDate(newRow[col]);\n                }\n            }\n            return newRow;\n        });\n    }\n\n    validate(ret, schema);\n\n    return ret;\n}\n\n/**\n *  Create a `File` object containing of the specified format.\n *\n * @param {{toSpreadsheet: func, toJson: func}} formatters - Formatters return an array of objects (usable as spreadsheet rows) or a javascript object to be passed to JSON.stringify\n * @param {\"xlsx\" | \"csv\" | \"json\"} dataFormat\n * @param {string} filePrefix\n * @returns {File}\n */\nexport function dataToFile(formatters, dataFormat, filePrefix = \"\") {\n    const fileName = `${filePrefix}${\n        filePrefix ? \"_\" : \"\"\n    }export_${new Date().toLocaleDateString(\"en-CA\", {\n        year: \"numeric\",\n        month: \"numeric\",\n        day: \"numeric\",\n    })}`;\n\n    if (dataFormat === \"spreadsheet\" || dataFormat === \"csv\") {\n        const workbook = XLSX.utils.book_new();\n        const sheet = XLSX.utils.aoa_to_sheet(formatters.toSpreadsheet());\n        XLSX.utils.book_append_sheet(workbook, sheet, \"Instructors\");\n\n        const bookType = dataFormat === \"csv\" ? \"csv\" : \"xlsx\";\n\n        // We convert the data into a blob and return it so that it can be downloaded\n        // by the user's browser\n        const file = new File(\n            [XLSX.write(workbook, { type: \"array\", bookType })],\n            `${fileName}.${bookType}`,\n            {\n                type:\n                    \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n            }\n        );\n        return file;\n    }\n\n    if (dataFormat === \"json\") {\n        const file = new File(\n            [JSON.stringify(formatters.toJson(), null, 4)],\n            `${fileName}.json`,\n            {\n                type: \"application/json\",\n            }\n        );\n        return file;\n    }\n\n    throw new Error(\n        `Cannot process data to format \"${dataFormat}\"; try \"spreadsheet\" or \"json\".`\n    );\n}\n","/*\n * A collection of utility functions for use when exporting data.\n */\n\nimport {\n    WageChunk,\n    Session,\n    Position,\n    Instructor,\n    Assignment,\n    ContractTemplate,\n    Applicant,\n    MinimalWageChunk,\n    MinimalSession,\n    MinimalPosition,\n    MinimalInstructor,\n    MinimalAssignment,\n    MinimalContractTemplate,\n    MinimalApplicant,\n} from \"../api/defs/types\";\n\n/**\n * Determine whether `wageChunks` can be derived from `session`. E.g.,\n * the rates match the session rates.\n *\n * @param {*} wageChunks\n * @param {*} session\n * @returns {boolean}\n */\nfunction wageChunksMatchPositionAndSession(\n    wageChunks: WageChunk[],\n    position: Position,\n    session: Session\n): boolean {\n    if (!session || !Array.isArray(wageChunks)) {\n        return true;\n    }\n    // A single wage chunk matching the session rate is derivable\n    if (wageChunks.length === 1) {\n        const chunk: WageChunk = wageChunks[0];\n        if (\n            chunk.start_date === position.start_date &&\n            chunk.end_date === position.end_date &&\n            (chunk.rate === session.rate1 || chunk.rate === session.rate2)\n        ) {\n            return true;\n        }\n    }\n    // Two wage chunks split at January matching the session rates are derivable\n    if (wageChunks.length === 2) {\n        let [chunk1, chunk2] = wageChunks;\n        // If for some reason the wage chunks don't have dates, they aren't derivable.\n        if (\n            !chunk1.end_date ||\n            !chunk1.end_date ||\n            !chunk2.start_date ||\n            !chunk2.end_date\n        ) {\n            return false;\n        }\n        // Make sure the wage chunks are ordered by date\n        if (chunk1.end_date > chunk2.start_date) {\n            const tmp = chunk1;\n            chunk1 = chunk2;\n            chunk2 = tmp;\n        }\n\n        // If the wage chunk dates don't match the position's dates,\n        // we're not derivable.\n        if (\n            chunk1.start_date !== position.start_date ||\n            chunk2.end_date !== position.end_date\n        ) {\n            return false;\n        }\n\n        // If the wage chunks are split exactly at a year boundary and the rates\n        // match the session rates, then we *are* derivable.\n        if (\n            (chunk1.end_date || \"\").slice(5, 10) === \"12-31\" &&\n            (chunk2.start_date || \"\").slice(5, 10) === \"01-01\" &&\n            chunk1.rate === session.rate1 &&\n            chunk2.rate === session.rate2\n        ) {\n            return true;\n        }\n    }\n    return false;\n}\n\n/**\n * Prepare a minimal representation of the specified object suitable for\n * export. The returned object will contain exactly the fields needed to\n * perfectly reconstruct the object on import an no others. E.g., instructors\n * referenced by a position will only be referenced by UTORid (and won't have information\n * about their names, etc.).\n *\n * These function also strips all `id` fields, since these are database specific and\n * not used when importing.\n */\nexport const prepareMinimal = {\n    session: function (session: Session): MinimalSession {\n        return {\n            name: session.name,\n            start_date: session.start_date,\n            end_date: session.end_date,\n            rate1: session.rate1,\n            rate2: session.rate2,\n        };\n    },\n    contractTemplate: function (\n        contractTemplate: ContractTemplate\n    ): MinimalContractTemplate {\n        return {\n            template_name: contractTemplate.template_name,\n            template_file: contractTemplate.template_file,\n        };\n    },\n    instructor: function (instructor: Instructor): MinimalInstructor {\n        return {\n            first_name: instructor.first_name,\n            last_name: instructor.last_name,\n            utorid: instructor.utorid,\n            email: instructor.email,\n        };\n    },\n    position: function (position: Position): MinimalPosition {\n        return {\n            position_code: position.position_code,\n            position_title: position.position_title,\n            hours_per_assignment: position.hours_per_assignment,\n            start_date: position.start_date,\n            end_date: position.end_date,\n            duties: position.duties,\n            qualifications: position.qualifications,\n            ad_hours_per_assignment: position.ad_hours_per_assignment,\n            ad_num_assignments: position.ad_num_assignments,\n            ad_open_date: position.ad_open_date,\n            ad_close_date: position.ad_close_date,\n            desired_num_assignments: position.desired_num_assignments,\n            current_enrollment: position.current_enrollment,\n            current_waitlisted: position.current_waitlisted,\n            instructors: position.instructors.map(\n                (instructor) => instructor.utorid\n            ),\n            contract_template: position.contract_template.template_name,\n        };\n    },\n    wageChunk: function (wageChunk: WageChunk): MinimalWageChunk {\n        return {\n            start_date: wageChunk.start_date,\n            end_date: wageChunk.end_date,\n            rate: wageChunk.rate,\n            hours: wageChunk.hours,\n        };\n    },\n    assignment: function (\n        assignment: Assignment,\n        session: Session\n    ): MinimalAssignment {\n        const ret: MinimalAssignment = {\n            utorid: assignment.applicant.utorid,\n            position_code: assignment.position.position_code,\n        };\n        // If there is an contract_override_pdf, we store it, otherwise\n        // the contract comes from the `position` so we don't need to store it.\n        if (assignment.contract_override_pdf) {\n            ret.contract_override_pdf = assignment.contract_override_pdf;\n        }\n\n        // If the start and end dates match the position, there is no need to\n        // store them.\n        const position = assignment.position;\n        if (\n            (assignment.start_date &&\n                assignment.start_date !== position.start_date) ||\n            (assignment.end_date && assignment.end_date !== position.end_date)\n        ) {\n            ret.start_date = assignment.start_date || position.start_date;\n            ret.end_date = assignment.end_date || position.end_date;\n        }\n        // If there is a single wage chunk and the rate matches the session rate,\n        // then just store the number of hours. Otherwise, store the wage chunk(s)\n        if (\n            !Array.isArray(assignment.wage_chunks) ||\n            assignment.wage_chunks.length === 0\n        ) {\n            ret.hours = assignment.hours;\n        } else if (\n            session &&\n            wageChunksMatchPositionAndSession(\n                assignment.wage_chunks,\n                position,\n                session\n            )\n        ) {\n            // The rate is the same as the session rate, so we don't need to store the\n            // wage chunk details\n            ret.hours = assignment.hours;\n        } else {\n            ret.wage_chunks = assignment.wage_chunks.map((chunk) =>\n                prepareMinimal.wageChunk(chunk)\n            );\n        }\n\n        return ret;\n    },\n    applicant: function (applicant: Applicant): MinimalApplicant {\n        return {\n            first_name: applicant.first_name,\n            last_name: applicant.last_name,\n            utorid: applicant.utorid,\n            email: applicant.email,\n            student_number: applicant.student_number,\n            phone: applicant.phone,\n        };\n    },\n};\n\n/**\n * The function type of a function that creates an upsertable\n * object. I.e., it may or may not have an ID field.\n *\n * @interface PrepareUpsertable\n * @template T - Minimal representation\n * @template U - Full representation\n * @template V - Context attributes that are required to create a full representation\n */\n\ninterface PrepareUpsertable<T, U, Context> {\n    (minimal: T, context: Omit<Context, \"id\">): Omit<U, \"id\">;\n    (minimal: T, context: Context): U;\n}\n\ninterface Context {\n    session: Session;\n    instructors: Instructor[];\n    contractTemplates: ContractTemplate[];\n    positions: Position[];\n    applicants: Applicant[];\n}\n\ninterface IdContext extends Context {\n    id: number;\n}\n\ninterface prepareFull {\n    session: PrepareUpsertable<MinimalSession, Session, { id: number }>;\n    contractTemplate: PrepareUpsertable<\n        MinimalContractTemplate,\n        ContractTemplate,\n        { id: number }\n    >;\n    instructor: PrepareUpsertable<\n        MinimalInstructor,\n        Instructor,\n        { id: number }\n    >;\n    applicant: PrepareUpsertable<MinimalApplicant, Applicant, { id: number }>;\n    position: PrepareUpsertable<\n        MinimalPosition,\n        Position,\n        {\n            id: number;\n            contractTemplates: ContractTemplate[];\n            instructors: Instructor[];\n        }\n    >;\n    wageChunk: PrepareUpsertable<MinimalWageChunk, WageChunk, { id: number }>;\n    assignment: PrepareUpsertable<\n        MinimalAssignment,\n        Assignment,\n        {\n            id: number;\n            session: Session;\n            applicants: Applicant[];\n            positions: Position[];\n        }\n    >;\n}\n\nexport const prepareFull: prepareFull = {\n    session: function (minSession: MinimalSession, context?: any): any {\n        const { id } = context || {};\n        if (id != null) {\n            return { id, ...minSession };\n        }\n        return minSession;\n    },\n    contractTemplate: function (\n        minContractTemplate: MinimalContractTemplate,\n        context?: any\n    ): any {\n        const { id } = context || {};\n        if (id != null) {\n            return { id, ...minContractTemplate };\n        }\n        return minContractTemplate;\n    },\n    instructor: function (\n        minInstructor: MinimalInstructor,\n        context?: any\n    ): any {\n        const { id } = context || {};\n        if (id != null) {\n            return { id, ...minInstructor };\n        }\n        return minInstructor;\n    },\n    applicant: function (minApplicant: MinimalApplicant, context?: any): any {\n        const { id } = context || {};\n        if (id != null) {\n            return { id, ...minApplicant };\n        }\n        return minApplicant;\n    },\n    position: function (minPosition: MinimalPosition, context?: any): any {\n        const { id, instructors, contractTemplates }: Partial<IdContext> =\n            context || {};\n        if (!Array.isArray(instructors)) {\n            throw new Error(\n                \"You must pass an array of instructors to reconstruct a position\"\n            );\n        }\n        if (!Array.isArray(contractTemplates)) {\n            throw new Error(\n                \"You must pass an array of contract templates to reconstruct a position\"\n            );\n        }\n\n        const ret: Partial<Position> = {\n            position_code: minPosition.position_code,\n            position_title: minPosition.position_title,\n            hours_per_assignment: minPosition.hours_per_assignment,\n            start_date: minPosition.start_date,\n            end_date: minPosition.end_date,\n            duties: minPosition.duties,\n            qualifications: minPosition.qualifications,\n            ad_hours_per_assignment: minPosition.ad_hours_per_assignment,\n            ad_num_assignments: minPosition.ad_num_assignments,\n            ad_open_date: minPosition.ad_open_date,\n            ad_close_date: minPosition.ad_close_date,\n            desired_num_assignments: minPosition.desired_num_assignments,\n            current_enrollment: minPosition.current_enrollment,\n            current_waitlisted: minPosition.current_waitlisted,\n        };\n\n        // Add in the id if we have it\n        if (id != null) {\n            ret.id = id;\n        }\n\n        // Search for and add the contract template\n        const contract_template = contractTemplates.find(\n            (template) =>\n                template.template_name === minPosition.contract_template\n        );\n        if (contract_template == null) {\n            throw new Error(\n                `Couldn't find contract template with name \"${minPosition.contract_template}\"`\n            );\n        }\n        ret.contract_template = contract_template;\n\n        // Search for an add the list of instructors\n        const instructorList = minPosition.instructors.map((utorid) => {\n            const match = instructors.find((x) => x.utorid === utorid);\n            if (match == null) {\n                throw new Error(\n                    `Could not find instructor with utorid \"${utorid}\"`\n                );\n            }\n            return match;\n        });\n        ret.instructors = instructorList;\n\n        return ret;\n    },\n    wageChunk: function (minWageChunk: MinimalWageChunk, context?: any): any {\n        const { id } = context || {};\n        if (id != null) {\n            return { id, ...minWageChunk };\n        }\n        return minWageChunk;\n    },\n    assignment: function (\n        minAssignment: MinimalAssignment,\n        context?: any\n    ): any {\n        const { id, positions, applicants, session }: Partial<IdContext> =\n            context || {};\n        if (!Array.isArray(positions)) {\n            throw new Error(\n                \"You must pass an array of positions to reconstruct an assignment\"\n            );\n        }\n        if (!Array.isArray(applicants)) {\n            throw new Error(\n                \"You must pass an array of applicants to reconstruct an assignment\"\n            );\n        }\n        if (!session) {\n            throw new Error(\n                \"You must pass a session to reconstruct an assignment\"\n            );\n        }\n\n        const ret: Partial<Assignment> = {\n            contract_override_pdf: minAssignment.contract_override_pdf,\n        };\n\n        // Add in the id if we have it\n        if (id != null) {\n            ret.id = id;\n        }\n\n        if (minAssignment.hours != null) {\n            ret.hours = minAssignment.hours;\n        }\n\n        // Attach the position\n        const position = positions.find(\n            (x) => x.position_code === minAssignment.position_code\n        );\n        if (position == null) {\n            throw new Error(\n                `Cannot find position with position code \"${minAssignment.position_code}\"`\n            );\n        }\n        ret.position = position;\n\n        // Attach the applicant\n        const applicant = applicants.find(\n            (x) => x.utorid === minAssignment.utorid\n        );\n        if (applicant == null) {\n            throw new Error(\n                `Couldn't find applicant with UTORid \"${minAssignment.utorid}\"`\n            );\n        }\n        ret.applicant = applicant;\n\n        // Attach the wage chunks\n        if (Array.isArray(minAssignment.wage_chunks)) {\n            let hours = 0;\n            for (const chunk of minAssignment.wage_chunks) {\n                hours += chunk.hours;\n            }\n            ret.hours = hours;\n            ret.wage_chunks = minAssignment.wage_chunks as WageChunk[];\n        }\n\n        // Compute the start and end dates\n        ret.start_date = minAssignment.start_date || position.start_date;\n        ret.end_date = minAssignment.end_date || position.end_date;\n\n        return ret;\n    },\n};\n","/*\n * A collection of utility functions for comparing imported data and producing diffs.\n */\n\nimport {\n    Session,\n    Position,\n    Instructor,\n    Assignment,\n    ContractTemplate,\n    MinimalPosition,\n    MinimalInstructor,\n    MinimalAssignment,\n    Utorid,\n    Applicant,\n    MinimalApplicant,\n} from \"../api/defs/types\";\nimport { prepareMinimal, prepareFull } from \"./exportUtils\";\nimport { matchByUtoridOrName } from \"./importExportUtils\";\n\n/**\n * Type of a diff between an object and existing objects\n * obtained by finding the differences between minimal representations.\n *\n * @interface DiffSpec\n * @template T - type of minimal representation (e.g., MinimalInstructor)\n * @template U - type of full representation (e.g. Instructor)\n */\nexport interface DiffSpec<T, U> {\n    status: \"new\" | \"duplicate\" | \"modified\";\n    changes: Partial<Record<keyof T, string>>;\n    obj: U | Omit<U, \"id\">;\n}\n\n/**\n * Compute the difference between a supplied array of objects and the existing objects\n * of that type. Results are supplied as an array of DiffSpec objects.\n */\nexport const diffImport = {\n    instructorsListFromField: function (\n        list: Utorid[] | string,\n        context: { instructors: Instructor[] }\n    ): Instructor[] {\n        const instructors = context.instructors;\n        if (Array.isArray(list)) {\n            return list.map((utorid) => {\n                const match = instructors.find((x) => x.utorid === utorid);\n                if (!match) {\n                    throw new Error(\n                        `Cannot find instructor with UTORid ${utorid}`\n                    );\n                }\n                return match;\n            });\n        }\n        list = list.split(\";\").map((x) => x.trim());\n\n        return list.map((name) => matchByUtoridOrName(name, instructors));\n    },\n    instructor: function (\n        instructor: MinimalInstructor,\n        context: { instructors: Instructor[] }\n    ): DiffSpec<MinimalInstructor, Instructor> {\n        const existingInstructors = context.instructors;\n        const ret: DiffSpec<MinimalInstructor, Instructor> = {\n            status: \"new\",\n            changes: {},\n            obj: null as any, // Set to any temporarily to keep typescript from complaining\n        };\n        // Check to see if there is a matching instructor in the existing list\n        const matchingInstructor = existingInstructors.find(\n            (x) => x.utorid === instructor.utorid\n        );\n\n        if (matchingInstructor) {\n            ret.status = \"duplicate\";\n            const minimal = prepareMinimal.instructor(matchingInstructor);\n            for (const _prop in minimal) {\n                const prop = _prop as keyof MinimalInstructor;\n                const oldVal = minimal[prop];\n                const newVal = instructor[prop];\n                if (!isSame(oldVal, newVal)) {\n                    ret.status = \"modified\";\n                    ret.changes[prop] = `\"${oldVal}\" → \"${newVal}\"`;\n                }\n            }\n            ret.obj = prepareFull.instructor(instructor, {\n                id: matchingInstructor.id,\n            });\n        } else {\n            ret.obj = prepareFull.instructor(instructor, {});\n        }\n\n        return ret;\n    },\n    instructors: function (\n        importedInstructors: MinimalInstructor[],\n        context: { instructors: Instructor[] }\n    ): DiffSpec<MinimalInstructor, Instructor>[] {\n        return importedInstructors.map((instructor) =>\n            diffImport.instructor(instructor, context)\n        );\n    },\n    position: function (\n        position: MinimalPosition,\n        context: {\n            positions: Position[];\n            instructors: Instructor[];\n            contractTemplates: ContractTemplate[];\n        }\n    ): DiffSpec<MinimalPosition, Position> {\n        const instructors = context.instructors;\n        const contractTemplates = context.contractTemplates;\n        const existingPositions = context.positions;\n        const ret: DiffSpec<MinimalPosition, Position> = {\n            status: \"new\",\n            changes: {},\n            obj: null as any, // Set to any temporarily to keep typescript from complaining\n        };\n        // Check to see if there is a matching instructor in the existing list\n        const matchingPosition = existingPositions.find(\n            (x) => x.position_code === position.position_code\n        );\n\n        if (matchingPosition) {\n            ret.status = \"duplicate\";\n            const minimal = prepareMinimal.position(matchingPosition);\n            for (const _prop in minimal) {\n                const prop = _prop as keyof MinimalPosition;\n                const oldVal = minimal[prop];\n                const newVal = position[prop];\n                if (!isSame(oldVal, newVal)) {\n                    ret.status = \"modified\";\n                    ret.changes[prop] = `\"${oldVal}\" → \"${newVal}\"`;\n                    // Format dates and instructor lists differently\n                    if (prop === \"start_date\" || prop === \"end_date\") {\n                        ret.changes[prop] = `\"${(\"\" + oldVal).slice(\n                            0,\n                            10\n                        )}\" → \"${(\"\" + newVal).slice(0, 10)}\"`;\n                    }\n                    if (prop === \"instructors\") {\n                        const oldInstructors = diffImport.instructorsListFromField(\n                            oldVal as any[],\n                            { instructors }\n                        );\n                        const newInstructors = diffImport.instructorsListFromField(\n                            newVal as any[],\n                            { instructors }\n                        );\n                        ret.changes[prop] = `${oldInstructors\n                            .map((x) => `${x.last_name}, ${x.first_name}`)\n                            .join(\"; \")} → ${newInstructors\n                            .map((x) => `${x.last_name}, ${x.first_name}`)\n                            .join(\"; \")}`;\n                    }\n                }\n            }\n            ret.obj = prepareFull.position(position, {\n                id: matchingPosition.id,\n                instructors,\n                contractTemplates,\n            });\n        } else {\n            ret.obj = prepareFull.position(position, {\n                instructors,\n                contractTemplates,\n            });\n        }\n\n        return ret;\n    },\n    positions: function (\n        importedPositions: MinimalPosition[],\n        context: {\n            positions: Position[];\n            instructors: Instructor[];\n            contractTemplates: ContractTemplate[];\n        }\n    ): DiffSpec<MinimalPosition, Position>[] {\n        return importedPositions.map((position) =>\n            diffImport.position(position, context)\n        );\n    },\n    assignments: function (\n        importedAssignments: MinimalAssignment[],\n        context: {\n            assignments: Assignment[];\n            positions: Position[];\n            applicants: Applicant[];\n            session: Session;\n        }\n    ): DiffSpec<MinimalAssignment, Assignment>[] {\n        return importedAssignments.map((assignment) =>\n            diffImport.assignment(assignment, context)\n        );\n    },\n    assignment: function (\n        assignment: MinimalAssignment,\n        context: {\n            assignments: Assignment[];\n            positions: Position[];\n            applicants: Applicant[];\n            session: Session;\n        }\n    ): DiffSpec<MinimalAssignment, Assignment> {\n        const existingAssignments = context.assignments;\n        const positions = context.positions;\n        const applicants = context.applicants;\n        const session = context.session;\n        const ret: DiffSpec<MinimalAssignment, Assignment> = {\n            status: \"new\",\n            changes: {},\n            obj: null as any, // Set to any temporarily to keep typescript from complaining\n        };\n        // Check to see if there is a matching instructor in the existing list\n        const assignmentHash = hashAssignment(assignment);\n        const matchingAssignment = existingAssignments.find(\n            (x) => hashAssignment(x) === assignmentHash\n        );\n\n        if (matchingAssignment) {\n            ret.status = \"duplicate\";\n            const minimal = prepareMinimal.assignment(\n                matchingAssignment,\n                session\n            );\n            // A MinimalAssignment has fields `position_code` and `utorid` which an\n            // Assignment does not. However, since a match must have the same position\n            // code and UTORid, we will never detect a change in these fields. Thus,\n            // they can be safely ignored.\n            for (const _prop in minimal) {\n                const prop = _prop as keyof MinimalAssignment;\n                const oldVal = minimal[prop];\n                const newVal = assignment[prop];\n                if (!isSame(oldVal, newVal)) {\n                    ret.status = \"modified\";\n                    ret.changes[prop] = `\"${oldVal}\" → \"${newVal}\"`;\n                    // Format dates and instructor lists differently\n                    if (prop === \"start_date\" || prop === \"end_date\") {\n                        ret.changes[prop] = `\"${(\"\" + oldVal).slice(\n                            0,\n                            10\n                        )}\" → \"${(\"\" + newVal).slice(0, 10)}\"`;\n                    }\n                    // If the `.hours` are null, it means that they are derived\n                    // from the wage chunks. However, it would be confusing to see\n                    // a message like \"55 -> undefined\" in the modification list,\n                    // so we recompute the hours from the wage chunks to display a better\n                    // message.\n                    if (\n                        prop === \"hours\" &&\n                        newVal == null &&\n                        Array.isArray(assignment.wage_chunks)\n                    ) {\n                        let hours = 0;\n                        for (const chunk of assignment.wage_chunks) {\n                            hours += chunk.hours;\n                        }\n                        if (oldVal === hours) {\n                            ret.changes[prop] = `${hours} (wage chunk change)`;\n                        } else {\n                            ret.changes[\n                                prop\n                            ] = `${oldVal} → ${hours} (wage chunk change)`;\n                        }\n                    }\n                    if (prop === \"wage_chunks\") {\n                        ret.changes[prop] = `\"${JSON.stringify(\n                            oldVal\n                        )}\" → \"${JSON.stringify(newVal)}\"`;\n                    }\n                }\n            }\n            ret.obj = prepareFull.assignment(assignment, {\n                id: matchingAssignment.id,\n                session,\n                positions,\n                applicants,\n            });\n        } else {\n            ret.obj = prepareFull.assignment(assignment, {\n                session,\n                positions,\n                applicants,\n            });\n        }\n\n        return ret;\n    },\n    applicants: function (\n        importedApplicants: MinimalApplicant[],\n        context: { applicants: Applicant[] }\n    ): DiffSpec<MinimalApplicant, Applicant>[] {\n        return importedApplicants.map((applicant) =>\n            diffImport.applicant(applicant, context)\n        );\n    },\n    applicant: function (\n        applicant: MinimalApplicant,\n        context: { applicants: Applicant[] }\n    ): DiffSpec<MinimalApplicant, Applicant> {\n        const existingApplicants = context.applicants;\n        const ret: DiffSpec<MinimalApplicant, Applicant> = {\n            status: \"new\",\n            changes: {},\n            obj: null as any, // Set to any temporarily to keep typescript from complaining\n        };\n        // Check to see if there is a matching instructor in the existing list\n        const matchingApplicant = existingApplicants.find(\n            (x) => x.utorid === applicant.utorid\n        );\n\n        if (matchingApplicant) {\n            ret.status = \"duplicate\";\n            const minimal = prepareMinimal.applicant(matchingApplicant);\n            for (const _prop in minimal) {\n                const prop = _prop as keyof MinimalApplicant;\n                const oldVal = minimal[prop];\n                const newVal = applicant[prop];\n                if (!isSame(oldVal, newVal)) {\n                    ret.status = \"modified\";\n                    ret.changes[prop] = `\"${oldVal}\" → \"${newVal}\"`;\n                }\n            }\n            ret.obj = prepareFull.applicant(applicant, {\n                id: matchingApplicant.id,\n            });\n        } else {\n            ret.obj = prepareFull.applicant(applicant, {});\n        }\n\n        return ret;\n    },\n};\n\n/**\n * Distinguish between a MinimalAssignment and an Assignment\n *\n * @param {(MinimalAssignment | Assignment)} assignment\n * @returns {assignment is  MinimalAssignment}\n */\nfunction isMinimalAssignment(\n    assignment: MinimalAssignment | Assignment\n): assignment is MinimalAssignment {\n    // `Assignment` has a `.position` attribute, but not a `.position_code`\n    if ((assignment as MinimalAssignment).position_code) {\n        return true;\n    }\n    return false;\n}\n\n/**\n * Create a hash of an assignment/minimal assignment based on the position_code\n * and the applicant's UTORid.\n *\n * @param {(MinimalAssignment | Assignment)} assignment\n * @returns {string}\n */\nfunction hashAssignment(assignment: MinimalAssignment | Assignment): string {\n    let position_code, applicant_utorid;\n    if (isMinimalAssignment(assignment)) {\n        position_code = assignment.position_code;\n        applicant_utorid = assignment.utorid;\n    } else {\n        position_code = assignment.position.position_code;\n        applicant_utorid = assignment.applicant.utorid;\n    }\n    return `${position_code}/${applicant_utorid}`;\n}\n\n/**\n * Compare two objects and determine if they are the same. In this check,\n * `null`, `undefined`, and `\"\"` are counted as the same as each other (but\n * they are distinct from `0`). This is used for detecting diffs from spreadsheets\n * where `null` and `\"\"` can't be distinguished.\n *\n * @param {*} obj1\n * @param {*} obj2\n * @returns {boolean}\n */\nfunction isSame(obj1: any, obj2: any): boolean {\n    if (obj1 === obj2) {\n        return true;\n    }\n\n    if (typeof obj1 !== typeof obj2) {\n        return false;\n    }\n\n    if (typeof obj1 === \"number\") {\n        return (isNaN(obj1) && isNaN(obj2)) || obj1 === obj2;\n    }\n\n    // At this point, the only falsy values are `null`, `undefined`, and `\"\"`\n    // (because we've ruled out `0`). We want to treat all these values as the same.\n    if (!obj1 && !obj2) {\n        return true;\n    }\n\n    // If one of the objects is falsy and the other one isn't,\n    // they can't be equal. After this check, neither object is falsy.\n    if ((!obj1 && obj2) || (obj1 && !obj2)) {\n        return false;\n    }\n\n    if (Array.isArray(obj1) && Array.isArray(obj2)) {\n        if (obj1.length !== obj2.length) {\n            return false;\n        }\n        // We will compare sorted versions of the arrays. We make a copy\n        // so we don't mutate with the `.sort()` method.\n        obj1 = [...obj1].sort();\n        obj2 = [...obj2].sort();\n        for (let i = 0; i < obj1.length; i++) {\n            if (!isSame(obj1[i], obj2[i])) {\n                return false;\n            }\n        }\n        // If we made it here, all entries of `obj1` and `obj2` are the same.\n        return true;\n    }\n\n    // By this point, both `obj1` and `obj2` must be objects with properties (we ruled out `null`)\n    if (typeof obj1 === \"object\") {\n        const keys1 = Object.keys(obj1).sort();\n        const keys2 = Object.keys(obj2).sort();\n        if (!isSame(keys1, keys2)) {\n            return false;\n        }\n        return keys1.every((key) => isSame(obj1[key], obj2[key]));\n    }\n\n    return false;\n}\n\n/**\n * Extract a list of all objects that have changed from a diff.\n * These will be suitable for upserting.\n *\n * @export\n * @template T\n * @template U\n * @param {DiffSpec<T, U>[]} diffed\n * @returns {(U[] | Omit<U, \"id\">[])}\n */\nexport function getChanged<T, U>(\n    diffed: DiffSpec<T, U>[]\n): U[] | Omit<U, \"id\">[] {\n    return diffed\n        .filter((item) => item.status === \"new\" || item.status === \"modified\")\n        .map((item) => item.obj);\n}\n","import React from \"react\";\nimport FileSaver from \"file-saver\";\nimport {\n    instructorsSelector,\n    exportInstructors,\n    upsertInstructors,\n} from \"../../api/actions\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { ExportActionButton } from \"../../components/export-button\";\nimport { ImportActionButton } from \"../../components/import-button\";\nimport {\n    InstructorsList,\n    InstructorsDiffList,\n} from \"../../components/instructors\";\nimport { Alert } from \"react-bootstrap\";\nimport { normalizeImport, dataToFile } from \"../../libs/importExportUtils\";\nimport { prepareMinimal } from \"../../libs/exportUtils\";\nimport { diffImport, getChanged } from \"../../libs/diffUtils\";\n\n/**\n * Allows for the download of a file blob containing the exported instructors.\n * Instructors are synchronized from the server before being downloaded.\n *\n * @export\n * @returns\n */\nexport function ConnectedExportInstructorsAction() {\n    const dispatch = useDispatch();\n    const [exportType, setExportType] = React.useState(null);\n\n    React.useEffect(() => {\n        if (!exportType) {\n            return;\n        }\n\n        async function doExport() {\n            // Having an export type of `null` means we're ready to export again,\n            // We set the export type to null at the start so in case an error occurs,\n            // we can still try again. This *will not* affect the current value of `exportType`\n            setExportType(null);\n\n            // Make a function that converts a list of instructors into a `File` object.\n            function prepareData(instructors, dataFormat) {\n                return dataToFile(\n                    {\n                        toSpreadsheet: () =>\n                            [\n                                [\"Last Name\", \"First Name\", \"UTORid\", \"email\"],\n                            ].concat(\n                                instructors.map((instructor) => [\n                                    instructor.last_name,\n                                    instructor.first_name,\n                                    instructor.utorid,\n                                    instructor.email,\n                                ])\n                            ),\n                        toJson: () => ({\n                            instructors: instructors.map((instructor) =>\n                                prepareMinimal.instructor(instructor)\n                            ),\n                        }),\n                    },\n                    dataFormat,\n                    \"instructors\"\n                );\n            }\n\n            const file = await dispatch(\n                exportInstructors(prepareData, exportType)\n            );\n\n            FileSaver.saveAs(file);\n        }\n        doExport().catch(console.error);\n    }, [exportType, dispatch]);\n\n    function onClick(option) {\n        setExportType(option);\n    }\n\n    return <ExportActionButton onClick={onClick} />;\n}\n\nconst instructorSchema = {\n    keys: [\"first_name\", \"last_name\", \"utorid\", \"email\"],\n    keyMap: {\n        \"First Name\": \"first_name\",\n        \"Given Name\": \"first_name\",\n        First: \"first_name\",\n        \"Last Name\": \"last_name\",\n        Surname: \"last_name\",\n        \"Family Name\": \"last_name\",\n        Last: \"last_name\",\n    },\n    requiredKeys: [\"utorid\"],\n    primaryKey: \"utorid\",\n    dateColumns: [],\n    baseName: \"instructors\",\n};\n\nexport function ConnectedImportInstructorAction() {\n    const dispatch = useDispatch();\n    const instructors = useSelector(instructorsSelector);\n    const [fileContent, setFileContent] = React.useState(null);\n    const [diffed, setDiffed] = React.useState(null);\n    const [processingError, setProcessingError] = React.useState(null);\n    const [inProgress, setInProgress] = React.useState(false);\n\n    // Make sure we aren't showing any diff if there's no file loaded.\n    React.useEffect(() => {\n        if (!fileContent) {\n            if (diffed) {\n                setDiffed(null);\n            }\n        }\n    }, [diffed, setDiffed, fileContent]);\n\n    // Recompute the diff every time the file changes\n    React.useEffect(() => {\n        // If we have no file or we are currently in the middle of processing another file,\n        // do nothing.\n        if (!fileContent || inProgress) {\n            return;\n        }\n        try {\n            setProcessingError(null);\n            // normalize the data coming from the file\n            const data = normalizeImport(fileContent, instructorSchema);\n            // Compute which instructors have been added/modified\n            const newDiff = diffImport.instructors(data, { instructors });\n\n            setDiffed(newDiff);\n        } catch (e) {\n            console.warn(e);\n            setProcessingError(e);\n        }\n    }, [fileContent, instructors, inProgress]);\n\n    async function onConfirm() {\n        const changedInstructors = getChanged(diffed);\n\n        await dispatch(upsertInstructors(changedInstructors));\n\n        setFileContent(null);\n    }\n\n    let dialogContent = <p>No data loaded...</p>;\n    if (processingError) {\n        dialogContent = <Alert variant=\"danger\">{\"\" + processingError}</Alert>;\n    } else if (diffed) {\n        const newItems = diffed\n            .filter((item) => item.status === \"new\")\n            .map((item) => item.obj);\n        const modifiedDiffSpec = diffed.filter(\n            (item) => item.status === \"modified\"\n        );\n\n        if (newItems.length === 0 && modifiedDiffSpec.length === 0) {\n            dialogContent = (\n                <Alert variant=\"warning\">\n                    No difference between imported instructors and those already\n                    on the system.\n                </Alert>\n            );\n        } else {\n            dialogContent = (\n                <>\n                    {newItems.length > 0 && (\n                        <Alert variant=\"primary\">\n                            <span className=\"mb-1\">\n                                The following instructors will be{\" \"}\n                                <strong>added</strong>\n                            </span>\n                            <InstructorsList instructors={newItems} />\n                        </Alert>\n                    )}\n                    {modifiedDiffSpec.length > 0 && (\n                        <Alert variant=\"info\">\n                            <span className=\"mb-1\">\n                                The following instructors will be{\" \"}\n                                <strong>modified</strong>\n                            </span>\n                            <InstructorsDiffList\n                                modifiedInstructors={modifiedDiffSpec}\n                            />\n                        </Alert>\n                    )}\n                </>\n            );\n        }\n    }\n\n    return (\n        <ImportActionButton\n            onConfirm={onConfirm}\n            onFileChange={setFileContent}\n            dialogContent={dialogContent}\n            setInProgress={setInProgress}\n        />\n    );\n}\n","import React from \"react\";\nimport classNames from \"classnames\";\n\ninterface ContentAreaProps {\n    children: React.ReactNode;\n    className?: string;\n}\n\n/**\n * Wrap the content area of a page with the appropriate classes.\n *\n * @export\n * @param {ContentAreaProps} {\n *     children,\n *     className,\n *     ...rest\n * }\n * @returns\n */\nexport function ContentArea({\n    children,\n    className,\n    ...rest\n}: ContentAreaProps) {\n    return (\n        <div className={classNames(\"page-content\", className)} {...rest}>\n            {children}\n        </div>\n    );\n}\n","import React from \"react\";\nimport { ConnectedInstructorsList } from \"./editable-instructors-list\";\nimport { ConnectedAddInstructorDialog } from \"./add-instructor-dialog\";\nimport { FaTrash, FaPlus } from \"react-icons/fa\";\nimport {\n    ConnectedImportInstructorAction,\n    ConnectedExportInstructorsAction,\n} from \"./import-export\";\nimport {\n    ActionsList,\n    ActionButton,\n    ActionHeader,\n} from \"../../components/action-buttons\";\nimport { ContentArea } from \"../../components/layout\";\n\nexport function AdminInstructorsView() {\n    const [addDialogVisible, setAddDialogVisible] = React.useState(false);\n    const [inDeleteMode, setInDeleteMode] = React.useState(false);\n\n    return (\n        <div className=\"page-body\">\n            <ActionsList>\n                <ActionHeader>Available Actions</ActionHeader>\n                <ActionButton\n                    icon={<FaPlus />}\n                    onClick={() => {\n                        setAddDialogVisible(true);\n                    }}\n                >\n                    Add Instructor\n                </ActionButton>\n                <ActionButton\n                    icon={<FaTrash />}\n                    onClick={() => setInDeleteMode(!inDeleteMode)}\n                    active={inDeleteMode}\n                >\n                    Delete Instructor\n                </ActionButton>\n\n                <ActionHeader>Import/Export</ActionHeader>\n                <ConnectedImportInstructorAction />\n                <ConnectedExportInstructorsAction />\n            </ActionsList>\n            <ContentArea>\n                <ConnectedAddInstructorDialog\n                    show={addDialogVisible}\n                    onHide={() => {\n                        setAddDialogVisible(false);\n                    }}\n                />\n                <ConnectedInstructorsList inDeleteMode={inDeleteMode} />\n            </ContentArea>\n        </div>\n    );\n}\n\nexport { ConnectedInstructorsList, ConnectedAddInstructorDialog };\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport ReactTable from \"react-table\";\nimport { Badge } from \"react-bootstrap\";\nimport { formatDate } from \"../libs/utils\";\nimport { createDiffColumnsFromColumns } from \"./diff-table\";\n\nconst DEFAULT_COLUMNS = [\n    { Header: \"Position Code\", accessor: \"position_code\" },\n    { Header: \"Position Title\", accessor: \"position_title\" },\n    { Header: \"Hours\", accessor: \"hours_per_assignment\", maxWidth: 64 },\n    {\n        Header: \"Start\",\n        accessor: \"start_date\",\n        Cell: (row) => formatDate(row.value),\n    },\n    {\n        Header: \"End\",\n        accessor: \"end_date\",\n        Cell: (row) => formatDate(row.value),\n    },\n    {\n        Header: \"Instructors\",\n        accessor: \"instructors\",\n        Cell: (props) => (\n            <React.Fragment>\n                {props.value.map((instructor = {}) => {\n                    const name = `${instructor.first_name} ${instructor.last_name}`;\n                    return (\n                        <Badge variant=\"secondary\" className=\"mr-1\" key={name}>\n                            {name}\n                        </Badge>\n                    );\n                })}\n            </React.Fragment>\n        ),\n    },\n    {\n        Header: \"Enrolled\",\n        accessor: \"current_enrollment\",\n        maxWidth: 80,\n    },\n    {\n        Header: \"Waitlisted\",\n        accessor: \"current_waitlisted\",\n        maxWidth: 90,\n    },\n\n    {\n        Header: \"Contract Template\",\n        accessor: \"contract_template.template_name\",\n    },\n];\n\n/**\n * Display a DiffSpec array of positions and highlight the changes.\n *\n * @export\n * @param {*} { modifiedInstructors }\n * @returns\n */\nexport function PositionsDiffList({ modifiedPositions }) {\n    return (\n        <PositionsList\n            positions={modifiedPositions}\n            columns={createDiffColumnsFromColumns(DEFAULT_COLUMNS)}\n        />\n    );\n}\n\n/**\n * List the instructors using a ReactTable. `columns` can be passed\n * in to customize columns/cell renderers.\n *\n * @export\n * @param {{instructors: object[], columns: object[]}} props\n * @returns\n */\nexport function PositionsList(props) {\n    const { positions, columns = DEFAULT_COLUMNS } = props;\n    return (\n        <ReactTable\n            data={positions}\n            columns={columns}\n            showPagination={false}\n            minRows={1}\n        />\n    );\n}\nPositionsList.propTypes = {\n    positions: PropTypes.array.isRequired,\n    columns: PropTypes.arrayOf(\n        PropTypes.shape({ Header: PropTypes.any.isRequired })\n    ),\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { formatDate } from \"../libs/utils\";\nimport ReactTable from \"react-table\";\nimport { createDiffColumnsFromColumns } from \"./diff-table\";\n\nconst DEFAULT_COLUMNS = [\n    { Header: \"Last Name\", accessor: \"applicant.last_name\" },\n    { Header: \"First Name\", accessor: \"applicant.first_name\" },\n    { Header: \"Position Code\", accessor: \"position.position_code\" },\n    { Header: \"Hours\", accessor: \"hours\" },\n    {\n        Header: \"Start\",\n        accessor: \"start_date\",\n        Cell: (row) => formatDate(row.value) || \"\",\n    },\n    {\n        Header: \"End\",\n        accessor: \"end_date\",\n        Cell: (row) => formatDate(row.value) || \"\",\n    },\n];\n\n/**\n * Display a DiffSpec array of positions and highlight the changes.\n *\n * @export\n * @param {*} { modifiedInstructors }\n * @returns\n */\nexport function AssignmentsDiffList({ modifiedAssignments }) {\n    return (\n        <AssignmentsList\n            assignments={modifiedAssignments}\n            columns={createDiffColumnsFromColumns(DEFAULT_COLUMNS)}\n        />\n    );\n}\n\nfunction AssignmentsList(props) {\n    const { assignments, columns = DEFAULT_COLUMNS } = props;\n    return (\n        <React.Fragment>\n            <h3>Assignments</h3>\n            <ReactTable\n                data={assignments}\n                columns={columns}\n                showPagination={false}\n                minRows={1}\n            />\n        </React.Fragment>\n    );\n}\nAssignmentsList.propTypes = {\n    assignments: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.number,\n            position: PropTypes.object,\n            applicant: PropTypes.object,\n        })\n    ).isRequired,\n};\n\nexport { AssignmentsList };\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport ReactTable from \"react-table\";\nimport selectTableHOC from \"react-table/lib/hoc/selectTable\";\n\nimport \"react-table/react-table.css\";\n// This HOC adds a checkbox to every row of a ReactTable\nconst SelectTable = selectTableHOC(ReactTable);\n\nconst COLUMNS = [\n    { Header: \"Last Name\", accessor: \"applicant.last_name\" },\n    { Header: \"First Name\", accessor: \"applicant.first_name\" },\n    { Header: \"Email\", accessor: \"applicant.email\", width: 250 },\n    {\n        Header: \"Student Number\",\n        accessor: \"applicant.student_number\",\n        width: 100,\n    },\n    {\n        Header: \"Position\",\n        accessor: \"position.position_code\",\n        width: 130,\n    },\n    {\n        Header: \"Hours\",\n        accessor: \"hours\",\n        width: 100,\n    },\n    {\n        Header: \"Contract\",\n        accessor: \"position.contract_template.template_name\",\n        width: 100,\n    },\n    {\n        Header: \"First Time?\",\n        accessor: \"applicant.first_time_ta\",\n        Cell: (props) => (\n            <div style={{ backgroundColor: \"red\" }}>\n                {(\"\" + props.value).toUpperCase()}\n            </div>\n        ),\n        width: 100,\n    }, // boolean\n    { Header: \"Status\", accessor: \"status\", width: 100 },\n    { Header: \"Nag Count\", accessor: \"nag_count\", width: 100 },\n];\n\n/**\n * Converts a row of the offer table into a string for omni-searching\n *\n * @param {*} row\n * @returns {string}\n */\nfunction rowToStr(row) {\n    // flatten to a string two levels deep\n    return Object.values(row)\n        .map((x) => (typeof x === \"string\" ? x : Object.values(x).join(\" \")))\n        .join(\" \")\n        .toLowerCase();\n}\n\n/**\n * A filterable offer table. If `selected` and `setSelected` props are provided,\n * rows of this table can be selected.\n *\n * @param {*} props\n * @param {list} props.data - a list of assignments\n * @param {list} props.selected - a list of assignment `id`s that are selected\n * @param {func} props.setSelected - function that is called to set the selected ids\n * @returns\n */\nfunction OfferTable(props) {\n    const { data, selected, setSelected, columns = COLUMNS } = props;\n    // internally we use a more efficient datastructure than a list to keep track of `selected` things.\n    const _selected = new Set(selected);\n    const _setSelected = (_selected) => {\n        // convert `_selected` back to a list before setting it.\n        setSelected([..._selected]);\n    };\n\n    const [filterString, setFilterString] = React.useState(\"\");\n    const [lastSelected, setLastSelected] = React.useState(null);\n    const [allSelected, setAllSelected] = React.useState(false);\n    function isSelected(id) {\n        return _selected.has(id);\n    }\n\n    const filteredData = filterString\n        ? data.filter((row) =>\n              rowToStr(row).includes(filterString.toLowerCase())\n          )\n        : data;\n\n    // we need a reference to the internal table so that we can get the \"visible data\"\n    // if it happens to be filtered or sorted\n    let reactTableRef = React.useRef(null);\n    /**\n     * Gets the data that is actually displayed in the ReactTable. This is useful\n     * for range selecting (shift-cliking should select in the range that is displayed)\n     *\n     * @returns {[object]}\n     */\n    function getDisplayedData() {\n        if (!reactTableRef) {\n            // eslint-disable-next-line\n            console.warn(\n                \"Trying to get data displayed in a ReactTable, but no ref has been created\"\n            );\n            return [];\n        }\n        try {\n            return reactTableRef\n                .getWrappedInstance()\n                .getResolvedState()\n                .sortedData.map((x) => x._original);\n        } catch (e) {\n            return [];\n        }\n    }\n\n    // Every time `selection` changes, compute whether everything visible\n    // is selected\n    React.useEffect(() => {\n        let allSelected = false;\n        const displayedData = getDisplayedData();\n        if (\n            displayedData.length > 0 &&\n            displayedData.every((row) => _selected.has(row.id))\n        ) {\n            allSelected = true;\n        }\n        setAllSelected(allSelected);\n    }, [_selected, filterString]);\n\n    function onToggleRow(ref, shiftOn, row) {\n        // The shift key isn't held. Only select a single item\n        if (!shiftOn) {\n            const newSelectedState = !_selected.has(row.id);\n            const newSelected = new Set(_selected);\n            if (newSelectedState === true) {\n                newSelected.add(row.id);\n                _setSelected(newSelected);\n                setLastSelected(row.id);\n            } else {\n                newSelected.delete(row.id);\n                _setSelected(newSelected);\n                setLastSelected(null);\n            }\n            return;\n        }\n        // The shift key was held, but nothing was \"last clicked\", so we should treat it\n        // as if the shift weren't held\n        if (shiftOn && lastSelected == null) {\n            return onToggleRow(ref, false, row);\n        }\n        // The shift key was held and there was a last selected, so select everything\n        // in the range between the newly clicked row and the last clicked row\n\n        // Get the displayed row data so we don't misselect things.\n        const rowIds = getDisplayedData().map((row) => row.id);\n        const lastSelectedIndex = rowIds.indexOf(lastSelected);\n        if (lastSelectedIndex === -1) {\n            // If the \"last selected\" thing is hidden, we should behave like the no-shift case\n            return onToggleRow(ref, false, row);\n        }\n        const selectedIndex = rowIds.indexOf(row.id);\n        const [start, end] = [\n            Math.min(lastSelectedIndex, selectedIndex),\n            Math.max(lastSelectedIndex, selectedIndex),\n        ];\n\n        _setSelected(\n            new Set([\n                ..._selected,\n                ...rowIds.filter((v, i) => i <= end && i >= start),\n            ])\n        );\n    }\n\n    function onToggleAll() {\n        // If everything is selected, set the selected status to `false`\n        // otherwise, set it to true.\n        const rowIds = getDisplayedData().map((row) => row.id);\n        if (allSelected) {\n            const newSelected = new Set(_selected);\n            for (const id of rowIds) {\n                newSelected.delete(id);\n            }\n            _setSelected(newSelected);\n        } else {\n            _setSelected(new Set([..._selected, ...rowIds]));\n        }\n    }\n\n    let tableComponent = (\n        <SelectTable\n            ref={(r) => (reactTableRef = r)}\n            data={filteredData}\n            columns={columns}\n            toggleSelection={onToggleRow}\n            selectAll={allSelected}\n            toggleAll={onToggleAll}\n            isSelected={isSelected}\n            selectType=\"checkbox\"\n            keyField=\"id\"\n            minRows={1}\n            showPagination={false}\n        />\n    );\n    // if `selected` was not passed in, the table rows should not be selectable\n    if (selected == null) {\n        tableComponent = <ReactTable columns={columns} data={filteredData} />;\n    }\n    return (\n        <div>\n            Filter:{\" \"}\n            <input\n                type=\"text\"\n                onChange={(e) => setFilterString(e.target.value)}\n            />\n            {tableComponent}\n        </div>\n    );\n}\nOfferTable.propTypes = {\n    selected: PropTypes.array,\n    setSelected: PropTypes.func,\n    data: PropTypes.array.isRequired,\n    columns: PropTypes.arrayOf(\n        PropTypes.shape({\n            Header: PropTypes.string,\n            accessor: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n        })\n    ),\n};\n\nexport { OfferTable };\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n    assignmentsSelector,\n    upsertApplicant,\n    upsertAssignment,\n} from \"../../api/actions\";\nimport { OfferTable } from \"../../components/offer-table\";\nimport { EditableField } from \"../../components/edit-field-widgets\";\nimport { offerTableSelector, setSelectedRows } from \"./actions\";\n\nfunction capitalize(word = \"\") {\n    return word.charAt(0).toUpperCase() + word.slice(1);\n}\n\n/**\n * A cell that renders editable applicant information\n *\n * @param {*} props\n * @returns\n */\nfunction ApplicantCell(props) {\n    const title = `Edit ${props.column.Header}`;\n    const { upsertApplicant, field } = props;\n    function onChange(newVal) {\n        const applicantId = props.original.applicant.id;\n        upsertApplicant({ id: applicantId, [field]: newVal });\n    }\n    return (\n        <EditableField\n            title={title}\n            value={props.value || \"\"}\n            onChange={onChange}\n        >\n            {props.value}\n        </EditableField>\n    );\n}\n\n/**\n * A cell that renders editable assignment information\n *\n * @param {*} props\n * @returns\n */\nfunction AssignmentCell(props) {\n    const title = `Edit ${props.column.Header}`;\n    const { upsertAssignment, field } = props;\n    const active_offer_status = props.original.active_offer_status;\n    function onChange(newVal) {\n        const applicationId = props.original.id;\n        upsertAssignment({ id: applicationId, [field]: newVal });\n    }\n    return (\n        <EditableField\n            title={title}\n            value={props.value || \"\"}\n            onChange={onChange}\n            editable={!active_offer_status}\n        >\n            {props.value}\n        </EditableField>\n    );\n}\n\nfunction EditableOfferTable(props) {\n    const { upsertApplicant, upsertAssignment, ...rest } = props;\n\n    // Bind an `ApplicantCell` to a particular field\n    function generateApplicantCell(field) {\n        return (props) => (\n            <ApplicantCell\n                field={field}\n                upsertApplicant={upsertApplicant}\n                {...props}\n            />\n        );\n    }\n\n    // Bind an `AssignmentCell` to a particular field\n    function generateAssignmentCell(field) {\n        return (props) => (\n            <AssignmentCell\n                field={field}\n                upsertAssignment={upsertAssignment}\n                {...props}\n            />\n        );\n    }\n\n    const columns = [\n        {\n            Header: \"Last Name\",\n            accessor: \"applicant.last_name\",\n            Cell: generateApplicantCell(\"last_name\"),\n        },\n        {\n            Header: \"First Name\",\n            accessor: \"applicant.first_name\",\n            Cell: generateApplicantCell(\"first_name\"),\n        },\n        {\n            Header: \"Email\",\n            accessor: \"applicant.email\",\n            Cell: generateApplicantCell(\"email\"),\n        },\n        {\n            Header: \"Position\",\n            accessor: \"position.position_code\",\n        },\n        {\n            Header: \"Hours\",\n            accessor: \"hours\",\n            Cell: generateAssignmentCell(\"hours\"),\n        },\n        {\n            Header: \"Status\",\n            id: \"status\",\n            accessor: (data) => capitalize(data.active_offer_status || \"\"),\n        },\n    ];\n\n    return <OfferTable columns={columns} {...rest} />;\n}\n\n/**\n * OfferTable that has been connected to the redux store\n * for live updates and editability.\n */\nexport const ConnectedOfferTable = connect(\n    (state) => ({\n        data: assignmentsSelector(state),\n        selected: offerTableSelector(state).selectedAssignmentIds,\n    }),\n    { upsertApplicant, upsertAssignment, setSelected: setSelectedRows }\n)(EditableOfferTable);\n","export const SET_SELECTED_ROWS = \"SET_SELECTED_ROWS\";\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Form } from \"react-bootstrap\";\nimport { Typeahead } from \"react-bootstrap-typeahead\";\n\nimport \"react-bootstrap-typeahead/css/Typeahead.css\";\nimport \"react-bootstrap-typeahead/css/Typeahead-bs4.css\";\nimport { docApiPropTypes } from \"../../api/defs/doc-generation\";\nimport { fieldEditorFactory, DialogRow } from \"./common-controls\";\n\nconst DEFAULT_POSITION = {\n    position_code: \"\",\n    position_title: \"\",\n    hours_per_assignment: 0,\n    contract_template: {},\n    duties:\n        \"Some combination of marking, invigilating, tutorials, office hours, and the help centre.\",\n    instructors: [],\n};\n\n/**\n * Edit information about a position\n *\n * @export\n * @param {{position: object, instructors: object[]}} props\n * @returns\n */\nexport function PositionEditor(props) {\n    const {\n        position: positionProp,\n        setPosition,\n        instructors = [],\n        contractTemplates = [],\n        defaultContractTemplate = {},\n    } = props;\n    const position = { ...DEFAULT_POSITION, ...positionProp };\n\n    /**\n     * Set `position.instructors` to the specified list.\n     *\n     * @param {*} instructors\n     */\n    function setInstructors(instructors) {\n        setPosition({ ...position, instructors });\n    }\n\n    /**\n     * Set `position.contract_template` to the most recently selected item\n     *\n     * @param {*} selectedContractTypes\n     */\n    function setContractType(selectedContractTypes) {\n        const contract_template =\n            selectedContractTypes[selectedContractTypes.length - 1] ||\n            defaultContractTemplate;\n        setPosition({ ...position, contract_template });\n    }\n\n    const createFieldEditor = fieldEditorFactory(position, setPosition);\n\n    return (\n        <Form>\n            <DialogRow>\n                {createFieldEditor(\n                    \"Course Code (e.g. MAT135H1F)\",\n                    \"position_code\"\n                )}\n                {createFieldEditor(\"Course Title\", \"position_title\")}\n            </DialogRow>\n            <DialogRow>\n                {createFieldEditor(\"Start Date\", \"start_date\", \"date\")}\n                {createFieldEditor(\"End Date\", \"end_date\", \"date\")}\n                {createFieldEditor(\n                    \"Hours per Assignment\",\n                    \"hours_per_assignment\",\n                    \"number\"\n                )}\n            </DialogRow>\n            <Form.Group>\n                <Form.Label>Instructors</Form.Label>\n                <Typeahead\n                    id=\"instructors-input\"\n                    ignoreDiacritics={true}\n                    multiple\n                    placeholder=\"Instructors...\"\n                    labelKey={(option) =>\n                        `${option.first_name} ${option.last_name}`\n                    }\n                    selected={position.instructors}\n                    options={instructors}\n                    onChange={setInstructors}\n                />\n            </Form.Group>\n            <Form.Group>\n                <Form.Label>\n                    Contract Template (which offer template will be used)\n                </Form.Label>\n                <Typeahead\n                    id=\"instructors-input\"\n                    ignoreDiacritics={true}\n                    multiple\n                    placeholder=\"Contract template...\"\n                    labelKey={(option) => `${option.template_name}`}\n                    selected={[position.contract_template]}\n                    options={contractTemplates}\n                    onChange={setContractType}\n                />\n            </Form.Group>\n            <h3>Ad-related Info</h3>\n            <DialogRow>{createFieldEditor(\"Duties\", \"duties\")}</DialogRow>\n            <DialogRow>\n                {createFieldEditor(\"Qualifications\", \"qualifications\")}\n            </DialogRow>\n            <h3>Admin Info</h3>\n            <DialogRow>\n                {createFieldEditor(\n                    \"Current Enrollment\",\n                    \"current_enrollment\",\n                    \"number\"\n                )}\n                {createFieldEditor(\n                    \"Waitlisted\",\n                    \"current_waitlisted\",\n                    \"number\"\n                )}\n                {createFieldEditor(\n                    \"Desired Number of Assignments\",\n                    \"desired_num_assignments\",\n                    \"number\"\n                )}\n            </DialogRow>\n        </Form>\n    );\n}\nPositionEditor.propTypes = {\n    position: docApiPropTypes.position.isRequired,\n    setPosition: PropTypes.func.isRequired,\n    instructors: PropTypes.arrayOf(docApiPropTypes.instructor),\n    defaultContractTemplate: docApiPropTypes.contractTemplate,\n    contractTemplates: PropTypes.arrayOf(docApiPropTypes.contractTemplate),\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Form } from \"react-bootstrap\";\nimport { Typeahead } from \"react-bootstrap-typeahead\";\n\nimport \"react-bootstrap-typeahead/css/Typeahead.css\";\nimport \"react-bootstrap-typeahead/css/Typeahead-bs4.css\";\nimport { docApiPropTypes } from \"../../api/defs/doc-generation\";\nimport { fieldEditorFactory, DialogRow } from \"./common-controls\";\n\nconst DEFAULT_ASSIGNMENT = {\n    note: \"\",\n    position: { id: null },\n    position_id: null,\n    applicant: { id: null },\n    applicant_id: null,\n};\n\n/**\n * Edit information about a position\n *\n * @export\n * @param {{position: object, instructors: object[]}} props\n * @returns\n */\nexport function AssignmentEditor(props) {\n    const {\n        assignment: assignmentProp,\n        setAssignment,\n        applicants,\n        positions,\n    } = props;\n    const assignment = { ...DEFAULT_ASSIGNMENT, ...assignmentProp };\n\n    // update the selected position; this comes with side effects\n    function setPosition(positions) {\n        const position = positions[positions.length - 1] || { id: null };\n        setAssignment({\n            ...assignment,\n            position,\n            position_id: position.id,\n            hours: position.hours_per_assignment,\n            start_date: position.start_date,\n            end_date: position.end_date,\n        });\n    }\n\n    // update the selected applicant\n    function setApplicant(applicants) {\n        const applicant = applicants[applicants.length - 1] || { id: null };\n        setAssignment({\n            ...assignment,\n            applicant,\n            applicant_id: applicant.id,\n        });\n    }\n\n    const createFieldEditor = fieldEditorFactory(assignment, setAssignment);\n\n    return (\n        <Form>\n            <DialogRow>\n                <React.Fragment>\n                    <Form.Label>Position</Form.Label>\n                    <Typeahead\n                        id=\"position-input\"\n                        ignoreDiacritics={true}\n                        placeholder=\"Position...\"\n                        multiple\n                        labelKey={(option) =>\n                            `${option.position_code} (${option.position_title})`\n                        }\n                        selected={\n                            assignment.position.id == null\n                                ? []\n                                : [assignment.position]\n                        }\n                        options={positions}\n                        onChange={setPosition}\n                    />\n                </React.Fragment>\n                <React.Fragment>\n                    <Form.Label>Applicant</Form.Label>\n                    <Typeahead\n                        id=\"applicant-input\"\n                        ignoreDiacritics={true}\n                        placeholder=\"Applicant...\"\n                        multiple\n                        labelKey={(option) =>\n                            `${option.first_name} ${option.last_name}`\n                        }\n                        selected={\n                            assignment.applicant.id == null\n                                ? []\n                                : [assignment.applicant]\n                        }\n                        options={applicants}\n                        onChange={setApplicant}\n                    />\n                </React.Fragment>\n            </DialogRow>\n            <DialogRow>\n                {createFieldEditor(\"Hours\", \"hours\", \"number\")}\n            </DialogRow>\n\n            <h4>Optional Settings</h4>\n            <DialogRow>\n                {createFieldEditor(\"Start Date\", \"start_date\", \"date\")}\n                {createFieldEditor(\"End Date\", \"end_date\", \"date\")}\n            </DialogRow>\n        </Form>\n    );\n}\nAssignmentEditor.propTypes = {\n    assignment: docApiPropTypes.assignment.isRequired,\n    setAssignment: PropTypes.func.isRequired,\n    positions: PropTypes.arrayOf(docApiPropTypes.position),\n    applicants: PropTypes.arrayOf(docApiPropTypes.applicant),\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Form } from \"react-bootstrap\";\nimport { Typeahead } from \"react-bootstrap-typeahead\";\n\nimport \"react-bootstrap-typeahead/css/Typeahead.css\";\nimport \"react-bootstrap-typeahead/css/Typeahead-bs4.css\";\nimport { docApiPropTypes } from \"../../api/defs/doc-generation\";\nimport { fieldEditorFactory, DialogRow } from \"./common-controls\";\n\nconst DEFAULT_CONTRACT_TEMPLATE = {\n    template_name: \"\",\n    template_file: \"\",\n};\n\n/**\n * Edit information about a contract_template\n *\n * @export\n * @param {{contractTemplate: object, availableTemplates: object[], setContractTemplate: function}} props\n * @returns\n */\nexport function ContractTemplateEditor(props) {\n    const {\n        contractTemplate: contractTemplateProp,\n        setContractTemplate,\n        availableTemplates = [],\n    } = props;\n    const contractTemplate = {\n        ...DEFAULT_CONTRACT_TEMPLATE,\n        ...contractTemplateProp,\n    };\n\n    // update the selected template_file; this comes with side effects\n    function setTemplateFile(templates) {\n        const templateFile = templates[templates.length - 1] || \"\";\n        setContractTemplate({\n            ...contractTemplate,\n            template_file: templateFile,\n        });\n    }\n\n    const createFieldEditor = fieldEditorFactory(\n        contractTemplate,\n        setContractTemplate\n    );\n\n    return (\n        <Form>\n            <DialogRow>\n                {createFieldEditor(\n                    'Template Name (e.g. \"OTO\" \"Invigilate\")',\n                    \"template_name\"\n                )}\n            </DialogRow>\n            <DialogRow>\n                <React.Fragment>\n                    <Form.Label title=\"This file is stored on the server; you can edit it there.\">\n                        Template File\n                    </Form.Label>\n                    <Typeahead\n                        id=\"file-name-input\"\n                        ignoreDiacritics={true}\n                        placeholder=\"File name...\"\n                        multiple\n                        labelKey={(option) => `${option}`}\n                        selected={\n                            !contractTemplate.template_file\n                                ? []\n                                : [contractTemplate.template_file]\n                        }\n                        options={availableTemplates.map((x) => x.template_file)}\n                        onChange={setTemplateFile}\n                    />\n                </React.Fragment>\n            </DialogRow>\n        </Form>\n    );\n}\nContractTemplateEditor.propTypes = {\n    contractTemplate: docApiPropTypes.contractTemplate.isRequired,\n    setContractTemplate: PropTypes.func.isRequired,\n    availableTemplates: PropTypes.arrayOf(\n        docApiPropTypes.contractTemplateMinimal\n    ),\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n    contractTemplatesSelector,\n    instructorsSelector,\n    positionsSelector,\n    assignmentsSelector,\n    applicantsSelector,\n} from \"../../api/actions\";\nimport { offerTableSelector } from \"../offertable/actions\";\nimport { SessionEditor } from \"../../components/forms/session-editor\";\nimport { ApplicantsList } from \"../../components/applicants\";\nimport { ContractTemplatesList } from \"../../components/contract-templates-list\";\nimport { ConnectedInstructorsList } from \"../instructors\";\nimport { PositionsList } from \"../../components/positions-list\";\nimport { AssignmentsList } from \"../../components/assignments-list\";\nimport { EmailButton } from \"../../components/email-button\";\nimport { ImportButton } from \"../../components/import-button\";\nimport { EditableField } from \"../../components/edit-field-widgets\";\nimport { ConnectedOfferTable } from \"../offertable\";\nimport { PositionEditor } from \"../../components/forms/position-editor\";\nimport { InstructorEditor } from \"../../components/instructors\";\nimport { AssignmentEditor } from \"../../components/forms/assignment-editor\";\nimport { ContractTemplateEditor } from \"../../components/forms/contract-template-editor\";\n\nconst ConnectedApplicantList = connect((state) => ({\n    applicants: applicantsSelector(state),\n}))(ApplicantsList);\n\nconst ConnectedContractTemplatesList = connect((state) => ({\n    contractTemplates: contractTemplatesSelector(state),\n}))(ContractTemplatesList);\n\nconst ConnectedPositionsList = connect((state) => ({\n    positions: positionsSelector(state),\n}))(PositionsList);\n\nconst ConnectedAssignmentsList = connect((state) => ({\n    assignments: assignmentsSelector(state),\n}))(AssignmentsList);\n\nconst ConnectedEmailButton = connect((state) => ({\n    data: offerTableSelector(state).selectedAssignmentIds,\n}))(EmailButton);\n\nconst ConnectedPositionEditor = connect((state) => ({\n    instructors: instructorsSelector(state),\n}))(PositionEditor);\n\nconst ConnectedAssignmentEditor = connect((state) => ({\n    positions: positionsSelector(state),\n    applicants: applicantsSelector(state),\n}))(AssignmentEditor);\n\n/**\n * Encapsulate a react component in a frame.\n *\n * @param {object} props\n * @param {string} props.title The name of the component encapsulated\n */\nfunction DashboardWidget(props) {\n    const { children, title } = props;\n    return (\n        <div style={{ margin: 5 }}>\n            <h5>\n                The{\" \"}\n                <span style={{ color: \"green\", fontFamily: \"mono\" }}>\n                    {title}\n                </span>{\" \"}\n                Component\n            </h5>\n            <div style={{ border: \"1px solid black\", padding: 5 }}>\n                {children}\n            </div>\n        </div>\n    );\n}\n\n/**\n * A dashboard containing a sample of all the widgets connected\n * appropriately to the redux store.\n *\n */\nfunction Dashboard() {\n    const [assignment, setAssignment] = React.useState({\n        position_id: 0,\n        applicant_id: 0,\n    });\n    const [position, setPosition] = React.useState({ position_code: \"\" });\n    const [instructor, setInstructor] = React.useState({\n        last_name: \"Baggins\",\n        first_name: \"Bilbo\",\n        utorid: \"bilbob\",\n    });\n    const [session, setSession] = React.useState({ name: \"\" });\n    const [contractTemplate, setContractTemplate] = React.useState({});\n    return (\n        <div>\n            <DashboardWidget title=\"ContractTemplateEditor\">\n                <ContractTemplateEditor\n                    contractTemplate={contractTemplate}\n                    setContractTemplate={setContractTemplate}\n                    availableTemplates={[\n                        { template_file: \"/math/OTO.html\" },\n                        { template_file: \"/cs/invigilate.html\" },\n                    ]}\n                />\n            </DashboardWidget>\n            <DashboardWidget title=\"AssignmentEditor\">\n                <ConnectedAssignmentEditor\n                    assignment={assignment}\n                    setAssignment={setAssignment}\n                />\n            </DashboardWidget>\n            <DashboardWidget title=\"SessionEditor\">\n                <SessionEditor session={session} setSession={setSession} />\n            </DashboardWidget>\n            <DashboardWidget title=\"InstructorEditor\">\n                <InstructorEditor\n                    instructor={instructor}\n                    setInstructor={setInstructor}\n                />\n            </DashboardWidget>\n            <DashboardWidget title=\"PositionEditor\">\n                <ConnectedPositionEditor\n                    position={position}\n                    setPosition={setPosition}\n                />\n            </DashboardWidget>\n            <DashboardWidget title=\"EditableField\">\n                <EditableField\n                    title=\"Edit this super awesome content\"\n                    value={45}\n                    onChange={console.log}\n                >\n                    Edit me!\n                </EditableField>\n            </DashboardWidget>\n            <DashboardWidget title=\"ApplicantsList\">\n                <ConnectedApplicantList />\n            </DashboardWidget>\n            <DashboardWidget title=\"PostitionTemplatesList\">\n                <ConnectedContractTemplatesList />\n            </DashboardWidget>\n            <DashboardWidget title=\"InstuctorsList\">\n                <ConnectedInstructorsList />\n            </DashboardWidget>\n            <DashboardWidget title=\"PositionsList\">\n                <ConnectedPositionsList />\n            </DashboardWidget>\n            <DashboardWidget title=\"AssignmentsList\">\n                <ConnectedAssignmentsList />\n            </DashboardWidget>\n            <DashboardWidget title=\"ImportButton\">\n                <ImportButton />\n            </DashboardWidget>\n            <DashboardWidget title=\"EmailButton\">\n                <ConnectedEmailButton />\n            </DashboardWidget>\n            <DashboardWidget title=\"OfferTable\">\n                <ConnectedOfferTable />\n            </DashboardWidget>\n        </div>\n    );\n}\n\nexport default Dashboard;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Dropdown, DropdownButton } from \"react-bootstrap\";\n\n/**\n * Renders an dropdown email button\n *\n * The data is a list of ids to be emailed by the backend.\n *\n * @export\n * @param {list[object]} props.data\n */\nexport function EmailButton(props) {\n    let { data } = props;\n\n    /**\n     * Email to the applicants (using ids) by invoking email service provided by the backend\n     */\n    function emailHandler() {\n        console.log(\"data read from redux: \" + data);\n        throw new Error(\"Email function not implemented!\");\n    }\n\n    /**\n     * Email contract to the applicants (using ids) by invoking email service provided by the backend\n     */\n    function emailContract() {\n        throw new Error(\"Email contract not implemented!\");\n    }\n\n    /**\n     * Nag offers to the applicants (using ids) by invoking email service provided by the backend\n     */\n    function nagOffers() {\n        throw new Error(\"Nag offer function not implemented!\");\n    }\n\n    return (\n        <DropdownButton id=\"dropdown-basic-button\" title=\"Email\">\n            <Dropdown.Item onClick={() => emailHandler()}>\n                Email Blank\n            </Dropdown.Item>\n            <Dropdown.Item onClick={() => emailContract()}>\n                Email Contract\n            </Dropdown.Item>\n            <Dropdown.Item onClick={() => nagOffers()}>\n                Nag Offers\n            </Dropdown.Item>\n        </DropdownButton>\n    );\n}\n\nEmailButton.propTypes = {\n    data: PropTypes.arrayOf(PropTypes.any),\n};\n","import React from \"react\";\nimport { PositionsList } from \"../../components/positions-list\";\nimport { FilteredList } from \"../../components/filtered-list\";\nimport { connect } from \"react-redux\";\nimport { positionsSelector } from \"../../api/actions\";\n\nconst ConnectedFilteredList = connect((state, ownProps) => ({\n    positions: positionsSelector(state),\n    listRenderer: ownProps.listRenderer,\n}))(FilteredList);\n\nfunction ControlPanel() {\n    // dummy filter function\n    const filter = (data, query) => {\n        if (!query) {\n            return data;\n        }\n        return data;\n    };\n\n    return (\n        <div>\n            <ConnectedFilteredList\n                listRenderer={PositionsList}\n                filterFunc={filter}\n            />\n        </div>\n    );\n}\n\nexport default ControlPanel;\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\n/**\n * Renders a component that filters and renders a list of objects.\n *\n * The data is filtered based on the filter prop function, which takes\n * as input the data and the query from the search box.\n *\n * The filtered data is rendered using the listRenderer prop.\n *\n * @export\n * @param {list[object]} props.data\n * @param {component} props.listRenderer\n * @param {function(list[object], string): list[object]} props.filterFunc\n */\nexport function FilteredList(props) {\n    const { data, listRenderer, filterFunc, ...rest } = props;\n    const Renderer = listRenderer;\n    const [query, setQuery] = useState(\"\");\n\n    let filteredData = filterFunc(data, query);\n\n    return (\n        <div>\n            <input\n                type=\"text\"\n                value={query}\n                onChange={(e) => setQuery(e.target.value)}\n            />\n            <Renderer data={filteredData} {...rest} />\n        </div>\n    );\n}\n\nFilteredList.propTypes = {\n    data: PropTypes.arrayOf(PropTypes.any),\n    listRenderer: PropTypes.elementType,\n    filterFunc: PropTypes.func,\n};\n","import React from \"react\";\nimport { strip } from \"../../libs/utils\";\nimport { connect } from \"react-redux\";\nimport { SessionEditor } from \"../../components/forms/session-editor\";\nimport { upsertSession, sessionsSelector } from \"../../api/actions\";\nimport { Modal, Button, Alert } from \"react-bootstrap\";\n\nfunction getConficts(session, sessions = []) {\n    const ret = { delayShow: \"\", immediateShow: \"\" };\n    if (\n        !strip(session.name) ||\n        !strip(session.start_date) ||\n        !strip(session.end_date)\n    ) {\n        ret.delayShow = \"A first name, start date, and end date is required\";\n    }\n    const matchingSession = sessions.find(\n        (x) => strip(x.name) === strip(session.name)\n    );\n    if (matchingSession) {\n        ret.immediateShow = (\n            <p>Another session exists with name={session.name}</p>\n        );\n    }\n    return ret;\n}\n\nconst BLANK_SESSION = {\n    name: \"\",\n    start_date: \"\",\n    end_date: \"\",\n    rate1: \"\",\n    rate2: \"\",\n};\n\nexport function AddSessionDialog(props) {\n    const { show, onHide = () => {}, sessions, upsertSession } = props;\n    const [newSession, setNewSession] = React.useState(BLANK_SESSION);\n\n    React.useEffect(() => {\n        if (!show) {\n            // If the dialog is hidden, reset the state\n            setNewSession(BLANK_SESSION);\n        }\n    }, [show]);\n\n    function createInstructor() {\n        upsertSession(newSession);\n        onHide();\n    }\n\n    const conflicts = getConficts(newSession, sessions);\n\n    return (\n        <Modal show={show} onHide={onHide}>\n            <Modal.Header closeButton>\n                <Modal.Title>Add Session</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <SessionEditor\n                    session={newSession}\n                    setSession={setNewSession}\n                />\n                {conflicts.immediateShow ? (\n                    <Alert variant=\"danger\">{conflicts.immediateShow}</Alert>\n                ) : null}\n            </Modal.Body>\n            <Modal.Footer>\n                <Button onClick={onHide} variant=\"light\">\n                    Cancel\n                </Button>\n                <Button\n                    onClick={createInstructor}\n                    title={conflicts.delayShow || \"Create Session\"}\n                    disabled={\n                        !!conflicts.delayShow || !!conflicts.immediateShow\n                    }\n                >\n                    Create Session\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n\nexport const ConnectedAddSessionDialog = connect(\n    (state) => ({ sessions: sessionsSelector(state) }),\n    { upsertSession }\n)(AddSessionDialog);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport ReactTable from \"react-table\";\nimport { docApiPropTypes } from \"../api/defs/doc-generation\";\n\nimport { formatDate } from \"../libs/utils\";\nconst DEFAULT_COLUMNS = [\n    { Header: \"Name\", accessor: \"name\" },\n    {\n        Header: \"Start\",\n        accessor: \"start_date\",\n        Cell: (row) => formatDate(row.value),\n    },\n    {\n        Header: \"End\",\n        accessor: \"end_date\",\n        Cell: (row) => formatDate(row.value),\n    },\n    { Header: \"Rate (Pre-January)\", accessor: \"rate1\" },\n    { Header: \"Rate (Post-January)\", accessor: \"rate2\" },\n];\n\n/**\n * List the sessions using a ReactTable. `columns` can be passed\n * in to customize columns/cell renderers.\n *\n * @export\n * @param {{sessions: object[], columns: object[]}} props\n * @returns\n */\nexport function SessionsList(props) {\n    const { sessions, columns = DEFAULT_COLUMNS } = props;\n    return (\n        <ReactTable\n            data={sessions}\n            columns={columns}\n            showPagination={false}\n            minRows={1}\n        />\n    );\n}\nSessionsList.propTypes = {\n    sessions: PropTypes.arrayOf(docApiPropTypes.session).isRequired,\n    columns: PropTypes.arrayOf(\n        PropTypes.shape({ Header: PropTypes.any.isRequired })\n    ),\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { ConnectedAddSessionDialog } from \"./add-session-dialog\";\nimport { sessionsSelector } from \"../../api/actions\";\nimport { SessionsList } from \"../../components/sessions\";\nimport {\n    ActionsList,\n    ActionButton,\n    ActionHeader,\n} from \"../../components/action-buttons\";\nimport { ContentArea } from \"../../components/layout\";\nimport { FaPlus } from \"react-icons/fa\";\n\nconst ConnectedSessionList = connect((state) => ({\n    sessions: sessionsSelector(state),\n}))(SessionsList);\n\nexport function AdminSessionsView() {\n    const [addDialogVisible, setAddDialogVisible] = React.useState(false);\n    return (\n        <div className=\"page-body\">\n            <ActionsList>\n                <ActionHeader>Available Actions</ActionHeader>\n                <ActionButton\n                    icon={<FaPlus />}\n                    onClick={() => {\n                        setAddDialogVisible(true);\n                    }}\n                >\n                    Add Session\n                </ActionButton>\n            </ActionsList>\n            <ContentArea>\n                <ConnectedAddSessionDialog\n                    show={addDialogVisible}\n                    onHide={() => {\n                        setAddDialogVisible(false);\n                    }}\n                />\n                <ConnectedSessionList />\n            </ContentArea>\n        </div>\n    );\n}\n\nexport { ConnectedAddSessionDialog };\n","import React from \"react\";\nimport { strip } from \"../../libs/utils\";\nimport { connect } from \"react-redux\";\nimport {\n    upsertPosition,\n    positionsSelector,\n    instructorsSelector,\n    contractTemplatesSelector,\n} from \"../../api/actions\";\nimport { Modal, Button, Alert } from \"react-bootstrap\";\nimport { PositionEditor } from \"../../components/forms/position-editor\";\n\nfunction getConficts(position, positions = []) {\n    const ret = { delayShow: \"\", immediateShow: \"\" };\n    if (\n        !strip(position.position_code) ||\n        !strip(position.start_date) ||\n        !strip(position.end_date)\n    ) {\n        ret.delayShow = \"A position code, start date, and end date is required\";\n    }\n    const matchingSession = positions.find(\n        (x) => strip(x.position_code) === strip(position.position_code)\n    );\n    if (matchingSession) {\n        ret.immediateShow = (\n            <p>Another position exists with name={position.position_code}</p>\n        );\n    }\n    return ret;\n}\n\nconst BLANK_POSITION = {\n    position_code: \"\",\n    position_title: \"\",\n    hours_per_assignment: 0,\n    contract_template_id: null,\n    duties:\n        \"Some combination of marking, invigilating, tutorials, office hours, and the help centre.\",\n    instructors: [],\n};\n\nexport function AddPositionDialog(props) {\n    const {\n        show,\n        onHide = () => {},\n        positions,\n        upsertPosition,\n        instructors,\n        contractTemplates,\n    } = props;\n    const [newPosition, setNewPosition] = React.useState(BLANK_POSITION);\n\n    React.useEffect(() => {\n        if (!show) {\n            // If the dialog is hidden, reset the state\n            setNewPosition(BLANK_POSITION);\n        }\n    }, [show]);\n\n    // select a suitable default for the contract template\n    React.useEffect(() => {\n        // Look for a contract template whose name is \"standard\" or \"default\";\n        // If that fails, find one whose name contains \"standard\" or \"default\";\n        // If all else fails, pick the first template in the list\n        const defaultTemplate =\n            contractTemplates.find(\n                (x) => x.template_name.toLowerCase() === \"standard\"\n            ) ||\n            contractTemplates.find(\n                (x) => x.template_name.toLowerCase() === \"default\"\n            ) ||\n            contractTemplates.find((x) =>\n                x.template_name.toLowerCase().includes(\"standard\")\n            ) ||\n            contractTemplates.find((x) =>\n                x.template_name.toLowerCase().includes(\"default\")\n            ) ||\n            contractTemplates[0];\n        if (defaultTemplate) {\n            BLANK_POSITION.contract_template = defaultTemplate;\n            BLANK_POSITION.contract_template_id = defaultTemplate.id;\n        }\n    }, [contractTemplates]);\n\n    function createPosition() {\n        upsertPosition(newPosition);\n        onHide();\n    }\n\n    const conflicts = getConficts(newPosition, positions);\n\n    return (\n        <Modal show={show} onHide={onHide}>\n            <Modal.Header closeButton>\n                <Modal.Title>Add Position</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <PositionEditor\n                    position={newPosition}\n                    setPosition={setNewPosition}\n                    instructors={instructors}\n                    contractTemplates={contractTemplates}\n                    defaultContractTemplate={BLANK_POSITION.contract_template}\n                />\n                {conflicts.immediateShow ? (\n                    <Alert variant=\"danger\">{conflicts.immediateShow}</Alert>\n                ) : null}\n            </Modal.Body>\n            <Modal.Footer>\n                <Button onClick={onHide} variant=\"light\">\n                    Cancel\n                </Button>\n                <Button\n                    onClick={createPosition}\n                    title={conflicts.delayShow || \"Create Position\"}\n                    disabled={\n                        !!conflicts.delayShow || !!conflicts.immediateShow\n                    }\n                >\n                    Create Position\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n\nexport const ConnectedAddPositionDialog = connect(\n    (state) => ({\n        positions: positionsSelector(state),\n        instructors: instructorsSelector(state),\n        contractTemplates: contractTemplatesSelector(state),\n    }),\n    { upsertPosition }\n)(AddPositionDialog);\n","import { connect } from \"react-redux\";\nimport { positionsSelector } from \"../../api/actions\";\nimport { PositionsList } from \"../../components/positions-list\";\n\nexport const ConnectedPositionsList = connect((state) => ({\n    positions: positionsSelector(state),\n}))(PositionsList);\n","import React from \"react\";\nimport FileSaver from \"file-saver\";\nimport {\n    instructorsSelector,\n    positionsSelector,\n    exportPositions,\n    contractTemplatesSelector,\n    upsertPositions,\n} from \"../../api/actions\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { ExportActionButton } from \"../../components/export-button\";\nimport { ImportActionButton } from \"../../components/import-button\";\nimport { Alert } from \"react-bootstrap\";\nimport { normalizeImport, dataToFile } from \"../../libs/importExportUtils\";\nimport {\n    PositionsList,\n    PositionsDiffList,\n} from \"../../components/positions-list\";\nimport { prepareMinimal } from \"../../libs/exportUtils\";\nimport { diffImport, getChanged } from \"../../libs/diffUtils\";\n\n/**\n * Allows for the download of a file blob containing the exported instructors.\n * Instructors are synchronized from the server before being downloaded.\n *\n * @export\n * @returns\n */\nexport function ConnectedExportPositionsAction() {\n    const dispatch = useDispatch();\n    const [exportType, setExportType] = React.useState(null);\n\n    React.useEffect(() => {\n        if (!exportType) {\n            return;\n        }\n\n        async function doExport() {\n            // Having an export type of `null` means we're ready to export again,\n            // We set the export type to null at the start so in case an error occurs,\n            // we can still try again. This *will not* affect the current value of `exportType`\n            setExportType(null);\n\n            // Make a function that converts a list of instructors into a `File` object.\n            function prepareData(positions, dataFormat) {\n                return dataToFile(\n                    {\n                        toSpreadsheet: () =>\n                            [\n                                [\n                                    \"Position Code\",\n                                    \"Position Title\",\n                                    \"Start Date\",\n                                    \"End Date\",\n                                    \"Hours Per Assignment\",\n                                    \"Number of Assignments\",\n                                    \"Contract Template\",\n                                    \"Instructors\",\n                                    \"Duties\",\n                                    \"Qualifications\",\n                                    \"Current Enrollment\",\n                                    \"Current Waitlisted\",\n                                ],\n                            ].concat(\n                                positions.map((position) => [\n                                    position.position_code,\n                                    position.position_title,\n                                    position.start_date &&\n                                        new Date(position.start_date)\n                                            .toJSON()\n                                            .slice(0, 10),\n                                    position.end_date &&\n                                        new Date(position.end_date)\n                                            .toJSON()\n                                            .slice(0, 10),\n                                    position.hours_per_assignment,\n                                    position.desired_num_assignments,\n                                    position.contract_template.template_name,\n                                    position.instructors\n                                        .map(\n                                            (instructor) =>\n                                                `${instructor.last_name}, ${instructor.first_name}`\n                                        )\n                                        .join(\"; \"),\n                                    position.duties || \"\",\n                                    position.qualifications || \"\",\n                                    position.current_enrollment,\n                                    position.current_waitlisted,\n                                ])\n                            ),\n                        toJson: () => ({\n                            positions: positions.map((position) =>\n                                prepareMinimal.position(position)\n                            ),\n                        }),\n                    },\n                    dataFormat,\n                    \"positions\"\n                );\n            }\n\n            const file = await dispatch(\n                exportPositions(prepareData, exportType)\n            );\n\n            FileSaver.saveAs(file);\n        }\n        doExport().catch(console.error);\n    }, [exportType, dispatch]);\n\n    function onClick(option) {\n        setExportType(option);\n    }\n\n    return <ExportActionButton onClick={onClick} />;\n}\n\nconst positionSchema = {\n    keys: [\n        \"position_code\",\n        \"position_title\",\n        \"start_date\",\n        \"end_date\",\n        \"hours_per_assignment\",\n        \"desired_num_assignments\",\n        \"contract_template\",\n        \"instructors\",\n        \"duties\",\n        \"qualifications\",\n        \"current_enrollment\",\n        \"current_waitlisted\",\n        \"ad_open_date\",\n        \"ad_close_date\",\n        \"ad_hours_per_assignment\",\n        \"ad_num_assignments\",\n    ],\n    keyMap: {\n        \"Position Code\": \"position_code\",\n        \"Course Code\": \"position_code\",\n        \"Course Name\": \"position_code\",\n        \"Position Title\": \"position_title\",\n        \"Start Date\": \"start_date\",\n        Start: \"start_date\",\n        \"End Date\": \"end_date\",\n        End: \"end_date\",\n        \"Hours Per Assignment\": \"hours_per_assignment\",\n        \"Number of Assignments\": \"desired_num_assignments\",\n        \"Contract Template\": \"contract_template\",\n        \"Current Enrollment\": \"current_enrollment\",\n        \"Current Waitlisted\": \"current_waitlisted\",\n    },\n    dateColumns: [\"start_date\", \"end_date\"],\n    requiredKeys: [\"position_code\", \"contract_template\"],\n    primaryKey: \"position_code\",\n    baseName: \"positions\",\n};\n\nexport function ConnectedImportPositionsAction() {\n    const dispatch = useDispatch();\n    const positions = useSelector(positionsSelector);\n    const instructors = useSelector(instructorsSelector);\n    const contractTemplates = useSelector(contractTemplatesSelector);\n    const [fileContent, setFileContent] = React.useState(null);\n    const [diffed, setDiffed] = React.useState(null);\n    const [processingError, setProcessingError] = React.useState(null);\n    const [inProgress, setInProgress] = React.useState(false);\n\n    // Make sure we aren't showing any diff if there's no file loaded.\n    React.useEffect(() => {\n        if (!fileContent) {\n            if (diffed) {\n                setDiffed(null);\n            }\n        }\n    }, [diffed, setDiffed, fileContent]);\n\n    // Recompute the diff every time the file changes\n    React.useEffect(() => {\n        // If we have no file or we are currently in the middle of processing another file,\n        // do nothing.\n        if (!fileContent || inProgress) {\n            return;\n        }\n        try {\n            setProcessingError(null);\n\n            // normalize the data coming from the file\n            let data = normalizeImport(fileContent, positionSchema);\n            // `normalizeImport` only normalizes the column names and dates. We need to make sure the\n            // instructors are correct as well.\n            for (const item of data) {\n                item.instructors = diffImport\n                    .instructorsListFromField(item.instructors || [], {\n                        instructors,\n                    })\n                    .map((x) => x.utorid);\n            }\n\n            // Compute which positions have been added/modified\n            const newDiff = diffImport.positions(data, {\n                positions,\n                instructors,\n                contractTemplates,\n            });\n\n            setDiffed(newDiff);\n        } catch (e) {\n            console.warn(e);\n            setProcessingError(e);\n        }\n    }, [fileContent, positions, contractTemplates, instructors, inProgress]);\n\n    async function onConfirm() {\n        const changedPositions = getChanged(diffed);\n        await dispatch(upsertPositions(changedPositions));\n        setFileContent(null);\n    }\n\n    let dialogContent = <p>No data loaded...</p>;\n    if (processingError) {\n        dialogContent = <Alert variant=\"danger\">{\"\" + processingError}</Alert>;\n    } else if (diffed) {\n        const newItems = diffed\n            .filter((item) => item.status === \"new\")\n            .map((item) => item.obj);\n        const modifiedDiffSpec = diffed.filter(\n            (item) => item.status === \"modified\"\n        );\n\n        if (newItems.length === 0 && modifiedDiffSpec.length === 0) {\n            dialogContent = (\n                <Alert variant=\"warning\">\n                    No difference between imported positions and those already\n                    on the system.\n                </Alert>\n            );\n        } else {\n            dialogContent = (\n                <>\n                    {newItems.length > 0 && (\n                        <Alert variant=\"primary\">\n                            <span className=\"mb-1\">\n                                The following positions will be{\" \"}\n                                <strong>added</strong>\n                            </span>\n                            <PositionsList positions={newItems} />\n                        </Alert>\n                    )}\n                    {modifiedDiffSpec.length > 0 && (\n                        <Alert variant=\"info\">\n                            <span className=\"mb-1\">\n                                The following positions will be{\" \"}\n                                <strong>modified</strong>\n                            </span>\n                            <PositionsDiffList\n                                modifiedPositions={modifiedDiffSpec}\n                            />\n                        </Alert>\n                    )}\n                </>\n            );\n        }\n    }\n\n    return (\n        <ImportActionButton\n            onConfirm={onConfirm}\n            onFileChange={setFileContent}\n            dialogContent={dialogContent}\n            setInProgress={setInProgress}\n        />\n    );\n}\n","import React from \"react\";\nimport { ConnectedAddPositionDialog } from \"./add-position-dialog\";\nimport { ConnectedPositionsList } from \"./position-list\";\nimport {\n    ConnectedExportPositionsAction,\n    ConnectedImportPositionsAction,\n} from \"./import-export\";\nimport {\n    ActionsList,\n    ActionButton,\n    ActionHeader,\n} from \"../../components/action-buttons\";\nimport { ContentArea } from \"../../components/layout\";\nimport { FaPlus } from \"react-icons/fa\";\n\nexport function AdminPositionsView() {\n    const [addDialogVisible, setAddDialogVisible] = React.useState(false);\n    return (\n        <div className=\"page-body\">\n            <ActionsList>\n                <ActionHeader>Available Actions</ActionHeader>\n                <ActionButton\n                    icon={<FaPlus />}\n                    onClick={() => {\n                        setAddDialogVisible(true);\n                    }}\n                >\n                    Add Position\n                </ActionButton>\n                <ActionHeader>Import/Export</ActionHeader>\n                <ConnectedImportPositionsAction />\n                <ConnectedExportPositionsAction />\n            </ActionsList>\n            <ContentArea>\n                <ConnectedAddPositionDialog\n                    show={addDialogVisible}\n                    onHide={() => {\n                        setAddDialogVisible(false);\n                    }}\n                />\n                <ConnectedPositionsList />\n            </ContentArea>\n        </div>\n    );\n}\n\nexport { ConnectedAddPositionDialog, ConnectedPositionsList };\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Modal, Alert, Button } from \"react-bootstrap\";\nimport { strip } from \"../../libs/utils\";\nimport {\n    positionsSelector,\n    applicantsSelector,\n    assignmentsSelector,\n    upsertAssignment,\n} from \"../../api/actions\";\nimport { AssignmentEditor } from \"../../components/forms/assignment-editor\";\n\nfunction getConficts(assignment, assignments = []) {\n    const ret = { delayShow: \"\", immediateShow: \"\" };\n    if (!strip(assignment.position_id) || !strip(assignment.applicant_id)) {\n        ret.delayShow = \"A position and applicant is required\";\n    }\n    const matchingAssignment = assignments.find(\n        (x) =>\n            strip((x.position || {}).id) ===\n                strip((assignment.position || {}).id) &&\n            strip((x.applicant || {}).id) ===\n                strip((assignment.applicant || {}).id)\n    );\n    if (matchingAssignment) {\n        ret.immediateShow = (\n            <p>\n                Another assignment exists with{\" \"}\n                <b>\n                    applicant={assignment.applicant.first_name}{\" \"}\n                    {assignment.applicant.last_name}\n                </b>{\" \"}\n                and <b>position={assignment.position.position_code}</b>\n            </p>\n        );\n    }\n    return ret;\n}\n\nconst BLANK_ASSIGNMENT = {\n    position: { id: null },\n    applicant: { id: null },\n    position_id: -1,\n    applicant_id: -1,\n};\n\nexport function AddAssignmentDialog(props) {\n    const {\n        show,\n        onHide,\n        positions,\n        applicants,\n        assignments,\n        upsertAssignment,\n    } = props;\n    const [newAssignment, setNewAssignment] = React.useState(BLANK_ASSIGNMENT);\n\n    React.useEffect(() => {\n        if (!show) {\n            // If the dialog is hidden, reset the state\n            setNewAssignment(BLANK_ASSIGNMENT);\n        }\n    }, [show]);\n\n    function createAssignment() {\n        upsertAssignment(newAssignment);\n        onHide();\n    }\n\n    const conflicts = getConficts(newAssignment, assignments);\n\n    return (\n        <Modal show={show} onHide={onHide}>\n            <Modal.Header closeButton>\n                <Modal.Title>Add Assignment</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <AssignmentEditor\n                    positions={positions}\n                    applicants={applicants}\n                    assignment={newAssignment}\n                    setAssignment={setNewAssignment}\n                />\n                {conflicts.immediateShow ? (\n                    <Alert variant=\"danger\">{conflicts.immediateShow}</Alert>\n                ) : null}\n            </Modal.Body>\n            <Modal.Footer>\n                <Button onClick={onHide} variant=\"light\">\n                    Cancel\n                </Button>\n                <Button\n                    onClick={createAssignment}\n                    title={conflicts.delayShow || \"Create Position\"}\n                    disabled={\n                        !!conflicts.delayShow || !!conflicts.immediateShow\n                    }\n                >\n                    Create Assignment\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n\nexport const ConnectedAddAssignmentDialog = connect(\n    (state) => ({\n        positions: positionsSelector(state),\n        applicants: applicantsSelector(state),\n        assignments: assignmentsSelector(state),\n    }),\n    { upsertAssignment }\n)(AddAssignmentDialog);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { offerTableSelector } from \"../offertable/actions\";\nimport {\n    assignmentsSelector,\n    wageChunksByAssignmentSelector,\n    fetchWageChunksForAssignment,\n    upsertWageChunksForAssignment,\n} from \"../../api/actions\";\nimport { EditableField } from \"../../components/edit-field-widgets\";\nimport { Button } from \"react-bootstrap\";\nfunction AssignmentDetails(props) {\n    const {\n        assignment,\n        wageChunksByAssignment,\n        fetchWageChunksForAssignment,\n        upsertWageChunksForAssignment,\n    } = props;\n    const [wageChunks, setWageChunks] = React.useState([]);\n    React.useEffect(() => {\n        // When the widget loads or the assignment changes, fetch data once.\n        fetchWageChunksForAssignment(assignment);\n        // We are purposely not including fetchWageChunksForAssignment in the dependency list to avoid an infite loop\n        // eslint-disable-next-line\n    }, [assignment]);\n    React.useEffect(() => {\n        // Whenever wage chunk data has changed, we need to rerender\n        setWageChunks(wageChunksByAssignment(assignment));\n    }, [assignment, wageChunksByAssignment, fetchWageChunksForAssignment]);\n    /**\n     * Creates an onChange handler for the hours field of wage chunk i\n     *\n     * @param {number} i\n     */\n    function changeHoursFactory(i) {\n        return function (hours) {\n            const newWageChunks = wageChunks.map((chunk, j) => {\n                if (i !== j) {\n                    return chunk;\n                }\n                // Update the hours for the specified chunk\n                return { ...chunk, hours: +hours };\n            });\n            upsertWageChunksForAssignment(assignment, newWageChunks);\n        };\n    }\n    return (\n        <div>\n            <h5>\n                {assignment.applicant.first_name}{\" \"}\n                {assignment.applicant.last_name}\n            </h5>\n            <div>\n                {assignment.position.position_code}{\" \"}\n                {assignment.position.position_name}\n            </div>\n            <div>{assignment.hours} hours</div>\n            Wage Chunks:\n            <ul>\n                {wageChunks.map((chunk, i) => (\n                    <li key={i}>\n                        <EditableField\n                            title=\"Hours\"\n                            value={chunk.hours}\n                            onChange={changeHoursFactory(i)}\n                        >\n                            {chunk.hours}\n                        </EditableField>{\" \"}\n                        hours at a rate of ${chunk.rate} from {chunk.start_date}{\" \"}\n                        to {chunk.end_date}\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n}\n\nconst ConnectedAssignmentDetails = connect(\n    (state) => ({\n        wageChunksByAssignment: wageChunksByAssignmentSelector(state),\n    }),\n    { fetchWageChunksForAssignment, upsertWageChunksForAssignment }\n)(AssignmentDetails);\nfunction ViewAssignmentDetailsButton(props) {\n    // Which assignments are selected could change with further UI interaction.\n    // So we store a copy of the assignments list as `visibleAssignments` when\n    // the view button is clicked\n    const selectedAssignments = props.assignments;\n    const [visibleAssignments, setVisibleAssignments] = React.useState([]);\n    return (\n        <React.Fragment>\n            <Button onClick={() => setVisibleAssignments(selectedAssignments)}>\n                View Selected Assignment Details\n            </Button>\n            {visibleAssignments.map((assignment, i) => (\n                <ConnectedAssignmentDetails assignment={assignment} key={i} />\n            ))}\n        </React.Fragment>\n    );\n}\nexport const ConnectedViewAssignmentDetailsButton = connect((state) => {\n    // pass in the currently selected assignments.\n    const { selectedAssignmentIds } = offerTableSelector(state);\n    const assignments = assignmentsSelector(state);\n    return {\n        assignments: assignments.filter((x) =>\n            selectedAssignmentIds.includes(x.id)\n        ),\n    };\n})(ViewAssignmentDetailsButton);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { offerTableSelector } from \"../offertable/actions\";\nimport { assignmentsSelector } from \"../../api/actions\";\nimport {\n    offerForAssignmentCreate,\n    offerForAssignmentEmail,\n    offerForAssignmentNag,\n    offerForAssignmentWithdraw,\n    setOfferForAssignmentAccepted,\n    setOfferForAssignmentRejected,\n} from \"../../api/actions/offers\";\nimport {\n    FaEnvelope,\n    FaBan,\n    FaCheck,\n    FaUserTimes,\n    FaUserClock,\n    FaUserPlus,\n} from \"react-icons/fa\";\nimport { ActionButton } from \"../../components/action-buttons\";\n\nfunction OfferActionButtons(props) {\n    const selectedAssignments = props.assignments;\n    const {\n        offerForAssignmentCreate,\n        offerForAssignmentEmail,\n        offerForAssignmentNag,\n        offerForAssignmentWithdraw,\n        setOfferForAssignmentAccepted,\n        setOfferForAssignmentRejected,\n    } = props;\n\n    function createOffers() {\n        for (const assignment of selectedAssignments) {\n            offerForAssignmentCreate(assignment);\n        }\n    }\n    function withdrawOffers() {\n        for (const assignment of selectedAssignments) {\n            offerForAssignmentWithdraw(assignment);\n        }\n    }\n    function emailOffers() {\n        for (const assignment of selectedAssignments) {\n            offerForAssignmentEmail(assignment);\n        }\n    }\n    function nagOffers() {\n        for (const assignment of selectedAssignments) {\n            offerForAssignmentNag(assignment);\n        }\n    }\n    function acceptOffers() {\n        for (const assignment of selectedAssignments) {\n            setOfferForAssignmentAccepted(assignment);\n        }\n    }\n    function rejectOffers() {\n        for (const assignment of selectedAssignments) {\n            setOfferForAssignmentRejected(assignment);\n        }\n    }\n\n    return (\n        <React.Fragment>\n            <ActionButton icon={<FaUserPlus />} onClick={createOffers}>\n                Create Offer\n            </ActionButton>\n            <ActionButton icon={<FaUserTimes />} onClick={withdrawOffers}>\n                Withdraw Offer\n            </ActionButton>\n            <ActionButton icon={<FaEnvelope />} onClick={emailOffers}>\n                Email Offer\n            </ActionButton>\n            <ActionButton icon={<FaUserClock />} onClick={nagOffers}>\n                Nag Offer\n            </ActionButton>\n            <ActionButton icon={<FaCheck />} onClick={acceptOffers}>\n                Set as Accepted\n            </ActionButton>\n            <ActionButton icon={<FaBan />} onClick={rejectOffers}>\n                Set as Rejected\n            </ActionButton>\n        </React.Fragment>\n    );\n}\nexport const ConnectedOfferActionButtons = connect(\n    (state) => {\n        // pass in the currently selected assignments.\n        const { selectedAssignmentIds } = offerTableSelector(state);\n        const assignments = assignmentsSelector(state);\n        return {\n            assignments: assignments.filter((x) =>\n                selectedAssignmentIds.includes(x.id)\n            ),\n        };\n    },\n    {\n        offerForAssignmentCreate,\n        offerForAssignmentEmail,\n        offerForAssignmentNag,\n        offerForAssignmentWithdraw,\n        setOfferForAssignmentAccepted,\n        setOfferForAssignmentRejected,\n    }\n)(OfferActionButtons);\n","import React from \"react\";\nimport FileSaver from \"file-saver\";\nimport {\n    assignmentsSelector,\n    exportAssignments,\n    activeSessionSelector,\n    applicantsSelector,\n    positionsSelector,\n    upsertAssignments,\n} from \"../../api/actions\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { ExportActionButton } from \"../../components/export-button\";\nimport { ImportActionButton } from \"../../components/import-button\";\nimport { Alert } from \"react-bootstrap\";\nimport { normalizeImport, dataToFile } from \"../../libs/importExportUtils\";\nimport {\n    AssignmentsList,\n    AssignmentsDiffList,\n} from \"../../components/assignments-list\";\nimport { prepareMinimal } from \"../../libs/exportUtils\";\nimport { diffImport, getChanged } from \"../../libs/diffUtils\";\n\n/**\n * Allows for the download of a file blob containing the exported instructors.\n * Instructors are synchronized from the server before being downloaded.\n *\n * @export\n * @returns\n */\nexport function ConnectedExportAssignmentsAction() {\n    const dispatch = useDispatch();\n    const session = useSelector(activeSessionSelector);\n    const [exportType, setExportType] = React.useState(null);\n\n    React.useEffect(() => {\n        if (!exportType) {\n            return;\n        }\n\n        async function doExport() {\n            // Having an export type of `null` means we're ready to export again,\n            // We set the export type to null at the start so in case an error occurs,\n            // we can still try again. This *will not* affect the current value of `exportType`\n            setExportType(null);\n\n            // Make a function that converts a list of instructors into a `File` object.\n            function prepareData(assignments, dataFormat) {\n                // We want to flatten a lot of the data in `assignments` and only include the information\n                // we need.\n                const assignmentsForSpreadsheet = assignments.map(\n                    (assignment) => ({\n                        first_name: assignment.applicant.first_name,\n                        last_name: assignment.applicant.first_name,\n                        utorid: assignment.applicant.utorid,\n                        position_code: assignment.position.position_code,\n                        start_date: assignment.start_date,\n                        end_date: assignment.end_date,\n                        contract_template: assignment.contract_override_pdf\n                            ? null\n                            : assignment.position.contract_template\n                                  .template_name,\n                        contract_override_pdf: assignment.contract_override_pdf,\n                        hours: assignment.hours,\n                        active_offer_status: assignment.active_offer_status,\n                        wage_chunks: assignment.wage_chunks.map((chunk) => ({\n                            hours: chunk.hours,\n                            rate: chunk.rate,\n                            start_date: chunk.start_date,\n                            end_date: chunk.end_date,\n                        })),\n                    })\n                );\n                return dataToFile(\n                    {\n                        toSpreadsheet: () =>\n                            [\n                                [\n                                    \"Last Name\",\n                                    \"First Name\",\n                                    \"UTORid\",\n                                    \"Position Code\",\n                                    \"Start Date\",\n                                    \"End Date\",\n                                    \"Hours\",\n                                    \"Contract Template\",\n                                    \"Contract Override PDF\",\n                                    \"Offer Status\",\n                                ],\n                            ].concat(\n                                assignmentsForSpreadsheet.map((assignment) => [\n                                    assignment.first_name,\n                                    assignment.last_name,\n                                    assignment.utorid,\n                                    assignment.position_code,\n                                    assignment.start_date &&\n                                        new Date(assignment.start_date)\n                                            .toJSON()\n                                            .slice(0, 10),\n                                    assignment.end_date &&\n                                        new Date(assignment.end_date)\n                                            .toJSON()\n                                            .slice(0, 10),\n                                    assignment.hours,\n                                    assignment.contract_template,\n                                    assignment.contract_override_pdf,\n                                    assignment.active_offer_status,\n                                ])\n                            ),\n                        toJson: () => ({\n                            assignments: assignments.map((assignment) =>\n                                prepareMinimal.assignment(assignment, session)\n                            ),\n                        }),\n                    },\n                    dataFormat,\n                    \"assignments\"\n                );\n            }\n\n            const file = await dispatch(\n                exportAssignments(prepareData, exportType)\n            );\n\n            FileSaver.saveAs(file);\n        }\n        doExport().catch(console.error);\n    }, [exportType, dispatch, session]);\n\n    function onClick(option) {\n        setExportType(option);\n    }\n\n    return <ExportActionButton onClick={onClick} />;\n}\n\nconst assignmentSchema = {\n    // We don't list \"active_offer_status\" because that cannot be imported. It has to be set\n    // via the TA or manually by the admin.\n    keys: [\n        \"utorid\",\n        \"position_code\",\n        \"start_date\",\n        \"end_date\",\n        \"contract_template\",\n        \"contract_override_pdf\",\n        \"hours\",\n        \"wage_chunks\",\n    ],\n    keyMap: {\n        \"Position Code\": \"position_code\",\n        \"Course Name\": \"position_code\",\n        \"Start Date\": \"start_date\",\n        Start: \"start_date\",\n        \"End Date\": \"end_date\",\n        End: \"end_date\",\n        Hours: \"hours\",\n        \"Contract Override PDF\": \"contract_override_pdf\",\n    },\n    dateColumns: [\"start_date\", \"end_date\"],\n    requiredKeys: [\"position_code\", \"utorid\"],\n    primaryKey: [\"utorid\", \"position_code\"],\n    baseName: \"assignments\",\n};\n\nexport function ConnectedImportAssignmentsAction() {\n    const dispatch = useDispatch();\n    const assignments = useSelector(assignmentsSelector);\n    const applicants = useSelector(applicantsSelector);\n    const positions = useSelector(positionsSelector);\n    const session = useSelector(activeSessionSelector);\n    const [fileContent, setFileContent] = React.useState(null);\n    const [diffed, setDiffed] = React.useState(null);\n    const [processingError, setProcessingError] = React.useState(null);\n    const [inProgress, setInProgress] = React.useState(false);\n\n    // Make sure we aren't showing any diff if there's no file loaded.\n    React.useEffect(() => {\n        if (!fileContent) {\n            if (diffed) {\n                setDiffed(null);\n            }\n        }\n    }, [diffed, setDiffed, fileContent]);\n\n    // Recompute the diff every time the file changes\n    React.useEffect(() => {\n        // If we have no file or we are currently in the middle of processing another file,\n        // do nothing.\n        if (!fileContent || inProgress) {\n            return;\n        }\n        try {\n            setProcessingError(null);\n\n            // normalize the data coming from the file\n            let data = normalizeImport(fileContent, assignmentSchema);\n            // If data is coming from a spreadsheet, we need to make sure the\n            // `hours` field is coerced to a number\n            for (const item of data) {\n                if (item.hours) {\n                    item.hours = +item.hours;\n                }\n            }\n\n            // Compute which positions have been added/modified\n            const newDiff = diffImport.assignments(data, {\n                assignments,\n                positions,\n                applicants,\n                session,\n            });\n\n            setDiffed(newDiff);\n        } catch (e) {\n            console.warn(e);\n            setProcessingError(e);\n        }\n    }, [fileContent, assignments, positions, applicants, session, inProgress]);\n\n    async function onConfirm() {\n        const changedPositions = getChanged(diffed);\n        await dispatch(upsertAssignments(changedPositions));\n        setFileContent(null);\n    }\n\n    let dialogContent = <p>No data loaded...</p>;\n    if (processingError) {\n        dialogContent = <Alert variant=\"danger\">{\"\" + processingError}</Alert>;\n    } else if (diffed) {\n        const newItems = diffed\n            .filter((item) => item.status === \"new\")\n            .map((item) => item.obj);\n        const modifiedDiffSpec = diffed.filter(\n            (item) => item.status === \"modified\"\n        );\n\n        if (newItems.length === 0 && modifiedDiffSpec.length === 0) {\n            dialogContent = (\n                <Alert variant=\"warning\">\n                    No difference between imported assignments and those already\n                    on the system.\n                </Alert>\n            );\n        } else {\n            dialogContent = (\n                <>\n                    {newItems.length > 0 && (\n                        <Alert variant=\"primary\">\n                            <span className=\"mb-1\">\n                                The following assignments will be{\" \"}\n                                <strong>added</strong>\n                            </span>\n                            <AssignmentsList assignments={newItems} />\n                        </Alert>\n                    )}\n                    {modifiedDiffSpec.length > 0 && (\n                        <Alert variant=\"info\">\n                            <span className=\"mb-1\">\n                                The following assignments will be{\" \"}\n                                <strong>modified</strong>\n                            </span>\n                            <AssignmentsDiffList\n                                modifiedAssignments={modifiedDiffSpec}\n                            />\n                        </Alert>\n                    )}\n                </>\n            );\n        }\n    }\n\n    return (\n        <ImportActionButton\n            onConfirm={onConfirm}\n            onFileChange={setFileContent}\n            dialogContent={dialogContent}\n            setInProgress={setInProgress}\n        />\n    );\n}\n","import React from \"react\";\nimport { ConnectedOfferTable } from \"../offertable\";\nimport { ConnectedAddAssignmentDialog } from \"./add-assignment-dialog\";\nimport { ConnectedViewAssignmentDetailsButton } from \"./assignment-details\";\nimport { ConnectedOfferActionButtons } from \"./offer-actions\";\nimport {\n    ConnectedExportAssignmentsAction,\n    ConnectedImportAssignmentsAction,\n} from \"./import-export\";\nimport {\n    ActionsList,\n    ActionButton,\n    ActionHeader,\n} from \"../../components/action-buttons\";\nimport { ContentArea } from \"../../components/layout\";\nimport { FaPlus } from \"react-icons/fa\";\n\nexport function AdminAssignmentsView() {\n    const [addDialogVisible, setAddDialogVisible] = React.useState(false);\n    return (\n        <div className=\"page-body\">\n            <ActionsList>\n                <ActionHeader>Available Actions</ActionHeader>\n                <ActionButton\n                    icon={<FaPlus />}\n                    onClick={() => {\n                        setAddDialogVisible(true);\n                    }}\n                >\n                    Add Assignment\n                </ActionButton>\n                <ActionHeader>Import/Export</ActionHeader>\n                <ConnectedImportAssignmentsAction />\n                <ConnectedExportAssignmentsAction />\n                <ActionHeader>Selected Assignment Actions</ActionHeader>\n                <ConnectedOfferActionButtons />\n            </ActionsList>\n            <ContentArea>\n                <ConnectedViewAssignmentDetailsButton />\n\n                <ConnectedOfferTable />\n                <ConnectedAddAssignmentDialog\n                    show={addDialogVisible}\n                    onHide={() => {\n                        setAddDialogVisible(false);\n                    }}\n                />\n            </ContentArea>\n        </div>\n    );\n}\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Modal, Button, Alert } from \"react-bootstrap\";\nimport {\n    contractTemplatesSelector,\n    allContractTemplatesSelector,\n    upsertContractTemplate,\n    fetchAllContractTemplates,\n} from \"../../api/actions\";\nimport { strip } from \"../../libs/utils\";\nimport { ContractTemplateEditor } from \"../../components/forms/contract-template-editor\";\n\nconst BLANK_CONTRACT_TEMPLATE = {\n    template_name: \"\",\n    template_file: \"\",\n};\n\n/**\n * Find if there is a conflicting instructor in the passed in list\n * of instructors, or if any required fields are incorrect.\n *\n * @param {object} contractTemplate\n * @param {object[]} contractTemplates\n */\nfunction getConficts(contractTemplate, contractTemplates) {\n    const ret = { delayShow: \"\", immediateShow: \"\" };\n    if (\n        !strip(contractTemplate.template_name) ||\n        !strip(contractTemplate.template_file)\n    ) {\n        ret.delayShow = \"A template name and template file is required\";\n    }\n    const matchingTemplate = contractTemplates.find(\n        (x) => strip(x.template_name) === strip(contractTemplate.template_name)\n    );\n    if (matchingTemplate) {\n        ret.immediateShow = (\n            <p>\n                Another contract template exists with name=\n                {contractTemplate.template_name}:{\" \"}\n                <b>\n                    {matchingTemplate.template_name}{\" \"}\n                    {matchingTemplate.template_file}\n                </b>\n            </p>\n        );\n    }\n    return ret;\n}\n\nfunction AddContractTemplateDialog(props) {\n    const {\n        show,\n        onHide = () => {},\n        contractTemplates,\n        availableTemplates,\n        upsertContractTemplate,\n        fetchAllContractTemplates,\n    } = props;\n    const [newContractTemplate, setNewContractTemplate] = React.useState(\n        BLANK_CONTRACT_TEMPLATE\n    );\n\n    React.useEffect(() => {\n        if (!show) {\n            // If the dialog is hidden, reset the state\n            setNewContractTemplate(BLANK_CONTRACT_TEMPLATE);\n        } else {\n            // If we've just become visible, fetch all available contract templates\n            fetchAllContractTemplates();\n        }\n    }, [show, fetchAllContractTemplates]);\n\n    function createContractTemplate() {\n        upsertContractTemplate(newContractTemplate);\n        onHide();\n    }\n\n    const conflicts = getConficts(newContractTemplate, contractTemplates);\n\n    return (\n        <Modal show={show} onHide={onHide}>\n            <Modal.Header closeButton>\n                <Modal.Title>Add Contract Template</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <ContractTemplateEditor\n                    contractTemplate={newContractTemplate}\n                    setContractTemplate={setNewContractTemplate}\n                    availableTemplates={availableTemplates}\n                />\n\n                {conflicts.immediateShow ? (\n                    <Alert variant=\"danger\">{conflicts.immediateShow}</Alert>\n                ) : null}\n            </Modal.Body>\n            <Modal.Footer>\n                <Button onClick={onHide} variant=\"light\">\n                    Cancel\n                </Button>\n                <Button\n                    onClick={createContractTemplate}\n                    title={conflicts.delayShow || \"Create Contract Template\"}\n                    disabled={\n                        !!conflicts.delayShow || !!conflicts.immediateShow\n                    }\n                >\n                    Create Contract Template\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n/**\n * AddContractTemplateDialog that has been connected to the redux store\n */\nexport const ConnectedAddContractTemplateDialog = connect(\n    (state) => ({\n        contractTemplates: contractTemplatesSelector(state),\n        availableTemplates: allContractTemplatesSelector(state),\n    }),\n    { upsertContractTemplate, fetchAllContractTemplates }\n)(AddContractTemplateDialog);\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport FileSaver from \"file-saver\";\nimport { FaDownload } from \"react-icons/fa\";\nimport {\n    contractTemplatesSelector,\n    previewContractTemplate,\n    downloadContractTemplate,\n} from \"../../api/actions\";\nimport { ContractTemplatesList } from \"../../components/contract-templates-list\";\nimport { FaSearch } from \"react-icons/fa\";\nimport { Button, Modal, Alert, Spinner } from \"react-bootstrap\";\nimport ModalHeader from \"react-bootstrap/ModalHeader\";\n\nfunction TemplatePreviewDialog({ show, onClose, template_id }) {\n    const [isLoading, setIsLoading] = React.useState(false);\n    const [cachedPreview, setCachedPreview] = React.useState({\n        id: null,\n        content: null,\n    });\n    const dispatch = useDispatch();\n\n    React.useEffect(() => {\n        if (\n            // Don't try to load an invalid template\n            template_id == null ||\n            // Don't reload a template that we've already loaded\n            template_id === cachedPreview.template_id\n        ) {\n            setIsLoading(false);\n            return;\n        }\n\n        // We're loading a template that we haven't loaded yet.\n        setIsLoading(true);\n        dispatch(previewContractTemplate(template_id))\n            .then((content) => {\n                setCachedPreview({ id: template_id, content });\n            })\n            .finally(() => setIsLoading(false));\n    }, [template_id, setIsLoading, cachedPreview.template_id, dispatch]);\n\n    async function downloadClicked() {\n        const file = await dispatch(downloadContractTemplate(template_id));\n        FileSaver.saveAs(file);\n    }\n\n    return (\n        <Modal\n            size=\"xl\"\n            show={show}\n            onHide={onClose}\n            dialogClassName=\"fullscreen-modal\"\n        >\n            <ModalHeader closeButton>\n                <Modal.Title>Previewing Template</Modal.Title>\n            </ModalHeader>\n            <Modal.Body className=\"d-flex\">\n                <p>\n                    The template you are previewing has its fields filled in\n                    with dummy values. These values will be replaced with\n                    correct values when the template is used to create a\n                    contract.\n                </p>\n                {isLoading && (\n                    <Alert variant=\"info\">\n                        <Spinner animation=\"border\" className=\"mr-3\" />\n                        Loading Template...\n                    </Alert>\n                )}\n                {template_id != null && !isLoading && (\n                    <iframe\n                        style={{\n                            boder: \"1px solid black\",\n                            width: \"100%\",\n                            flexGrow: 1,\n                        }}\n                        srcDoc={isLoading ? null : cachedPreview.content}\n                        title=\"Contract template preview\"\n                    />\n                )}\n            </Modal.Body>\n            <Modal.Footer>\n                <Button\n                    title=\"Download a copy of this template. The downloaded copy will have no substitutions made and will be suitable for editing.\"\n                    onClick={downloadClicked}\n                    variant=\"link\"\n                >\n                    <FaDownload className=\"mr-2\" />\n                    Download Template\n                </Button>\n                <Button variant=\"secondary\" onClick={onClose}>\n                    Close\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n\nexport function ConnectedContractTemplateList() {\n    const [previewVisible, setPreviewVisible] = React.useState(false);\n    const [previewingTemplate, setPreviewingTemplate] = React.useState(null);\n    const contractTemplates = useSelector(contractTemplatesSelector);\n    const columns = [\n        { Header: \"Template Name\", accessor: \"template_name\" },\n        {\n            Header: \"Template File\",\n            accessor: \"template_file\",\n            Cell: TemplateFileCell,\n        },\n    ];\n\n    function TemplateFileCell({ row }) {\n        const rowData = row._original;\n        const template_id = rowData.id;\n        const template_file = rowData.template_file;\n\n        return (\n            <div>\n                <Button\n                    variant=\"light\"\n                    size=\"sm\"\n                    className=\"mr-2 py-0\"\n                    title=\"Preview Template\"\n                    onClick={() => previewClicked(template_id)}\n                >\n                    <FaSearch />\n                </Button>\n                {template_file}\n            </div>\n        );\n    }\n\n    function previewClicked(template_id) {\n        setPreviewingTemplate(template_id);\n        setPreviewVisible(true);\n    }\n\n    return (\n        <>\n            <ContractTemplatesList\n                contractTemplates={contractTemplates}\n                columns={columns}\n            />\n            <TemplatePreviewDialog\n                show={previewVisible}\n                onClose={() => setPreviewVisible(false)}\n                template_id={previewingTemplate}\n            />\n        </>\n    );\n}\n","import React from \"react\";\nimport { ConnectedAddContractTemplateDialog } from \"./contract-template-dialog\";\nimport { ConnectedContractTemplateList } from \"./contract-template-list\";\nimport {\n    ActionsList,\n    ActionButton,\n    ActionHeader,\n} from \"../../components/action-buttons\";\nimport { ContentArea } from \"../../components/layout\";\nimport { FaPlus } from \"react-icons/fa\";\n\nexport function AdminContractTemplatesView() {\n    const [addDialogVisible, setAddDialogVisible] = React.useState(false);\n    return (\n        <div className=\"page-body\">\n            <ActionsList>\n                <ActionHeader>Available Actions</ActionHeader>\n                <ActionButton\n                    icon={<FaPlus />}\n                    onClick={() => {\n                        setAddDialogVisible(true);\n                    }}\n                >\n                    Add Contract Template\n                </ActionButton>\n            </ActionsList>\n            <ContentArea>\n                <ConnectedContractTemplateList />\n                <ConnectedAddContractTemplateDialog\n                    show={addDialogVisible}\n                    onHide={() => {\n                        setAddDialogVisible(false);\n                    }}\n                />\n            </ContentArea>\n        </div>\n    );\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Nav, Navbar } from \"react-bootstrap\";\nimport { NavLink, useRouteMatch } from \"react-router-dom\";\n\nimport \"./components.css\";\n\n/**\n * Wrap `\"react-router-dom\"`'s `NavLink` in Bootstrap\n * styling.\n *\n * @param {*} props\n * @returns\n */\nfunction BootstrapNavItem(props) {\n    return (\n        <Nav.Item>\n            <Nav.Link as={NavLink} {...props}>\n                {props.children}\n            </Nav.Link>\n        </Nav.Item>\n    );\n}\nBootstrapNavItem.propTypes = {\n    to: PropTypes.string,\n};\n\n/**\n * Render a header that dynamically adjusts depending on the route\n * (as determined by `react-router-dom`). Top-level routes appear in\n * a dropdown menu. Subroutes (which only show when the top-level route is active)\n * appear as a horizontal list. A top-level route takes the form\n *\n * ```\n * {\n *    route: \"/some/route\"\n *    name: \"Display Name\"\n *    description: \"Alt Text\"\n *    subroutes: [<same as routes>]\n * }\n * ```\n *\n * `subroutes.route` is automatically prefixed with the parent's `route`.\n *\n * @export\n * @param {object[]} props.routes\n * @returns\n */\n\nexport function Header(props) {\n    const { routes = [], infoComponents = [] } = props;\n    let match = useRouteMatch(\"/:mainRoute/:subRoute?\") || {\n        params: { mainRoute: \"tapp\" },\n    };\n    const { mainRoute } = match.params;\n\n    if (routes.length === 0) {\n        return <div>No Routes in Header</div>;\n    }\n\n    const activeMainRoutes = routes.map((route) => (\n        <BootstrapNavItem\n            eventKey={route.route}\n            to={route.route}\n            key={route.route}\n            className=\"primary\"\n        >\n            {route.name}\n        </BootstrapNavItem>\n    ));\n\n    // filters the routes to include only the current route, then maps all of that route's subroutes to BootstrapNavItems\n    const availableSubroutes = routes\n        .filter((route) => route.route.substring(1) === mainRoute)\n        .map((route) =>\n            (route.subroutes || []).map((subroute) => {\n                const fullroute = `${route.route}${subroute.route}`;\n                return (\n                    <BootstrapNavItem\n                        to={fullroute}\n                        title={subroute.name}\n                        key={fullroute}\n                        className=\"secondary\"\n                    >\n                        {subroute.name}\n                    </BootstrapNavItem>\n                );\n            })\n        );\n\n    return (\n        <div className=\"header-container\">\n            <div className=\"header-nav\">\n                <Navbar>\n                    <Nav\n                        activeKey={mainRoute}\n                        defaultActiveKey={\"tapp\"}\n                        className=\"primary-nav-links\"\n                    >\n                        {activeMainRoutes}\n                    </Nav>\n                </Navbar>\n                <Nav className=\"secondary-nav-links\">{availableSubroutes}</Nav>\n            </div>\n            <div className=\"header-widgets\">{infoComponents}</div>\n        </div>\n    );\n}\n\nHeader.propTypes = {\n    routes: PropTypes.arrayOf(\n        PropTypes.shape({\n            route: PropTypes.string.isRequired,\n            name: PropTypes.string.isRequired,\n            description: PropTypes.string,\n            subroutes: PropTypes.arrayOf(\n                PropTypes.shape({\n                    route: PropTypes.string.isRequired,\n                    name: PropTypes.string.isRequired,\n                    description: PropTypes.string,\n                })\n            ),\n        })\n    ),\n    infoComponents: PropTypes.array,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Dropdown, FormControl } from \"react-bootstrap\";\n/**\n * react-bootstrap dropdown menu that is filterable. Expects\n * children which are `Dropdown.Item` and contain just text\n * as content. To use, set as the `as=` attribute on a `Dropdown.Menu`.\n *\n * Notes: Because of the way react-bootstrap works, this\n * component must be wrapped in a `React.formwardRef`.\n */\nconst FilterableMenuContents = React.forwardRef((props, ref) => {\n    const { children, style, className, clearFilter } = props;\n    const [filter, setFilter] = React.useState(\"\");\n    // If the `clearFilter` flag is set, make sure we start\n    // with an empty filter. This is used to clear the filter when the\n    // widget is hidden.\n    React.useEffect(() => {\n        if (clearFilter) {\n            setFilter(\"\");\n        }\n    }, [clearFilter]);\n    function onChange(e) {\n        setFilter(e.currentTarget.value);\n    }\n    // Filter the child `Dropdown.Item` items\n    const sessionList = React.Children.toArray(children).filter(\n        (child) =>\n            !filter.trim() ||\n            child.props.children.toLowerCase().includes(filter.trim())\n    );\n    // The sessions list could be empty for two reasons: there are\n    // no sessions, or we've filtered them all away. Display an\n    // appropriate message in either case\n    const emptyListMessage =\n        children.length === 0\n            ? \"No Available Sessions\"\n            : \"No Matching Sessions\";\n    return (\n        <div style={style} className={className} ref={ref}>\n            <FormControl\n                autoFocus\n                className=\"mx-3 my-2 w-auto\"\n                placeholder=\"Type to filter...\"\n                title=\"Filter sessions\"\n                onChange={onChange}\n                value={filter}\n                tabIndex={0}\n            />\n            <ul className=\"list-unstyled my-0\">\n                {sessionList.length > 0 ? (\n                    sessionList\n                ) : (\n                    <li className=\"dropdown-item text-muted\">\n                        {emptyListMessage}\n                    </li>\n                )}\n            </ul>\n        </div>\n    );\n});\n/**\n * A menu that nests inside a `Dropdown`. Pass in a list\n * `items` which are objects of the form `{id: ..., name: ...}`.\n * When `onSelect` is triggered, it will be passed the index of the clicked-upon\n * item in the `items` array.\n *\n * @param {*} props\n * @returns\n */\nexport function FilterableMenu(props) {\n    const { items, activeItemId, clearFilter } = props;\n    return (\n        <Dropdown.Menu as={FilterableMenuContents} clearFilter={clearFilter}>\n            {items.map((s, index) => (\n                <Dropdown.Item\n                    key={s.id}\n                    eventKey={index}\n                    active={activeItemId === s.id}\n                >\n                    {s.name}\n                </Dropdown.Item>\n            ))}\n        </Dropdown.Menu>\n    );\n}\nFilterableMenu.propTypes = {\n    items: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.any.isRequired,\n            name: PropTypes.string.isRequired,\n        })\n    ),\n    activeItemId: PropTypes.any,\n    clearFilter: PropTypes.bool,\n};\n","import React from \"react\";\nimport { Header } from \"../../components/header\";\nimport { connect } from \"react-redux\";\nimport {\n    sessionsSelector,\n    activeSessionSelector,\n    setActiveUserRole,\n    setActiveSession,\n    activeUserSelector,\n    activeRoleSelector,\n} from \"../../api/actions\";\nimport { ActiveUserDisplay } from \"../../components/active-user\";\nimport { ActiveSessionDisplay } from \"../../components/active-session\";\n/**\n * Header showing the routes that a user with `role=admin`\n * can see.\n *\n * @returns\n */\n\nexport const routes = [\n    {\n        route: \"/tapp\",\n        name: \"Admin\",\n        description: \"Admin View\",\n        subroutes: [\n            {\n                route: \"/sessions\",\n                name: \"Sessions\",\n                description: \"Manage Sessions\",\n            },\n            {\n                route: \"/contract_templates\",\n                name: \"Contract Templates\",\n                description: \"Manage Contract Templates\",\n            },\n            {\n                route: \"/instructors\",\n                name: \"Instructors\",\n                description: \"Manage Instructors\",\n            },\n            {\n                route: \"/positions\",\n                name: \"Positions\",\n                description: \"Manage Positions\",\n            },\n            {\n                route: \"/assignments\",\n                name: \"Assignments\",\n                description: \"Manage Assignments\",\n            },\n            {\n                route: \"/applicants\",\n                name: \"Applicants\",\n                description: \"Manage Applicants\",\n            },\n        ],\n    },\n    {\n        route: \"/matching\",\n        name: \"Matching\",\n        description: \"Matching\",\n        subroutes: [\n            {\n                route: \"/statistics\",\n                name: \"Statistics\",\n                description: \"See statistics about accepted/rejected contracts\",\n            },\n        ],\n    },\n    {\n        route: \"/appointments_and_positions\",\n        name: \"Appointments & Positions\",\n        description: \"Appointments & Positions\",\n    },\n];\nfunction AdminHeader() {\n    return (\n        <Header\n            routes={routes}\n            infoComponents={[\n                <ConnectedActiveSessionDisplay key={0} />,\n                <ConnectedActiveUserDisplay key={1} />,\n            ]}\n        />\n    );\n}\n\nconst mapSessionsStateToProps = (state) => ({\n    sessions: sessionsSelector(state),\n    activeSession: activeSessionSelector(state),\n});\n\nconst mapSessionsDispatchToProps = { setActiveSession };\n\nexport const ConnectedActiveSessionDisplay = connect(\n    mapSessionsStateToProps,\n    mapSessionsDispatchToProps\n)(ActiveSessionDisplay);\n\nconst mapActiveUserStateToProps = (state) => ({\n    activeUser: activeUserSelector(state),\n    activeRole: activeRoleSelector(state),\n});\n\nconst mapActiveUserDispatchToProps = { setActiveUserRole };\n\nconst ConnectedActiveUserDisplay = connect(\n    mapActiveUserStateToProps,\n    mapActiveUserDispatchToProps\n)(ActiveUserDisplay);\n\nexport { AdminHeader };\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { FilterableMenu } from \"./filterable-menu\";\nimport { Badge, Dropdown } from \"react-bootstrap\";\nimport { apiPropTypes } from \"../api/defs/prop-types\";\n\nexport function ActiveSessionDisplay(props) {\n    const { sessions = [], activeSession, setActiveSession } = props;\n    // keep track of the dropdown visibility so that the filter can be cleared\n    // whenever the dropdown is invisible.\n    const [dropdownVisible, setDropdownVisible] = React.useState(false);\n    const activeSessionId = activeSession ? activeSession.id : null;\n\n    const label = !activeSessionId ? (\n        <span className=\"text-secondary mr-2\">Select a Session</span>\n    ) : (\n        <span className=\"text-primary mr-2\">{activeSession.name}</span>\n    );\n\n    return (\n        <Badge>\n            Selected session:\n            <Dropdown\n                onSelect={(i) => {\n                    setActiveSession(sessions[i]);\n                }}\n                onToggle={(desiredVisibility) =>\n                    setDropdownVisible(desiredVisibility)\n                }\n                show={dropdownVisible}\n            >\n                <Dropdown.Toggle split variant=\"light\">\n                    {label}\n                </Dropdown.Toggle>\n                <FilterableMenu\n                    items={sessions}\n                    activeItemId={activeSessionId}\n                    clearFilter={!dropdownVisible}\n                />\n            </Dropdown>\n        </Badge>\n    );\n}\nActiveSessionDisplay.propTypes = {\n    setActiveSession: PropTypes.func.isRequired,\n    sessions: PropTypes.arrayOf(apiPropTypes.session).isRequired,\n    activeSession: apiPropTypes.session,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Badge, Dropdown } from \"react-bootstrap\";\nimport { apiPropTypes } from \"../api/defs/prop-types\";\n\nexport function ActiveUserDisplay(props) {\n    const [dropdownVisible, setDropdownVisible] = React.useState(false);\n    const {\n        activeUser = { utorid: \"<noid>\", roles: [] },\n        activeRole,\n        setActiveUserRole,\n    } = props;\n\n    const roles = activeUser.roles;\n    const label = !activeRole ? (\n        <span className=\"text-secondary mr-2\">Select a role</span>\n    ) : (\n        <span className=\"text-primary mr-2\">{activeRole}</span>\n    );\n\n    const isActiveRole = (role) => {\n        return activeRole === role;\n    };\n    return (\n        <Badge>\n            Login: {activeUser.utorid}\n            {\" as\"}\n            <Dropdown\n                onSelect={(i) => {\n                    setActiveUserRole(roles[i]);\n                }}\n                onToggle={(desiredVisibility) =>\n                    setDropdownVisible(desiredVisibility)\n                }\n                show={dropdownVisible}\n                alignRight\n            >\n                <Dropdown.Toggle split variant=\"light\">\n                    {label}\n                </Dropdown.Toggle>\n                <Dropdown.Menu flip={true}>\n                    {(roles || []).map((role, index) => (\n                        <Dropdown.Item\n                            key={index}\n                            eventKey={index}\n                            active={isActiveRole(role)}\n                        >\n                            {role}\n                        </Dropdown.Item>\n                    ))}\n                </Dropdown.Menu>\n            </Dropdown>\n        </Badge>\n    );\n}\nActiveUserDisplay.propTypes = {\n    activeUser: apiPropTypes.user,\n    activeRole: PropTypes.string,\n    setActiveUserRole: PropTypes.func.isRequired,\n};\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { activeSessionSelector } from \"../../api/actions\";\nimport { ConnectedActiveSessionDisplay } from \"./header\";\nimport { ContentArea } from \"../../components/layout\";\nimport { Session } from \"../../api/defs/types\";\n\nfunction ConnectedLandingView() {\n    const activeSession = useSelector(activeSessionSelector) as Session | null;\n\n    let activeSessionInfo = (\n        <>\n            There is currently <b className=\"text-primary\">no active session</b>{\" \"}\n            selected. Please select one below.\n        </>\n    );\n    if (activeSession) {\n        activeSessionInfo = (\n            <>\n                The current active session is{\" \"}\n                <b className=\"text-primary\">{activeSession.name}</b>. You may\n                select a different session below.\n            </>\n        );\n    }\n\n    return (\n        <div className=\"page-body\">\n            <ContentArea>\n                <h2>Welcome to TAPP!</h2>\n                <p>\n                    TAPP is a TA administration program designed for creating\n                    and distributing TA contracts.\n                </p>\n                <p>\n                    In order to use most features of TAPP, you need to select a{\" \"}\n                    <i>session</i>. {activeSessionInfo}\n                </p>\n                <ConnectedActiveSessionDisplay />\n            </ContentArea>\n        </div>\n    );\n}\n\nexport { ConnectedLandingView as Landing };\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { applicantsSelector, upsertApplicant } from \"../../api/actions\";\nimport { EditableField } from \"../../components/edit-field-widgets\";\nimport { Applicant } from \"../../api/defs/types\";\nimport { ApplicantsList } from \"../../components/applicants\";\n\n/**\n * A cell that renders editable applicant information\n *\n * @param {*} props\n * @returns\n */\nfunction EditableCell(props: {\n    column: any;\n    original: Applicant;\n    upsertApplicant: Function;\n    field: string;\n    value: string;\n}): React.ReactElement {\n    const title = `Edit ${props.column.Header}`;\n    const { upsertApplicant, field } = props;\n\n    async function onChange(newVal: string | number | null) {\n        const applicantId = props.original.id;\n        return await upsertApplicant({ id: applicantId, [field]: newVal });\n    }\n    return (\n        <EditableField\n            title={title}\n            value={props.value || \"\"}\n            onChange={onChange}\n            editable={true}\n        >\n            {props.value}\n        </EditableField>\n    );\n}\n\nexport function ConnectedApplicantsList(props: object) {\n    const { ...rest } = props;\n    const applicants = useSelector(applicantsSelector) as Applicant[];\n    const dispatch = useDispatch();\n\n    function _upsertApplicant(applicant: Partial<Applicant>) {\n        return dispatch(upsertApplicant(applicant));\n    }\n\n    // Bind an `ApplicantCell` to a particular field\n    function generateCell(field: string) {\n        return (props: any) => (\n            <EditableCell\n                field={field}\n                upsertApplicant={_upsertApplicant}\n                {...props}\n            />\n        );\n    }\n\n    const columns = [\n        {\n            Header: \"Last Name\",\n            accessor: \"last_name\",\n            Cell: generateCell(\"last_name\"),\n        },\n        {\n            Header: \"First Name\",\n            accessor: \"first_name\",\n            Cell: generateCell(\"first_name\"),\n        },\n        {\n            Header: \"Email\",\n            accessor: \"email\",\n            Cell: generateCell(\"email\"),\n        },\n        {\n            Header: \"UTORid\",\n            accessor: \"utorid\",\n            Cell: generateCell(\"utorid\"),\n        },\n        {\n            Header: \"Student Number\",\n            accessor: \"student_number\",\n            Cell: generateCell(\"student_number\"),\n        },\n        {\n            Header: \"Phone\",\n            accessor: \"phone\",\n            Cell: generateCell(\"phone\"),\n        },\n    ];\n\n    return (\n        <ApplicantsList applicants={applicants} columns={columns} {...rest} />\n    );\n}\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Modal, Button, Alert, Spinner } from \"react-bootstrap\";\nimport { applicantsSelector, upsertApplicant } from \"../../api/actions\";\nimport { strip } from \"../../libs/utils\";\nimport { Applicant } from \"../../api/defs/types\";\nimport { ApplicantEditor } from \"../../components/applicants\";\n\nconst BLANK_APPLICANT = {\n    first_name: \"\",\n    last_name: \"\",\n    email: \"\",\n    utorid: \"\",\n    phone: \"\",\n    student_number: \"\",\n};\n\n/**\n * Find if there is a conflicting instructor in the passed in list\n * of instructors, or if any required fields are incorrect.\n *\n * @param {object} applicant\n * @param {object[]} applicants\n */\nfunction getConflicts(applicant: Partial<Applicant>, applicants: Applicant[]) {\n    const ret: {\n        delayShow: string;\n        immediateShow: React.ReactNode;\n    } = { delayShow: \"\", immediateShow: \"\" };\n    if (\n        !strip(applicant.utorid || \"\") ||\n        !strip(applicant.first_name || \"\") ||\n        !strip(applicant.last_name || \"\")\n    ) {\n        ret.delayShow = \"A first name, last name, and utorid is required\";\n    }\n    const matchingApplicant = applicants.find(\n        (x) => strip(x.utorid) === strip(applicant.utorid || \"\")\n    );\n    if (matchingApplicant) {\n        ret.immediateShow = (\n            <p>\n                Another applicant exists with utorid={applicant.utorid}:{\" \"}\n                <b>\n                    {matchingApplicant.first_name} {matchingApplicant.last_name}\n                </b>\n            </p>\n        );\n    }\n    return ret;\n}\n\nexport function ConnectedAddApplicantDialog(props: {\n    show: boolean;\n    onHide?: (...args: any) => any;\n}) {\n    const { show, onHide = () => {} } = props;\n    const [newApplicant, setNewApplicant] = React.useState<Partial<Applicant>>(\n        BLANK_APPLICANT\n    );\n    const [inProgress, setInProgress] = React.useState(false);\n\n    const applicants = useSelector(applicantsSelector) as Applicant[];\n    const dispatch = useDispatch();\n\n    function _upsertApplicant(applicant: Partial<Applicant>) {\n        return dispatch(upsertApplicant(applicant));\n    }\n\n    React.useEffect(() => {\n        if (!show) {\n            // If the dialog is hidden, reset the state\n            setNewApplicant(BLANK_APPLICANT);\n        }\n    }, [show]);\n\n    async function createInstructor() {\n        setInProgress(true);\n        await _upsertApplicant(newApplicant);\n        setInProgress(false);\n        onHide();\n    }\n\n    // When a confirm operation is in progress, a spinner is displayed; otherwise\n    // it's hidden\n    const spinner = inProgress ? (\n        <Spinner animation=\"border\" size=\"sm\" className=\"mr-1\" />\n    ) : null;\n\n    const conflicts = getConflicts(newApplicant, applicants);\n\n    return (\n        <Modal show={show} onHide={onHide}>\n            <Modal.Header closeButton>\n                <Modal.Title>Add Applicant</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <ApplicantEditor\n                    applicant={newApplicant}\n                    setApplicant={setNewApplicant}\n                />\n                {conflicts.immediateShow ? (\n                    <Alert variant=\"danger\">{conflicts.immediateShow}</Alert>\n                ) : null}\n            </Modal.Body>\n            <Modal.Footer>\n                <Button onClick={onHide} variant=\"light\">\n                    Cancel\n                </Button>\n                <Button\n                    onClick={createInstructor}\n                    title={conflicts.delayShow || \"Create Instructor\"}\n                    disabled={\n                        !!conflicts.delayShow || !!conflicts.immediateShow\n                    }\n                >\n                    {spinner}Create Applicant\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n","import React from \"react\";\nimport FileSaver from \"file-saver\";\nimport {\n    exportApplicants,\n    applicantsSelector,\n    upsertApplicants,\n} from \"../../api/actions\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { ExportActionButton } from \"../../components/export-button\";\nimport { ImportActionButton } from \"../../components/import-button\";\nimport { Alert } from \"react-bootstrap\";\nimport { normalizeImport, dataToFile } from \"../../libs/importExportUtils\";\nimport { prepareMinimal } from \"../../libs/exportUtils\";\nimport { diffImport, getChanged, DiffSpec } from \"../../libs/diffUtils\";\nimport { Applicant, MinimalApplicant } from \"../../api/defs/types\";\nimport {\n    ApplicantsList,\n    ApplicantsDiffList,\n} from \"../../components/applicants\";\n\n/**\n * Allows for the download of a file blob containing the exported instructors.\n * Instructors are synchronized from the server before being downloaded.\n *\n * @export\n * @returns\n */\nexport function ConnectedExportApplicantsAction() {\n    const dispatch = useDispatch();\n    const [exportType, setExportType] = React.useState<\n        \"spreadsheet\" | \"json\" | null\n    >(null);\n\n    React.useEffect(() => {\n        if (!exportType) {\n            return;\n        }\n\n        async function doExport() {\n            // Having an export type of `null` means we're ready to export again,\n            // We set the export type to null at the start so in case an error occurs,\n            // we can still try again. This *will not* affect the current value of `exportType`\n            setExportType(null);\n\n            // Make a function that converts a list of instructors into a `File` object.\n            function prepareData(\n                applicants: Applicant[],\n                dataFormat: \"csv\" | \"json\" | \"xlsx\"\n            ) {\n                return dataToFile(\n                    {\n                        toSpreadsheet: () =>\n                            [\n                                [\n                                    \"Last Name\",\n                                    \"First Name\",\n                                    \"UTORid\",\n                                    \"Student Number\",\n                                    \"email\",\n                                    \"Phone\",\n                                ],\n                            ].concat(\n                                applicants.map((applicant) => [\n                                    applicant.last_name,\n                                    applicant.first_name,\n                                    applicant.utorid,\n                                    applicant.student_number,\n                                    applicant.email,\n                                    applicant.phone,\n                                ])\n                            ),\n                        toJson: () => ({\n                            applicants: applicants.map((applicant) =>\n                                prepareMinimal.applicant(applicant)\n                            ),\n                        }),\n                    },\n                    dataFormat,\n                    \"applicants\"\n                );\n            }\n\n            const file = await dispatch(\n                exportApplicants(prepareData, exportType)\n            );\n\n            FileSaver.saveAs(file);\n        }\n        doExport().catch(console.error);\n    }, [exportType, dispatch]);\n\n    function onClick(option: \"spreadsheet\" | \"json\") {\n        setExportType(option);\n    }\n\n    return <ExportActionButton onClick={onClick} />;\n}\n\nconst applicantSchema = {\n    keys: [\n        \"first_name\",\n        \"last_name\",\n        \"utorid\",\n        \"email\",\n        \"student_number\",\n        \"phone\",\n    ],\n    keyMap: {\n        \"First Name\": \"first_name\",\n        \"Given Name\": \"first_name\",\n        First: \"first_name\",\n        \"Last Name\": \"last_name\",\n        Surname: \"last_name\",\n        \"Family Name\": \"last_name\",\n        Last: \"last_name\",\n        \"Student Number\": \"student_number\",\n    },\n    requiredKeys: [\"utorid\"],\n    primaryKey: \"utorid\",\n    dateColumns: [],\n    baseName: \"applicants\",\n};\n\nexport function ConnectedImportInstructorAction() {\n    const dispatch = useDispatch();\n    const applicants = useSelector(applicantsSelector);\n    const [fileContent, setFileContent] = React.useState<{\n        fileType: \"json\" | \"spreadsheet\";\n        data: any;\n    } | null>(null);\n    const [diffed, setDiffed] = React.useState<\n        DiffSpec<MinimalApplicant, Applicant>[] | null\n    >(null);\n    const [processingError, setProcessingError] = React.useState(null);\n    const [inProgress, setInProgress] = React.useState(false);\n\n    // Make sure we aren't showing any diff if there's no file loaded.\n    React.useEffect(() => {\n        if (!fileContent) {\n            if (diffed) {\n                setDiffed(null);\n            }\n        }\n    }, [diffed, setDiffed, fileContent]);\n\n    // Recompute the diff every time the file changes\n    React.useEffect(() => {\n        // If we have no file or we are currently in the middle of processing another file,\n        // do nothing.\n        if (!fileContent || inProgress) {\n            return;\n        }\n        try {\n            setProcessingError(null);\n            // normalize the data coming from the file\n            const data = normalizeImport(\n                fileContent,\n                applicantSchema\n            ) as MinimalApplicant[];\n            // Compute which applicants have been added/modified\n            const newDiff = diffImport.applicants(data, { applicants });\n\n            setDiffed(newDiff);\n        } catch (e) {\n            console.warn(e);\n            setProcessingError(e);\n        }\n    }, [fileContent, applicants, inProgress]);\n\n    async function onConfirm() {\n        if (!diffed) {\n            throw new Error(\"Unable to compute an appropriate diff\");\n        }\n        const changedApplicants = getChanged(diffed);\n\n        await dispatch(upsertApplicants(changedApplicants));\n\n        setFileContent(null);\n    }\n\n    let dialogContent = <p>No data loaded...</p>;\n    if (processingError) {\n        dialogContent = <Alert variant=\"danger\">{\"\" + processingError}</Alert>;\n    } else if (diffed) {\n        const newItems = diffed\n            .filter((item) => item.status === \"new\")\n            .map((item) => item.obj);\n        const modifiedDiffSpec = diffed.filter(\n            (item) => item.status === \"modified\"\n        );\n\n        if (newItems.length === 0 && modifiedDiffSpec.length === 0) {\n            dialogContent = (\n                <Alert variant=\"warning\">\n                    No difference between imported applicants and those already\n                    on the system.\n                </Alert>\n            );\n        } else {\n            dialogContent = (\n                <>\n                    {newItems.length > 0 && (\n                        <Alert variant=\"primary\">\n                            <span className=\"mb-1\">\n                                The following applicants will be{\" \"}\n                                <strong>added</strong>\n                            </span>\n                            <ApplicantsList applicants={newItems} />\n                        </Alert>\n                    )}\n                    {modifiedDiffSpec.length > 0 && (\n                        <Alert variant=\"info\">\n                            <span className=\"mb-1\">\n                                The following instructors will be{\" \"}\n                                <strong>modified</strong>\n                            </span>\n                            <ApplicantsDiffList\n                                modifiedApplicants={modifiedDiffSpec}\n                            />\n                        </Alert>\n                    )}\n                </>\n            );\n        }\n    }\n\n    return (\n        <ImportActionButton\n            onConfirm={onConfirm}\n            onFileChange={setFileContent}\n            dialogContent={dialogContent}\n            setInProgress={setInProgress}\n        />\n    );\n}\n","import React from \"react\";\nimport { ConnectedApplicantsList } from \"./editable-applicants-list\";\nimport { ConnectedAddApplicantDialog } from \"./add-applicant-dialog\";\nimport { FaTrash, FaPlus } from \"react-icons/fa\";\nimport {\n    ConnectedImportInstructorAction,\n    ConnectedExportApplicantsAction,\n} from \"./import-export\";\nimport {\n    ActionsList,\n    ActionButton,\n    ActionHeader,\n} from \"../../components/action-buttons\";\nimport { ContentArea } from \"../../components/layout\";\n\nexport function AdminApplicantsView(): React.ReactNode {\n    const [addDialogVisible, setAddDialogVisible] = React.useState(false);\n    const [inDeleteMode, setInDeleteMode] = React.useState(false);\n    return (\n        <div className=\"page-body\">\n            <ActionsList>\n                <ActionHeader>Available Actions</ActionHeader>\n                <ActionButton\n                    icon={<FaPlus />}\n                    onClick={() => {\n                        setAddDialogVisible(true);\n                    }}\n                >\n                    Add Applicant\n                </ActionButton>\n                <ActionButton\n                    icon={<FaTrash />}\n                    onClick={() => setInDeleteMode(!inDeleteMode)}\n                    active={inDeleteMode}\n                >\n                    Delete Applicant\n                </ActionButton>\n\n                <ActionHeader>Import/Export</ActionHeader>\n                <ConnectedImportInstructorAction />\n                <ConnectedExportApplicantsAction />\n            </ActionsList>\n            <ContentArea>\n                <ConnectedAddApplicantDialog\n                    show={addDialogVisible}\n                    onHide={() => {\n                        setAddDialogVisible(false);\n                    }}\n                />\n                <ConnectedApplicantsList />\n            </ContentArea>\n        </div>\n    );\n}\n","import React from \"react\";\nimport { Redirect, Route, Switch } from \"react-router-dom\";\nimport Dashboard from \"../dashboard\";\nimport ControlPanel from \"../cp_control_panel/ControlPanel\";\nimport { AdminInstructorsView } from \"../instructors\";\nimport { AdminSessionsView } from \"../sessions\";\nimport { AdminPositionsView } from \"../positions\";\nimport { AdminAssignmentsView } from \"../assignments\";\nimport { AdminContractTemplatesView } from \"../contract_template\";\nimport { Landing } from \"../admin/landing.tsx\";\nimport { AdminApplicantsView } from \"../applicants\";\n\nexport function AdminRoutes() {\n    return (\n        <Switch>\n            <Route exact path=\"/\">\n                <Redirect to=\"/tapp\" />\n            </Route>\n            <Route exact path=\"/tapp\">\n                <Landing />\n            </Route>\n            <Route exact path=\"/tapp/sessions\">\n                <AdminSessionsView />\n            </Route>\n            <Route exact path=\"/tapp/contract_templates\">\n                <AdminContractTemplatesView />\n            </Route>\n            <Route exact path=\"/tapp/instructors\">\n                <AdminInstructorsView />\n            </Route>\n            <Route exact path=\"/tapp/positions\">\n                <AdminPositionsView />\n            </Route>\n            <Route exact path=\"/tapp/assignments\">\n                <AdminAssignmentsView />\n            </Route>\n            <Route exact path=\"/tapp/applicants\">\n                <AdminApplicantsView />\n            </Route>\n            <Route exact path=\"/dashboard\">\n                <Dashboard />\n            </Route>\n            <Route exact path=\"/cp\">\n                <ControlPanel />\n            </Route>\n        </Switch>\n    );\n}\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { initFromStage } from \"./api/actions\";\nimport { ConnectedNotifications } from \"./views/notificatons\";\nimport { AdminRoutes } from \"./views/routes\";\nimport { AdminHeader } from \"./views/admin\";\nimport { globalsSelector } from \"./api/actions/globals\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n    componentDidMount() {\n        this.props.initFromStage(\"pageLoad\");\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <AdminHeader />\n                <div className=\"view-container\">\n                    <AdminRoutes />\n                </div>\n                <ConnectedNotifications />\n            </React.Fragment>\n        );\n    }\n}\n\nconst ConnectedApp = connect(\n    (state) => ({\n        globals: globalsSelector(state),\n    }),\n    { initFromStage }\n)(App);\n\nexport default ConnectedApp;\n","import { createReducer } from \"redux-create-reducer\";\nimport { SET_GLOBALS } from \"../constants\";\n\nexport const globalReducer = createReducer(\n    {},\n    {\n        [SET_GLOBALS]: (state, action) => ({\n            ...state,\n            ...action.payload,\n        }),\n    }\n);\n","import { SET_SELECTED_ROWS } from \"./constants\";\nimport { createReducer } from \"redux-create-reducer\";\n\n// initialize the state of offer table\nconst initialState = {\n    selectedAssignmentIds: [],\n};\n\nconst offerTableReducer = createReducer(initialState, {\n    [SET_SELECTED_ROWS]: (state, action) => {\n        return { ...state, selectedAssignmentIds: action.payload };\n    },\n});\n\nexport default offerTableReducer;\n","import { reducer as formReducer } from \"redux-form\";\nimport { reducer as notificationReducer } from \"react-notification-system-redux\";\nimport { combineReducers } from \"./api/reducers/utils\";\nimport { globalReducer } from \"./api/reducers/globals\";\nimport offerTableReducer from \"./views/offertable/reducers\";\nimport {\n    statusReducer,\n    sessionsReducer,\n    positionsReducer,\n    applicantsReducer,\n    applicationsReducer,\n    assignmentsReducer,\n    instructorsReducer,\n    contractTemplatesReducer,\n} from \"./api/reducers\";\nimport { usersReducer } from \"./api/reducers/users\";\n\n// When `combineReducers` is used,\n// every action gets dispatched to every reducer.\n// Since reducers don't change the state on unrecognized\n// actions, this is okay. Further, each reducer believes\n// it has its own top-level state, but in reality it is\n// just passed a part of the whole state. E.g., if `combineReducers`\n// is passed\n//   {\n//      mypath: myReducer\n//   }\n// When `myReducer(localState)` is called, `localSate == globalState.mypath`.\nconst reducer = combineReducers({\n    model: combineReducers({\n        status: statusReducer,\n        sessions: sessionsReducer,\n        positions: positionsReducer,\n        applicants: applicantsReducer,\n        applications: applicationsReducer,\n        assignments: assignmentsReducer,\n        instructors: instructorsReducer,\n        contractTemplates: contractTemplatesReducer,\n        users: usersReducer,\n    }),\n    ui: combineReducers({\n        notifications: notificationReducer,\n        form: formReducer,\n        offerTable: offerTableReducer,\n        globals: globalReducer,\n    }),\n});\n\nexport default reducer;\n","import { createReducer } from \"./utils\";\nimport { API_INTERACTION_START, API_INTERACTION_END } from \"../constants\";\n\nconst initialState = {\n    ongoingInteraction: false,\n    ongoingInteractionsList: [],\n};\n\n// Keep a list of all ongoing interactions that are in progress.\n// This way we could display a spinner or some-such while interactions\n// are going on. Interactions will be mostly network-based interactions.\nexport const statusReducer = createReducer(initialState, {\n    [API_INTERACTION_START]: (state, action) => ({\n        ...state,\n        ongoingInteraction: true,\n        ongoingInteractionsList: [\n            ...state.ongoingInteractionsList,\n            action.payload,\n        ],\n    }),\n    [API_INTERACTION_END]: (state, action) => {\n        // remove the current interaction\n        const ongoingInteractionsList = state.ongoingInteractionsList.filter(\n            (i) => i.id !== action.payload.id\n        );\n        return {\n            ...state,\n            ongoingInteraction: ongoingInteractionsList.length > 0,\n            ongoingInteractionsList: ongoingInteractionsList,\n        };\n    },\n});\n","import { createStore, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport rootReducer from \"./rootReducer\";\nimport thunk from \"redux-thunk\";\n\n/* eslint-disable */\nconst configureStore = () => {\n    const persistConfig = {\n        key: \"root\",\n        storage,\n        whitelist: [\"auth\", \"application\"],\n    };\n    const persistedReducer = persistReducer(persistConfig, rootReducer);\n    const store = createStore(\n        persistedReducer,\n        composeWithDevTools(applyMiddleware(thunk))\n    );\n    const persistor = persistStore(store);\n\n    if (process.env.NODE_ENV !== \"production\") {\n        if (module.hot) {\n            module.hot.accept(\"./rootReducer\", () => {\n                store.replaceReducer(persistedReducer);\n            });\n        }\n    }\n\n    return { store, persistor };\n};\n/* eslint-enable */\n\nexport default configureStore;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { HashRouter } from \"react-router-dom\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport { DevFrame as _DevFrame } from \"./views/dev_frame\";\nimport App from \"./App\";\nimport configureStore from \"./store\";\n\nconst { store, persistor } = configureStore();\n\n// In production, we don't want to wrap the app in a dev frame,\n// but we do want to in development\nlet DevFrame = function (props) {\n    return <React.Fragment>{props.children}</React.Fragment>;\n};\n/* eslint-disable */\nif (process.env.REACT_APP_DEV_FEATURES) {\n    DevFrame = _DevFrame;\n}\n/* eslint-enable */\n\nconst render = (Component) => {\n    return ReactDOM.render(\n        <HashRouter>\n            <Provider store={store}>\n                <PersistGate persistor={persistor}>\n                    <DevFrame>\n                        <div id=\"app-body\">\n                            <Component />\n                        </div>\n                    </DevFrame>\n                </PersistGate>\n            </Provider>\n        </HashRouter>,\n        document.getElementById(\"root\")\n    );\n};\n\nrender(App);\n\n// Hot module reloading\n// https://medium.com/@brianhan/hot-reloading-cra-without-eject-b54af352c642\n\n/*eslint-disable */\nif (module.hot) {\n    module.hot.accept(\"./App\", () => {\n        const NextApp = require(\"./App\").default;\n        render(NextApp);\n    });\n}\n/*eslint-enable */\n"],"sourceRoot":""}